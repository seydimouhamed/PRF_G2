Index: src/Entity/User.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Entity;\n\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping\\InheritanceType;\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Doctrine\\ORM\\Mapping\\DiscriminatorColumn;\nuse ApiPlatform\\Core\\Annotation\\ApiSubresource;\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nuse Symfony\\Component\\Serializer\\Annotation\\SerializedName;\n\n/**\n * @ORM\\Entity(repositoryClass=UserRepository::class)\n * @ORM\\InheritanceType(\"JOINED\")\n* @ORM\\DiscriminatorColumn(name=\"discr\", type=\"string\")\n* @ORM\\DiscriminatorMap({\"user\"=\"User\",\"apprenant\" = \"Apprenant\",\"formateur\"=\"Formateur\"})\n * @ApiResource(\n *      collectionOperations={\n *           \"get_admin_users\"={\n *               \"method\"=\"GET\", \n *               \"path\"=\"/admin/users\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *            \"add_users\"={ \n *               \"method\"=\"POST\", \n *               \"path\"=\"/admin/users\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                 \"security_message\"=\"Acces non autorisé\",\n *          },\n *      },\n *      itemOperations={\n *           \"get_admin_users_id\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/admin/users/{id}\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *            \"modifier_admin_users_id\"={ \n *               \"method\"=\"PUT\", \n *               \"path\"=\"/admin/users/{id}\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *      },\n *       normalizationContext={\"groups\"={\"user:read\"}},\n *       denormalizationContext={\"groups\"={\"user:write\"}},\n * attributes={\"pagination_enabled\"=true, \"pagination_items_per_page\"=2}\n * )\n */\nclass User implements UserInterface\n{\n    /**\n     * @ORM\\Id()\n     * @ORM\\GeneratedValue()\n     * @ORM\\Column(type=\"integer\")\n     * @Groups({\"user:read\",\"profil:read\"})\n     * \n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=180, unique=true)\n     * \n     * @Groups({\"user:read\", \"user:write\",\"profil:read\"})\n     */\n    private $username;\n\n\n    private $roles = [];\n\n    /**\n     * @var string The hashed password\n     * @ORM\\Column(type=\"string\")\n     */\n    private $password;\n\n    /**\n     * @Groups(\"user:write\")\n     */\n    private $plainPassword;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\n     * \n     * @Groups({\"user:read\", \"user:write\", \"profil:read\"})\n     */\n    private $fisrtName;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\n     * \n     *  @Groups({\"user:read\", \"user:write\", \"profil:read\"})\n     */\n    private $lastName;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\n     * \n     *  @Groups({\"user:read\", \"user:write\", \"profil:read\"})\n     */\n    private $email;\n\n    /**\n     * @ORM\\Column(type=\"blob\", nullable=true)\n     * \n     *  @Groups({\"user:read\", \"user:write\", \"profil:read\"})\n     */\n    private $photo;\n\n    /**\n     * @ORM\\ManyToOne(targetEntity=Profil::class, inversedBy=\"users\")\n     * @ApiSubresource\n     * Groups({\"user:read\", \"user:write\"})\n     */\n    private $profil;\n\n    /**\n     * @ORM\\Column(type=\"boolean\",options={\"default\" : false})\n     */\n    private $archivage;\n\n    /**\n     * @ORM\\OneToMany(targetEntity=Promotion::class, mappedBy=\"users\")\n     */\n    private $promotions;\n\n    public function __construct()\n    {\n        $this->promotions = new ArrayCollection();\n    }\n\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    /**\n     * A visual identifier that represents this user.\n     *\n     * @see UserInterface\n     */\n    public function getUsername(): string\n    {\n        return (string) $this->username;\n    }\n\n    public function setUsername(string $username): self\n    {\n        $this->username = $username;\n\n        return $this;\n    }\n\n    /**\n     * @see UserInterface\n     */\n    public function getRoles(): array\n    {\n        $roles = $this->roles;\n        // guarantee every user at least has ROLE_USER\n        $roles[] = 'ROLE_'.$this->profil->getAbbr();\n\n        return array_unique($roles);\n    }\n\n    public function setRoles(array $roles): self\n    {\n        $this->roles = $roles;\n\n        return $this;\n    }\n\n    /**\n     * @see UserInterface\n     */\n    public function getPassword(): string\n    {\n        return (string) $this->password;\n    }\n\n    public function setPassword(string $password): self\n    {\n        $this->password = $password;\n\n        return $this;\n    }\n\n    /**\n     * @see UserInterface\n     */\n    public function getSalt()\n    {\n        // not needed when using the \"bcrypt\" algorithm in security.yaml\n    }\n\n    /**\n     * @see UserInterface\n     */\n    public function eraseCredentials()\n    {\n\n        // If you store any temporary, sensitive data on the user, clear it here\n         $this->plainPassword = null;\n    }\n\n    public function getFisrtName(): ?string\n    {\n        return $this->fisrtName;\n    }\n\n    public function setFisrtName(string $fisrtName): self\n    {\n        $this->fisrtName = $fisrtName;\n\n        return $this;\n    }\n\n    public function getLastName(): ?string\n    {\n        return $this->lastName;\n    }\n\n    public function setLastName(string $lastName): self\n    {\n        $this->lastName = $lastName;\n\n        return $this;\n    }\n\n    public function getEmail(): ?string\n    {\n        return $this->email;\n    }\n\n    public function setEmail(string $email): self\n    {\n        $this->email = $email;\n\n        return $this;\n    }\n\n\n    public function getPhoto()\n    {\n         $data = stream_get_contents($this->photo);\n         fclose($this->photo);\n\n        return base64_encode($data);\n    }\n\n    public function setPhoto($photo): self\n    {\n        $this->photo = $photo;\n\n        return $this;\n    }\n\n    /**\n     * Get the value of plainPassword\n     */ \n    public function getPlainPassword()\n    {\n        return $this->plainPassword;\n    }\n\n    /**\n     * Set the value of plainPassword\n     *\n     * @return  self\n     */ \n    public function setPlainPassword($plainPassword)\n    {\n        $this->plainPassword = $plainPassword;\n\n        return $this;\n    }\n\n    public function getProfil(): ?Profil\n    {\n        return $this->profil;\n    }\n\n    public function setProfil(?Profil $profil): self\n    {\n        $this->profil = $profil;\n\n        return $this;\n    }\n\n    public function getArchivage(): ?bool\n    {\n        return $this->archivage;\n    }\n\n    public function setArchivage(bool $archivage): self\n    {\n        $this->archivage = $archivage;\n\n        return $this;\n    }\n\n    /**\n     * @return Collection|Promotion[]\n     */\n    public function getPromotions(): Collection\n    {\n        return $this->promotions;\n    }\n\n    public function addPromotion(Promotion $promotion): self\n    {\n        if (!$this->promotions->contains($promotion)) {\n            $this->promotions[] = $promotion;\n            $promotion->setUsers($this);\n        }\n\n        return $this;\n    }\n\n    public function removePromotion(Promotion $promotion): self\n    {\n        if ($this->promotions->contains($promotion)) {\n            $this->promotions->removeElement($promotion);\n            // set the owning side to null (unless already changed)\n            if ($promotion->getUsers() === $this) {\n                $promotion->setUsers(null);\n            }\n        }\n\n        return $this;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Entity/User.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/Entity/User.php	(date 1597277288000)
@@ -2,8 +2,7 @@
 
 namespace App\Entity;
 
-use Doctrine\Common\Collections\ArrayCollection;
-use Doctrine\Common\Collections\Collection;
+use Symfony\Component\Validator\Constraints as Assert;
 use Doctrine\ORM\Mapping as ORM;
 use App\Repository\UserRepository;
 use Doctrine\ORM\Mapping\InheritanceType;
@@ -18,19 +17,17 @@
  * @ORM\Entity(repositoryClass=UserRepository::class)
  * @ORM\InheritanceType("JOINED")
 * @ORM\DiscriminatorColumn(name="discr", type="string")
-* @ORM\DiscriminatorMap({"user"="User","apprenant" = "Apprenant","formateur"="Formateur"})
+* @ORM\DiscriminatorMap({"admin"="User","apprenant" = "Apprenant","formateur"="Formateur","cm"="CommunityManager"})
  * @ApiResource(
  *      collectionOperations={
- *           "get_admin_users"={
+ *           "get_admin_users"={ 
  *               "method"="GET", 
  *               "path"="/admin/users",
- *                "security"="is_granted('ROLE_ADMIN')",
  *                  "security_message"="Acces non autorisé",
  *          },
  *            "add_users"={ 
  *               "method"="POST", 
  *               "path"="/admin/users",
- *                "security"="is_granted('ROLE_ADMIN')",
  *                 "security_message"="Acces non autorisé",
  *          },
  *      },
@@ -38,14 +35,15 @@
  *           "get_admin_users_id"={ 
  *               "method"="GET", 
  *               "path"="/admin/users/{id}",
- *                "security"="is_granted('ROLE_ADMIN')",
  *                  "security_message"="Acces non autorisé",
+ *                  "defaults"={"id"=null},
  *          },
+ * 
  *            "modifier_admin_users_id"={ 
  *               "method"="PUT", 
  *               "path"="/admin/users/{id}",
- *                "security"="is_granted('ROLE_ADMIN')",
  *                  "security_message"="Acces non autorisé",
+ *                  "defaults"={"id"=null},
  *          },
  *      },
  *       normalizationContext={"groups"={"user:read"}},
@@ -59,15 +57,18 @@
      * @ORM\Id()
      * @ORM\GeneratedValue()
      * @ORM\Column(type="integer")
-     * @Groups({"user:read","profil:read"})
+     * @Groups({"user:read","profil:read","promo:read"})
      * 
      */
     private $id;
 
     /**
-     * @ORM\Column(type="string", length=180, unique=true)
+     * @ORM\Column(type="string", length=180)
      * 
      * @Groups({"user:read", "user:write","profil:read"})
+     * @Groups({"groupe:read"})
+     * @Groups({"promo:read"})
+     * @Assert\NotBlank
      */
     private $username;
 
@@ -77,32 +78,43 @@
     /**
      * @var string The hashed password
      * @ORM\Column(type="string")
+     *
      */
     private $password;
 
     /**
      * @Groups("user:write")
+     * @Assert\NotBlank
      */
     private $plainPassword;
 
     /**
-     * @ORM\Column(type="string", length=255, nullable=true)
+     * @ORM\Column(type="string", length=255)
      * 
      * @Groups({"user:read", "user:write", "profil:read"})
+     * @Groups({"groupe:read"})
+     * @Groups({"promo:read"})
+     * @Assert\NotBlank
      */
     private $fisrtName;
 
     /**
-     * @ORM\Column(type="string", length=255, nullable=true)
+     * @ORM\Column(type="string", length=255)
      * 
      *  @Groups({"user:read", "user:write", "profil:read"})
+     * @Groups({"groupe:read"})
+     * @Groups({"promo:read"})
+     * @Assert\NotBlank
      */
     private $lastName;
 
     /**
-     * @ORM\Column(type="string", length=255, nullable=true)
+     * @ORM\Column(type="string", length=255)
      * 
      *  @Groups({"user:read", "user:write", "profil:read"})
+     * @Groups({"groupe:read"})
+     * @Assert\Email
+     * @Assert\Unique
      */
     private $email;
 
@@ -110,6 +122,8 @@
      * @ORM\Column(type="blob", nullable=true)
      * 
      *  @Groups({"user:read", "user:write", "profil:read"})
+     *  @Groups({"groupe:read"})
+     *  @Groups({"promo:read"})
      */
     private $photo;
 
@@ -117,24 +131,17 @@
      * @ORM\ManyToOne(targetEntity=Profil::class, inversedBy="users")
      * @ApiSubresource
      * Groups({"user:read", "user:write"})
+     * @Groups({"promo:read"})
      */
     private $profil;
 
     /**
      * @ORM\Column(type="boolean",options={"default" : false})
+     * @Groups({"groupe:read"})
+     * @Groups({"promo:read"})
      */
     private $archivage;
 
-    /**
-     * @ORM\OneToMany(targetEntity=Promotion::class, mappedBy="users")
-     */
-    private $promotions;
-
-    public function __construct()
-    {
-        $this->promotions = new ArrayCollection();
-    }
-
     public function getId(): ?int
     {
         return $this->id;
@@ -248,10 +255,11 @@
 
     public function getPhoto()
     {
-         $data = stream_get_contents($this->photo);
-         fclose($this->photo);
+        //  $data = stream_get_contents($this->photo);
+        //  fclose($this->photo);
 
-        return base64_encode($data);
+        // return base64_encode($data);
+        return $this->photo;
     }
 
     public function setPhoto($photo): self
@@ -302,37 +310,6 @@
     {
         $this->archivage = $archivage;
 
-        return $this;
-    }
-
-    /**
-     * @return Collection|Promotion[]
-     */
-    public function getPromotions(): Collection
-    {
-        return $this->promotions;
-    }
-
-    public function addPromotion(Promotion $promotion): self
-    {
-        if (!$this->promotions->contains($promotion)) {
-            $this->promotions[] = $promotion;
-            $promotion->setUsers($this);
-        }
-
-        return $this;
-    }
-
-    public function removePromotion(Promotion $promotion): self
-    {
-        if ($this->promotions->contains($promotion)) {
-            $this->promotions->removeElement($promotion);
-            // set the owning side to null (unless already changed)
-            if ($promotion->getUsers() === $this) {
-                $promotion->setUsers(null);
-            }
-        }
-
         return $this;
     }
 }
Index: src/Entity/Groupes.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse App\\Repository\\GroupesRepository;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse ApiPlatform\\Core\\Annotation\\ApiSubresource;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * @ApiResource(\n *     collectionOperations={\n *           \"get_groupe\"={\n *               \"method\"=\"GET\",\n *               \"path\"=\"/admin/groupes\",\n *               \"security\"=\"is_granted('ROLE_ADMIN')\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          },\n     *     \"get_groupe_apprenants\"={\n     *               \"method\"=\"GET\",\n     *               \"path\"=\"/admin/groupes/apprenants\",\n     *               \"security\"=\"is_granted('ROLE_ADMIN')\",\n     *               \"security_message\"=\"Acces non autorisé\",\n     *          },\n *            \"add_groupe\"={\n *               \"method\"=\"POST\",\n *               \"path\"=\"/admin/groupes\",\n *               \"security\"=\"is_granted('ROLE_ADMIN')\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          }\n *      },\n *      itemOperations={\n *           \"get_groupe_id\"={\n *               \"method\"=\"GET\",\n *               \"path\"=\"/admin/groupes/{id}\",\n *                \"defaults\"={\"id\"=null},\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *            \"update_groupe_id\"={\n *               \"method\"=\"PUT\",\n *               \"path\"=\"/admin/groupes/{id}\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *            \"delete_groupe_id_apprenants\"={\n *               \"method\"=\"DELETE\",\n *               \"path\"=\"/admin/groupes/{id}/apprenants\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *      },\n *       normalizationContext={\"groups\"={\"groupe:read\"}},\n *       denormalizationContext={\"groups\"={\"groupe:write\"}},\n *       attributes={\"pagination_enabled\"=true, \"pagination_items_per_page\"=10}\n * )\n * @ORM\\Entity(repositoryClass=GroupesRepository::class)\n */\nclass Groupes\n{\n    /**\n     * @ORM\\Id()\n     * @ORM\\GeneratedValue()\n     * @ORM\\Column(type=\"integer\")\n     * @Groups({\"groupe:read\"})\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=100)\n     * @Groups({\"groupe:read\",\"groupe:write\"})\n     */\n    private $nom;\n\n    /**\n     * @ORM\\Column(type=\"date\", nullable=true)\n     * @Groups({\"groupe:read\",\"groupe:write\"})\n     */\n    private $dateCreation;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=50, nullable=true)\n     * @Groups({\"groupe:read\",\"groupe:write\"})\n     */\n    private $statut;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=50, nullable=true)\n     * @Groups({\"groupe:read\",\"groupe:write\"})\n     */\n    private $type;\n\n    /**\n     * @ORM\\ManyToOne(targetEntity=Promotion::class, inversedBy=\"groupe\")\n     * @ApiSubresource\n     * @Groups({\"groupe:read\"})\n     */\n    private $promotions;\n\n    /**\n     * @ORM\\ManyToMany(targetEntity=Apprenant::class, inversedBy=\"groupe\")\n     * @ApiSubresource\n     * @Groups({\"groupe:read\"})\n     */\n    private $apprenants;\n\n    /**\n     * @ORM\\ManyToMany(targetEntity=Formateur::class, inversedBy=\"groupe\")\n     * @ApiSubresource\n     * @Groups({\"groupe:read\"})\n     */\n    private $formateurs;\n\n    public function __construct()\n    {\n        $this->apprenants = new ArrayCollection();\n        $this->formateurs = new ArrayCollection();\n    }\n\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    public function getNom(): ?string\n    {\n        return $this->nom;\n    }\n\n    public function setNom(string $nom): self\n    {\n        $this->nom = $nom;\n\n        return $this;\n    }\n\n    public function getDateCreation(): ?\\DateTimeInterface\n    {\n        return $this->dateCreation;\n    }\n\n    public function setDateCreation(?\\DateTimeInterface $dateCreation): self\n    {\n        $this->dateCreation = $dateCreation;\n\n        return $this;\n    }\n\n    public function getStatut(): ?string\n    {\n        return $this->statut;\n    }\n\n    public function setStatut(?string $statut): self\n    {\n        $this->statut = $statut;\n\n        return $this;\n    }\n\n    public function getType(): ?string\n    {\n        return $this->type;\n    }\n\n    public function setType(?string $type): self\n    {\n        $this->type = $type;\n\n        return $this;\n    }\n\n    public function getPromotions(): ?Promotion\n    {\n        return $this->promotions;\n    }\n\n    public function setPromotions(?Promotion $promotions): self\n    {\n        $this->promotions = $promotions;\n\n        return $this;\n    }\n\n    /**\n     * @return Collection|Apprenant[]\n     */\n    public function getApprenants(): Collection\n    {\n        return $this->apprenants;\n    }\n\n    public function addApprenant(Apprenant $apprenant): self\n    {\n        if (!$this->apprenants->contains($apprenant)) {\n            $this->apprenants[] = $apprenant;\n        }\n\n        return $this;\n    }\n\n    public function removeApprenant(Apprenant $apprenant): self\n    {\n        if ($this->apprenants->contains($apprenant)) {\n            $this->apprenants->removeElement($apprenant);\n        }\n\n        return $this;\n    }\n\n    /**\n     * @return Collection|Formateur[]\n     */\n    public function getFormateurs(): Collection\n    {\n        return $this->formateurs;\n    }\n\n    public function addFormateur(Formateur $formateur): self\n    {\n        if (!$this->formateurs->contains($formateur)) {\n            $this->formateurs[] = $formateur;\n        }\n\n        return $this;\n    }\n\n    public function removeFormateur(Formateur $formateur): self\n    {\n        if ($this->formateurs->contains($formateur)) {\n            $this->formateurs->removeElement($formateur);\n        }\n\n        return $this;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Entity/Groupes.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/Entity/Groupes.php	(date 1597277288000)
@@ -2,61 +2,18 @@
 
 namespace App\Entity;
 
-use ApiPlatform\Core\Annotation\ApiResource;
+use Doctrine\ORM\Mapping as ORM;
 use App\Repository\GroupesRepository;
-use Doctrine\Common\Collections\ArrayCollection;
+use Doctrine\Common\Collections\Collection;
+use ApiPlatform\Core\Annotation\ApiResource;
 use ApiPlatform\Core\Annotation\ApiSubresource;
-use Doctrine\Common\Collections\Collection;
+use Doctrine\Common\Collections\ArrayCollection;
 use Symfony\Component\Serializer\Annotation\Groups;
-use Doctrine\ORM\Mapping as ORM;
 
 /**
- * @ApiResource(
- *     collectionOperations={
- *           "get_groupe"={
- *               "method"="GET",
- *               "path"="/admin/groupes",
- *               "security"="is_granted('ROLE_ADMIN')",
- *               "security_message"="Acces non autorisé",
- *          },
-     *     "get_groupe_apprenants"={
-     *               "method"="GET",
-     *               "path"="/admin/groupes/apprenants",
-     *               "security"="is_granted('ROLE_ADMIN')",
-     *               "security_message"="Acces non autorisé",
-     *          },
- *            "add_groupe"={
- *               "method"="POST",
- *               "path"="/admin/groupes",
- *               "security"="is_granted('ROLE_ADMIN')",
- *               "security_message"="Acces non autorisé",
- *          }
- *      },
- *      itemOperations={
- *           "get_groupe_id"={
- *               "method"="GET",
- *               "path"="/admin/groupes/{id}",
- *                "defaults"={"id"=null},
- *                "security"="is_granted('ROLE_ADMIN')",
- *                  "security_message"="Acces non autorisé",
- *          },
- *            "update_groupe_id"={
- *               "method"="PUT",
- *               "path"="/admin/groupes/{id}",
- *                "security"="is_granted('ROLE_ADMIN')",
- *                  "security_message"="Acces non autorisé",
- *          },
- *            "delete_groupe_id_apprenants"={
- *               "method"="DELETE",
- *               "path"="/admin/groupes/{id}/apprenants",
- *                "security"="is_granted('ROLE_ADMIN')",
- *                  "security_message"="Acces non autorisé",
- *          },
- *      },
+ * @ApiResource(routePrefix="/admin",
  *       normalizationContext={"groups"={"groupe:read"}},
- *       denormalizationContext={"groups"={"groupe:write"}},
- *       attributes={"pagination_enabled"=true, "pagination_items_per_page"=10}
- * )
+ *       denormalizationContext={"groups"={"groupe:write"}})
  * @ORM\Entity(repositoryClass=GroupesRepository::class)
  */
 class Groupes
@@ -66,50 +23,52 @@
      * @ORM\GeneratedValue()
      * @ORM\Column(type="integer")
      * @Groups({"groupe:read"})
+     * @Groups({"promo:read"})
      */
     private $id;
 
     /**
      * @ORM\Column(type="string", length=100)
-     * @Groups({"groupe:read","groupe:write"})
+     * @Groups({"groupe:read", "groupe:write"})
+     * @Groups({"promo:read"})
      */
     private $nom;
 
     /**
      * @ORM\Column(type="date", nullable=true)
-     * @Groups({"groupe:read","groupe:write"})
+     * @Groups({"groupe:read", "groupe:write","promo:read"})
      */
     private $dateCreation;
 
     /**
      * @ORM\Column(type="string", length=50, nullable=true)
-     * @Groups({"groupe:read","groupe:write"})
+     * @Groups({"groupe:read", "groupe:write"})
+     * @Groups({"promo:read"})
      */
     private $statut;
 
     /**
      * @ORM\Column(type="string", length=50, nullable=true)
-     * @Groups({"groupe:read","groupe:write"})
+     * @Groups({"groupe:read", "groupe:write","promo:read"})
      */
     private $type;
 
     /**
-     * @ORM\ManyToOne(targetEntity=Promotion::class, inversedBy="groupe")
-     * @ApiSubresource
+     * @ORM\ManyToOne(targetEntity=Promotion::class, inversedBy="groupes")
+     */
+    private $promotion;
+
+    /**
+     * @ORM\ManyToMany(targetEntity=Apprenant::class, mappedBy="groupes")
+     * @ApiSubresource()
      * @Groups({"groupe:read"})
-     */
-    private $promotions;
-
-    /**
-     * @ORM\ManyToMany(targetEntity=Apprenant::class, inversedBy="groupe")
-     * @ApiSubresource
-     * @Groups({"groupe:read"})
+     * @Groups({"promo:read"})
      */
     private $apprenants;
 
     /**
-     * @ORM\ManyToMany(targetEntity=Formateur::class, inversedBy="groupe")
-     * @ApiSubresource
+     * @ORM\ManyToMany(targetEntity=Formateur::class, mappedBy="groupes")
+     * @ApiSubresource()
      * @Groups({"groupe:read"})
      */
     private $formateurs;
@@ -173,14 +132,14 @@
         return $this;
     }
 
-    public function getPromotions(): ?Promotion
+    public function getPromotion(): ?Promotion
     {
-        return $this->promotions;
+        return $this->promotion;
     }
 
-    public function setPromotions(?Promotion $promotions): self
+    public function setPromotion(?Promotion $promotion): self
     {
-        $this->promotions = $promotions;
+        $this->promotion = $promotion;
 
         return $this;
     }
@@ -197,6 +156,7 @@
     {
         if (!$this->apprenants->contains($apprenant)) {
             $this->apprenants[] = $apprenant;
+            $apprenant->addGroupe($this);
         }
 
         return $this;
@@ -206,6 +166,7 @@
     {
         if ($this->apprenants->contains($apprenant)) {
             $this->apprenants->removeElement($apprenant);
+            $apprenant->removeGroupe($this);
         }
 
         return $this;
@@ -223,6 +184,7 @@
     {
         if (!$this->formateurs->contains($formateur)) {
             $this->formateurs[] = $formateur;
+            $formateur->addGroupe($this);
         }
 
         return $this;
@@ -232,6 +194,7 @@
     {
         if ($this->formateurs->contains($formateur)) {
             $this->formateurs->removeElement($formateur);
+            $formateur->removeGroupe($this);
         }
 
         return $this;
Index: src/Entity/GroupeTag.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse App\\Repository\\GroupeTagRepository;\nuse Doctrine\\Common\\Collections\\Collection;\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse ApiPlatform\\Core\\Annotation\\ApiSubresource;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\n\n/**\n * @ApiResource(\n *      collectionOperations={\n *           \"get_grptags\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/admin/grptags\",\n *               \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN'))\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          },\n *            \"add_grptags\"={ \n *               \"method\"=\"POST\", \n *               \"path\"=\"/admin/grptags\",\n *               \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN'))\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          }\n *      },\n *      itemOperations={\n *           \"get_grptag_id\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/admin/grptags/{id}\",\n *                \"defaults\"={\"id\"=null},\n *                \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN') )\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *\n *            \"update_grptag_id\"={ \n *               \"method\"=\"PUT\", \n *               \"path\"=\"/admin/grptags/{id}\",\n *                \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN'))\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *      },\n *       normalizationContext={\"groups\"={\"grptag:read\"}},\n *       denormalizationContext={\"groups\"={\"grptag:write\"}},\n *       attributes={\"pagination_enabled\"=true, \"pagination_items_per_page\"=10}\n * )\n * @ORM\\Entity(repositoryClass=GroupeTagRepository::class)\n */\nclass GroupeTag\n{\n    /**\n     * @ORM\\Id()\n     * @ORM\\GeneratedValue()\n     * @ORM\\Column(type=\"integer\")\n     * @Groups({\"grptag:read\"})\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=100)\n     * @Groups({\"grptag:read\",\"grptag:write\"})\n     */\n    private $libelle;\n\n    /**\n     * @ORM\\ManyToMany(targetEntity=Tag::class, inversedBy=\"groupeTags\")\n     * @Groups({\"grptag:read\"})\n     * @ApiSubresource\n     */\n    private $tags;\n\n    public function __construct()\n    {\n        $this->tags = new ArrayCollection();\n    }\n\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    public function getLibelle(): ?string\n    {\n        return $this->libelle;\n    }\n\n    public function setLibelle(string $libelle): self\n    {\n        $this->libelle = $libelle;\n\n        return $this;\n    }\n\n    /**\n     * @return Collection|Tag[]\n     */\n    public function getTags(): Collection\n    {\n        return $this->tags;\n    }\n\n    public function addTag(Tag $tag): self\n    {\n        if (!$this->tags->contains($tag)) {\n            $this->tags[] = $tag;\n        }\n\n        return $this;\n    }\n\n    public function removeTag(Tag $tag): self\n    {\n        if ($this->tags->contains($tag)) {\n            $this->tags->removeElement($tag);\n        }\n\n        return $this;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Entity/GroupeTag.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/Entity/GroupeTag.php	(date 1597277288000)
@@ -16,14 +16,11 @@
  *           "get_grptags"={ 
  *               "method"="GET", 
  *               "path"="/admin/grptags",
- *               "security"="(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN'))",
  *               "security_message"="Acces non autorisé",
  *          },
  *            "add_grptags"={ 
  *               "method"="POST", 
  *               "path"="/admin/grptags",
- *               "security"="(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN'))",
- *               "security_message"="Acces non autorisé",
  *          }
  *      },
  *      itemOperations={
@@ -31,15 +28,11 @@
  *               "method"="GET", 
  *               "path"="/admin/grptags/{id}",
  *                "defaults"={"id"=null},
- *                "security"="(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN') )",
- *                  "security_message"="Acces non autorisé",
  *          },
  *
  *            "update_grptag_id"={ 
  *               "method"="PUT", 
  *               "path"="/admin/grptags/{id}",
- *                "security"="(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN'))",
- *                  "security_message"="Acces non autorisé",
  *          },
  *      },
  *       normalizationContext={"groups"={"grptag:read"}},
Index: PRF/.idea/workspace.xml
===================================================================
--- PRF/.idea/workspace.xml	(revision 8768312777851918de75823999ef4b225bed3810)
+++ PRF/.idea/workspace.xml	(revision 8768312777851918de75823999ef4b225bed3810)
@@ -1,146 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ChangeListManager">
-    <list default="true" id="1878fa68-69fb-4b44-be41-d6d6622f14b6" name="Default Changelist" comment="" />
-    <option name="SHOW_DIALOG" value="false" />
-    <option name="HIGHLIGHT_CONFLICTS" value="true" />
-    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
-    <option name="LAST_RESOLUTION" value="IGNORE" />
-  </component>
-  <component name="ComposerSettings" synchronizationState="SYNCHRONIZE">
-    <pharConfigPath>$PROJECT_DIR$/composer.json</pharConfigPath>
-    <execution />
-  </component>
-  <component name="Git.Settings">
-    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
-  </component>
-  <component name="PhpWorkspaceProjectConfiguration">
-    <include_path>
-      <path value="$PROJECT_DIR$/vendor/nelmio/cors-bundle" />
-      <path value="$PROJECT_DIR$/vendor/composer" />
-      <path value="$PROJECT_DIR$/vendor/ocramius/proxy-manager" />
-      <path value="$PROJECT_DIR$/vendor/monolog/monolog" />
-      <path value="$PROJECT_DIR$/vendor/ocramius/package-versions" />
-      <path value="$PROJECT_DIR$/vendor/fzaninotto/faker" />
-      <path value="$PROJECT_DIR$/vendor/webmozart/assert" />
-      <path value="$PROJECT_DIR$/vendor/vich/uploader-bundle" />
-      <path value="$PROJECT_DIR$/vendor/phpdocumentor/reflection-common" />
-      <path value="$PROJECT_DIR$/vendor/phpdocumentor/reflection-docblock" />
-      <path value="$PROJECT_DIR$/vendor/phpdocumentor/type-resolver" />
-      <path value="$PROJECT_DIR$/vendor/namshi/jose" />
-      <path value="$PROJECT_DIR$/vendor/twig/twig" />
-      <path value="$PROJECT_DIR$/vendor/lcobucci/jwt" />
-      <path value="$PROJECT_DIR$/vendor/symfony/deprecation-contracts" />
-      <path value="$PROJECT_DIR$/vendor/symfony/serializer" />
-      <path value="$PROJECT_DIR$/vendor/symfony/translation-contracts" />
-      <path value="$PROJECT_DIR$/vendor/symfony/flex" />
-      <path value="$PROJECT_DIR$/vendor/symfony/property-access" />
-      <path value="$PROJECT_DIR$/vendor/symfony/http-kernel" />
-      <path value="$PROJECT_DIR$/vendor/symfony/monolog-bridge" />
-      <path value="$PROJECT_DIR$/vendor/symfony/stopwatch" />
-      <path value="$PROJECT_DIR$/vendor/symfony/validator" />
-      <path value="$PROJECT_DIR$/vendor/symfony/maker-bundle" />
-      <path value="$PROJECT_DIR$/vendor/symfony/polyfill-mbstring" />
-      <path value="$PROJECT_DIR$/vendor/symfony/filesystem" />
-      <path value="$PROJECT_DIR$/vendor/symfony/console" />
-      <path value="$PROJECT_DIR$/vendor/symfony/event-dispatcher-contracts" />
-      <path value="$PROJECT_DIR$/vendor/symfony/polyfill-php73" />
-      <path value="$PROJECT_DIR$/vendor/symfony/security-core" />
-      <path value="$PROJECT_DIR$/vendor/symfony/web-link" />
-      <path value="$PROJECT_DIR$/vendor/symfony/property-info" />
-      <path value="$PROJECT_DIR$/vendor/symfony/cache-contracts" />
-      <path value="$PROJECT_DIR$/vendor/lexik/jwt-authentication-bundle" />
-      <path value="$PROJECT_DIR$/vendor/symfony/security-bundle" />
-      <path value="$PROJECT_DIR$/vendor/symfony/string" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/persistence" />
-      <path value="$PROJECT_DIR$/vendor/symfony/polyfill-intl-icu" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/common" />
-      <path value="$PROJECT_DIR$/vendor/symfony/security-guard" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/data-fixtures" />
-      <path value="$PROJECT_DIR$/vendor/symfony/polyfill-intl-grapheme" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/doctrine-fixtures-bundle" />
-      <path value="$PROJECT_DIR$/vendor/symfony/options-resolver" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/instantiator" />
-      <path value="$PROJECT_DIR$/vendor/symfony/http-foundation" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/annotations" />
-      <path value="$PROJECT_DIR$/vendor/symfony/dotenv" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/collections" />
-      <path value="$PROJECT_DIR$/vendor/symfony/monolog-bundle" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/reflection" />
-      <path value="$PROJECT_DIR$/vendor/symfony/framework-bundle" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/doctrine-bundle" />
-      <path value="$PROJECT_DIR$/vendor/symfony/finder" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/doctrine-migrations-bundle" />
-      <path value="$PROJECT_DIR$/vendor/symfony/twig-bridge" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/lexer" />
-      <path value="$PROJECT_DIR$/vendor/symfony/twig-bundle" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/event-manager" />
-      <path value="$PROJECT_DIR$/vendor/symfony/dependency-injection" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/inflector" />
-      <path value="$PROJECT_DIR$/vendor/symfony/asset" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/cache" />
-      <path value="$PROJECT_DIR$/vendor/symfony/polyfill-php80" />
-      <path value="$PROJECT_DIR$/vendor/symfony/service-contracts" />
-      <path value="$PROJECT_DIR$/vendor/psr/log" />
-      <path value="$PROJECT_DIR$/vendor/symfony/error-handler" />
-      <path value="$PROJECT_DIR$/vendor/psr/cache" />
-      <path value="$PROJECT_DIR$/vendor/symfony/config" />
-      <path value="$PROJECT_DIR$/vendor/psr/container" />
-      <path value="$PROJECT_DIR$/vendor/symfony/doctrine-bridge" />
-      <path value="$PROJECT_DIR$/vendor/psr/event-dispatcher" />
-      <path value="$PROJECT_DIR$/vendor/symfony/polyfill-intl-idn" />
-      <path value="$PROJECT_DIR$/vendor/symfony/mime" />
-      <path value="$PROJECT_DIR$/vendor/psr/link" />
-      <path value="$PROJECT_DIR$/vendor/symfony/expression-language" />
-      <path value="$PROJECT_DIR$/vendor/symfony/cache" />
-      <path value="$PROJECT_DIR$/vendor/symfony/polyfill-intl-normalizer" />
-      <path value="$PROJECT_DIR$/vendor/symfony/routing" />
-      <path value="$PROJECT_DIR$/vendor/symfony/event-dispatcher" />
-      <path value="$PROJECT_DIR$/vendor/symfony/security-csrf" />
-      <path value="$PROJECT_DIR$/vendor/symfony/security-http" />
-      <path value="$PROJECT_DIR$/vendor/symfony/form" />
-      <path value="$PROJECT_DIR$/vendor/symfony/var-exporter" />
-      <path value="$PROJECT_DIR$/vendor/symfony/intl" />
-      <path value="$PROJECT_DIR$/vendor/api-platform/core" />
-      <path value="$PROJECT_DIR$/vendor/laminas/laminas-code" />
-      <path value="$PROJECT_DIR$/vendor/laminas/laminas-zendframework-bridge" />
-      <path value="$PROJECT_DIR$/vendor/laminas/laminas-eventmanager" />
-      <path value="$PROJECT_DIR$/vendor/jms/metadata" />
-      <path value="$PROJECT_DIR$/vendor/fig/link-util" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/migrations" />
-      <path value="$PROJECT_DIR$/vendor/symfony/var-dumper" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/sql-formatter" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/dbal" />
-      <path value="$PROJECT_DIR$/vendor/willdurand/negotiation" />
-      <path value="$PROJECT_DIR$/vendor/symfony/yaml" />
-      <path value="$PROJECT_DIR$/vendor/nikic/php-parser" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/orm" />
-      <path value="$PROJECT_DIR$/vendor/webimpress/safe-writer" />
-    </include_path>
-  </component>
-  <component name="ProjectId" id="1g1XP823e3NkQMObdV8Gw3vOlYH" />
-  <component name="ProjectViewState">
-    <option name="hideEmptyMiddlePackages" value="true" />
-    <option name="showLibraryContents" value="true" />
-  </component>
-  <component name="PropertiesComponent">
-    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
-    <property name="WebServerToolWindowFactoryState" value="false" />
-    <property name="nodejs_package_manager_path" value="npm" />
-  </component>
-  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
-  <component name="TaskManager">
-    <task active="true" id="Default" summary="Default task">
-      <changelist id="1878fa68-69fb-4b44-be41-d6d6622f14b6" name="Default Changelist" comment="" />
-      <created>1597283047130</created>
-      <option name="number" value="Default" />
-      <option name="presentableId" value="Default" />
-      <updated>1597283047130</updated>
-      <workItem from="1597283050278" duration="1059000" />
-    </task>
-    <servers />
-  </component>
-  <component name="TypeScriptGeneratedFilesManager">
-    <option name="version" value="3" />
-  </component>
-</project>
\ No newline at end of file
Index: src/Repository/UserRepository.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\User;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Symfony\\Component\\Security\\Core\\Exception\\UnsupportedUserException;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordUpgraderInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n\n/**\n * @method User|null find($id, $lockMode = null, $lockVersion = null)\n * @method User|null findOneBy(array $criteria, array $orderBy = null)\n * @method User[]    findAll()\n * @method User[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n */\nclass UserRepository extends ServiceEntityRepository implements PasswordUpgraderInterface\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, User::class);\n    }\n\n    /**\n     * Used to upgrade (rehash) the user's password automatically over time.\n     */\n    public function upgradePassword(UserInterface $user, string $newEncodedPassword): void\n    {\n        if (!$user instanceof User) {\n            throw new UnsupportedUserException(sprintf('Instances of \"%s\" are not supported.', \\get_class($user)));\n        }\n\n        $user->setPassword($newEncodedPassword);\n        $this->_em->persist($user);\n        $this->_em->flush();\n    }\n\n    /**\n     * @return User[] Returns an array of User objects\n     */\n    public function findByArchivage($value)\n    {\n        return $this->createQueryBuilder('u')\n            ->andWhere('u.archivage = :val')\n            ->setParameter('val', $value)\n            ->orderBy('u.id', 'ASC')\n            ->setMaxResults(10)\n            ->getQuery()\n            ->getResult()\n        ;\n    }\n    \n\n    /*\n    public function findOneBySomeField($value): ?User\n    {\n        return $this->createQueryBuilder('u')\n            ->andWhere('u.exampleField = :val')\n            ->setParameter('val', $value)\n            ->getQuery()\n            ->getOneOrNullResult()\n        ;\n    }\n    */\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Repository/UserRepository.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/Repository/UserRepository.php	(date 1597277288000)
@@ -39,13 +39,14 @@
     /**
      * @return User[] Returns an array of User objects
      */
-    public function findByArchivage($value)
+    public function findByArchivage($value,$limit,$offset)
     {
         return $this->createQueryBuilder('u')
             ->andWhere('u.archivage = :val')
             ->setParameter('val', $value)
             ->orderBy('u.id', 'ASC')
-            ->setMaxResults(10)
+            ->setMaxResults($limit)
+            ->setFirstResult($offset)
             ->getQuery()
             ->getResult()
         ;
Index: src/Entity/CommunityManager.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Entity/CommunityManager.php	(date 1597277288000)
+++ src/Entity/CommunityManager.php	(date 1597277288000)
@@ -0,0 +1,41 @@
+<?php
+
+namespace App\Entity;
+
+use App\Entity\User;
+use Doctrine\ORM\Mapping as ORM;
+use ApiPlatform\Core\Annotation\ApiResource;
+use App\Repository\CommunityManagerRepository;
+use Doctrine\Common\Collections\Collection;
+use Doctrine\Common\Collections\ArrayCollection;
+use Symfony\Component\Serializer\Annotation\Groups;
+
+/**
+ * @ApiResource(
+ *      itemOperations={
+ *           "get_cm_id"={ 
+ *               "method"="GET", 
+ *               "path"="/cm/{id}",
+ *                "defaults"={"id"=null},
+ *              }
+ *          },
+ *       normalizationContext={"groups"={"user:read","cm:read"}},
+ *       denormalizationContext={"groups"={"user:write","cm:write"}},
+ * )
+ * @ORM\Entity(repositoryClass=CommunityManagerRepository::class)
+ */
+class CommunityManager extends User
+{
+    /**
+     * @ORM\Id()
+     * @ORM\GeneratedValue()
+     * @ORM\Column(type="integer")
+     * @Groups({"cm:read"})
+     */
+    private $id;
+
+    public function getId(): ?int
+    {
+        return $this->id;
+    }
+}
Index: src/Repository/GroupeCompetenceRepository.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\GroupeCompetence;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\n/**\n * @method GroupeCompetence|null find($id, $lockMode = null, $lockVersion = null)\n * @method GroupeCompetence|null findOneBy(array $criteria, array $orderBy = null)\n * @method GroupeCompetence[]    findAll()\n * @method GroupeCompetence[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n */\nclass GroupeCompetenceRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, GroupeCompetence::class);\n    }\n\n    // /**\n    //  * @return GroupeCompetence[] Returns an array of GroupeCompetence objects\n    //  */\n    /*\n    public function findByExampleField($value)\n    {\n        return $this->createQueryBuilder('g')\n            ->andWhere('g.exampleField = :val')\n            ->setParameter('val', $value)\n            ->orderBy('g.id', 'ASC')\n            ->setMaxResults(10)\n            ->getQuery()\n            ->getResult()\n        ;\n    }\n    */\n\n    /*\n    public function findOneBySomeField($value): ?GroupeCompetence\n    {\n        return $this->createQueryBuilder('g')\n            ->andWhere('g.exampleField = :val')\n            ->setParameter('val', $value)\n            ->getQuery()\n            ->getOneOrNullResult()\n        ;\n    }\n    */\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Repository/GroupeCompetenceRepository.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/Repository/GroupeCompetenceRepository.php	(date 1597277288000)
@@ -19,22 +19,24 @@
         parent::__construct($registry, GroupeCompetence::class);
     }
 
-    // /**
-    //  * @return GroupeCompetence[] Returns an array of GroupeCompetence objects
-    //  */
-    /*
-    public function findByExampleField($value)
+    /**
+     * @return GroupeCompetence[] Returns an array of GroupeCompetence objects
+     */
+    
+    public function findByArchivage($value,$limit,$offset)
     {
         return $this->createQueryBuilder('g')
-            ->andWhere('g.exampleField = :val')
+            ->andWhere('g.archivage = :val')
             ->setParameter('val', $value)
             ->orderBy('g.id', 'ASC')
-            ->setMaxResults(10)
+            ->setMaxResults($limit)
+            ->setFirstResult($offset)
             ->getQuery()
             ->getResult()
         ;
     }
-    */
+    
+    
 
     /*
     public function findOneBySomeField($value): ?GroupeCompetence
Index: src/Controller/GroupeController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Controller/GroupeController.php	(date 1597277288000)
+++ src/Controller/GroupeController.php	(date 1597277288000)
@@ -0,0 +1,153 @@
+<?php
+
+namespace App\Controller;
+
+use App\Entity\User;
+use App\Entity\ProfilSortie;
+use Doctrine\ORM\EntityManager;
+use App\Repository\UserRepository;
+use App\Repository\GroupesRepository;
+use App\Repository\ApprenantRepository;
+use Doctrine\ORM\EntityManagerInterface;
+use App\Repository\ProfilSortieRepository;
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpFoundation\Response;
+use Symfony\Component\Routing\Annotation\Route;
+use Symfony\Component\HttpFoundation\JsonResponse;
+use Symfony\Component\Serializer\SerializerInterface;
+use Symfony\Component\Validator\Validator\ValidatorInterface;
+use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
+use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
+
+class GroupeController extends AbstractController
+{
+    private $serializer;
+    private $validator;
+    private $em;
+    private $groupeRepo;
+    private $apprenantRepo;
+
+    public function __construct(
+        GroupesRepository $groupeRepo,
+        ApprenantRepository $apprenantRepo,
+        SerializerInterface $serializer,
+        ValidatorInterface $validator,
+        EntityManagerInterface $em)
+    {
+        $this->serializer=$serializer;
+        $this->validator=$validator;
+        $this->em=$em;
+        $this->groupeRepo=$groupeRepo;
+        $this->apprenantRepo=$apprenantRepo;
+    }
+
+
+    /**
+     * @Route(
+     *     name="getGroupeApprenant",
+     *     path="api/admin/groupes/apprenants",
+     *     methods={"GET"},
+     *     defaults={
+     *          "__controller"="App\Controller\GroupesController::getGroupeApprenant",
+     *          "__api_resource_class"=Groupes::class,
+     *          "__api_collection_operation_name"="get_appreanant_groupe"
+     *     }
+     * )
+     */
+    public function getGroupeApprenant()
+    {
+        $groupes=$this->groupeRepo->findAll();
+
+        $appreanant=[];
+            foreach($groupes as $groupe)
+            {
+                    $apprenant_details['groupe']="groupe ".$groupe->getID();
+                    $apprenant_details['apprenants']=[];
+                    foreach($groupe->getApprenants() as $apprenant)
+                    {
+                        $apprenant_details['apprenants'][]=$apprenant->getFisrtName()." ".$apprenant->getLastName();
+                    }
+                    $appreanant[]=$apprenant_details;
+            }
+
+        return $this->json($appreanant,201);
+    }
+
+    /**
+     * @Route(
+     *     name="putGroupeApprenants",
+     *     path="api/admin/groupes/{id}",
+     *     methods={"PUT"},
+     *     defaults={
+     *          "__controller"="App\Controller\GroupesController::putGroupeApprenant",
+     *          "__api_resource_class"=Groupes::class,
+     *          "__api_collection_operation_name"="put_appreanant_groupe"
+     *     }
+     * )
+     */
+    public function putGroupeApprenant(Request $request,$id)
+    { 
+        $idApprenant=json_decode($request->getContent(),true);
+
+        $objetApprenant=$this->apprenantRepo->find($idApprenant);
+
+        if($objetApprenant)
+        {
+            $objtGroupe=$this->groupeRepo->find($id);
+            if($objtGroupe)
+            {
+                if($objtGroupe->getType()!=='groupe principale')
+                {
+                    $objtGroupe->addApprenant($objetApprenant);
+
+                    $this->em->persist($objtGroupe);
+                    $this->em->flush();
+
+                    return $this->json("success",201);
+                }
+                return $this->json("changement de promo/ groupe principale impossibles",201);
+            }
+            return $this->json("ce groupe n'existe pas",401);
+        }
+
+        return $this->json("cet apprenant n'existe pas",401);
+    }
+
+
+    /**
+     * @Route(
+     *     name="deleteGroupeApprenants",
+     *     path="api/admin/groupes/{id}/{idApprenant}",
+     *     methods={"DELETE"},
+     *     defaults={
+     *          "__controller"="App\Controller\GroupesController::deleteGroupeApprenant",
+     *          "__api_resource_class"=Groupes::class,
+     *          "__api_collection_operation_name"="delete_appreanant_groupe"
+     *     }
+     * )
+     */
+    public function deleteGroupeApprenant($id, $idApprenant)
+    { 
+
+        $objetApprenant=$this->apprenantRepo->find($idApprenant);
+
+        if($objetApprenant)
+        {
+            
+            $objtGroupe=$this->groupeRepo->find($id);
+            if($objtGroupe)
+            {
+                    $objtGroupe->removeApprenant($objetApprenant);
+
+                    $this->em->persist($objtGroupe);
+                    $this->em->flush();
+
+                    return $this->json("supprimer avec succes!",201);
+            }
+            return $this->json("ce groupe n'existe pas",401);
+        }
+            
+        return $this->json("cet apprenant n'existe pas",401);
+    }
+
+}
Index: src/Repository/ProfilSortieRepository.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\ProfilSortie;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\n/**\n * @method ProfilSortie|null find($id, $lockMode = null, $lockVersion = null)\n * @method ProfilSortie|null findOneBy(array $criteria, array $orderBy = null)\n * @method ProfilSortie[]    findAll()\n * @method ProfilSortie[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n */\nclass ProfilSortieRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, ProfilSortie::class);\n    }\n\n    /**\n     * @return ProfilSortie[] Returns an array of ProfilSortie objects\n     */\n    \n    public function findByArchivage($value)\n    {\n        return $this->createQueryBuilder('p')\n            ->andWhere('p.archivage = :val')\n            ->setParameter('val', $value)\n            ->orderBy('p.id', 'ASC')\n            ->setMaxResults(10)\n            ->getQuery()\n            ->getResult()\n        ;\n    }\n    \n\n    /*\n    public function findOneBySomeField($value): ?ProfilSortie\n    {\n        return $this->createQueryBuilder('p')\n            ->andWhere('p.exampleField = :val')\n            ->setParameter('val', $value)\n            ->getQuery()\n            ->getOneOrNullResult()\n        ;\n    }\n    */\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Repository/ProfilSortieRepository.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/Repository/ProfilSortieRepository.php	(date 1597277288000)
@@ -23,13 +23,14 @@
      * @return ProfilSortie[] Returns an array of ProfilSortie objects
      */
     
-    public function findByArchivage($value)
+    public function findByArchivage($value,$limit,$offset)
     {
         return $this->createQueryBuilder('p')
             ->andWhere('p.archivage = :val')
             ->setParameter('val', $value)
             ->orderBy('p.id', 'ASC')
-            ->setMaxResults(10)
+            ->setMaxResults($limit)
+            ->setFirstResult($offset)
             ->getQuery()
             ->getResult()
         ;
Index: src/Controller/TestController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Controller/TestController.php	(date 1597277288000)
+++ src/Controller/TestController.php	(date 1597277288000)
@@ -0,0 +1,85 @@
+<?php
+
+namespace App\Controller;
+
+use DateTime;
+use App\Entity\User;
+use App\Entity\Groupes;
+use App\Entity\Apprenant;
+use App\Entity\Formateur;
+use App\Entity\Promotion;
+use Doctrine\ORM\EntityManager;
+use App\Repository\UserRepository;
+use App\Repository\GroupesRepository;
+use App\Repository\PromotionRepository;
+use PhpOffice\PhpSpreadsheet\IOFactory;
+use Doctrine\ORM\EntityManagerInterface;
+use Symfony\Component\HttpFoundation\Request;
+use ContainerTqjcrpd\getUserRepositoryService;
+use Symfony\Component\HttpFoundation\Response;
+use Symfony\Component\Routing\Annotation\Route;
+use Symfony\Component\HttpFoundation\JsonResponse;
+use Symfony\Component\Serializer\SerializerInterface;
+use Symfony\Component\Validator\Validator\ValidatorInterface;
+use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
+use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
+
+class TestController extends AbstractController
+{
+
+
+    private $serializer;
+    private $validator;
+    private $em;
+    private $repo;
+    private $repoGroupe;
+
+    public function __construct(
+        PromotionRepository $repo,
+        GroupesRepository $repoGroupe,
+        SerializerInterface $serializer,
+        ValidatorInterface $validator,
+        EntityManagerInterface $em,
+        UserPasswordEncoderInterface $encoder
+)
+    {
+        $this->repo=$repo;
+        $this->serializer=$serializer;
+        $this->validator=$validator;
+        $this->repoGroupe=$repoGroupe;
+        $this->em=$em;
+        $this->encoder=$encoder;
+    }
+    /**
+     * @Route(
+     *     name="get_test",
+     *     path="/api/test",
+     *     methods={"POST"},
+     *     defaults={
+     *          "__controller"="App\Controller\PromotionController::addtest",
+     *          "__api_resource_class"=Promotion::class,
+     *          "__api_collection_operation_name"="addtes"
+     *     }
+     * )
+     */
+    public function addtest(Request $request)
+    {
+
+        $doc = $request->files->get("document");
+
+        $file= IOFactory::identify($doc);
+        
+        $reader= IOFactory::createReader($file);
+
+        $spreadsheet=$reader->load($doc);
+        
+        $content= $spreadsheet->getActivesheet()->toArray();
+        
+        return $this->json($content,201);
+    }
+
+
+
+
+}
+
Index: src/Controller/ProfilController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Controller/ProfilController.php	(date 1597277288000)
+++ src/Controller/ProfilController.php	(date 1597277288000)
@@ -0,0 +1,143 @@
+<?php
+
+namespace App\Controller;
+
+use App\Entity\Profil;
+use App\Repository\UserRepository;
+use App\Repository\ProfilRepository;
+use Doctrine\ORM\EntityManagerInterface;
+use App\Repository\ProfilSortieRepository;
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpFoundation\Response;
+use Symfony\Component\Routing\Annotation\Route;
+use Symfony\Component\HttpFoundation\JsonResponse;
+use Symfony\Component\Serializer\SerializerInterface;
+use Symfony\Component\Validator\Validator\ValidatorInterface;
+use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
+
+class ProfilController extends AbstractController
+{
+    private $serializer;
+    private $validator;
+    private $em;
+    private $repoProfil;
+
+    public function __construct(
+        ProfilRepository $repoProfil,
+        SerializerInterface $serializer,
+        ValidatorInterface $validator,
+        EntityManagerInterface $em)
+    {
+        $this->serializer=$serializer;
+        $this->validator=$validator;
+        $this->em=$em;
+        $this->repoProfil=$repoProfil;
+    }
+
+
+    /**
+     * @Route(
+     *     name="getG_profils",
+     *     path="api/admin/profils",
+     *     methods={"GET"},
+     *     defaults={
+     *          "__controller"="App\Controller\ProfilController::getProfil",
+     *          "__api_resource_class"=Profil::class,
+     *          "__api_collection_operation_name"="get_appreanant_groupe"
+     *     }
+     * )
+     */
+    public function getProfil()
+    {
+        $profils=$this->repoProfil->findByArchivage(0);
+        
+        $returnProfils=[];
+        foreach($profils as $pfl)
+        {
+           $arr=["id"=>$pfl->getID(),"libelle"=>$pfl->getLibelle(), "abbr"=>$pfl->getAbbr()];
+            $returnProfils[]=$arr;
+        }
+
+        
+        return $this->json($returnProfils,201);
+    }
+
+
+
+    /**
+     * @Route(
+     *     name="archive_profils",
+     *     path="api/admin/profils/{id}",
+     *     methods={"DELETE"},
+     *     defaults={
+     *          "__controller"="App\Controller\ProfilController::archiveProfilWithUsers",
+     *          "__api_resource_class"=Profil::class,
+     *          "__api_collection_operation_name"="delete_profil"
+     *     }
+     * )
+     */
+    public function archiveProfilWithUsers(UserRepository $userRepository,int $id)
+    {
+        
+        $profil = $this->em->getRepository(profil::class)->find($id);
+        if($profil!==null )
+        {
+            if($profil->getArchivage()!==true)
+            {
+                $profil->setArchivage(true);
+            
+                $users=$userRepository->findByProfil($id);
+                foreach($users as $user){
+
+                        $user->setArchivage(true);
+                        $this->em->persist($user);
+                        $this->em->flush();
+                }
+                return $this->json("success",201);
+            }
+            return $this->json("profil déja archivé!",401);
+        }
+        return $this->json("profiln'existe pas!",401);
+        
+    }
+
+
+
+     /**
+     * @Route(
+     *     name="get_UsersByProfil",
+     *     path="api/admin/profils/{id}/users",
+     *     methods={"GET"},
+     *     defaults={
+     *          "__controller"="App\Controller\ProfilController::getUsersByProfil",
+     *          "__api_resource_class"=Profil::class,
+     *          "__api_collection_operation_name"="get_getUsersByProfil"
+     *     }
+     * )
+     */
+    public function getUsersByProfil(UserRepository $userRepository,int $id, Request $request)
+    {
+        $page = (int) $request->query->get('page', 1);
+        $nbreElementPage=3;
+        $offset=($page-1)*$nbreElementPage;
+        $limit=$offset+$nbreElementPage;
+        $profil = $this->em->getRepository(profil::class)->find($id);
+        if($profil!==null )
+        {
+            if($profil->getArchivage()!==true)
+            {
+                    $users=$profil->getUsers();
+                    $tabUsers=[];
+                    for($i=$offset;$i<$limit;$i++)
+                    {
+                        $tabUsers[]=$users[$i];
+                    }
+                
+                return $this->json($tabUsers,201);
+            }
+            return $this->json("profil déja archivé!",401);
+        }
+        return $this->json("profiln'existe pas!",401);
+        
+    }
+}
Index: src/Controller/ReferentielController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Controller/ReferentielController.php	(date 1597277288000)
+++ src/Controller/ReferentielController.php	(date 1597277288000)
@@ -0,0 +1,39 @@
+<?php
+
+namespace App\Controller;
+
+use App\Entity\Referentiel;
+use Doctrine\ORM\EntityManagerInterface;
+use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\Routing\Annotation\Route;
+
+class ReferentielController extends AbstractController
+{
+    /**
+     * @Route(
+     *     name="get_grpcompetence_competence",
+     *     path="/api/admin/referentiels/grpecompetences",
+     *     methods={"GET"},
+     *     defaults={
+     *          "__controller"="App\Controller\ReferentielController::getReferentielGroupeCompetence",
+     *          "__api_resource_class"=Referentiel::class,
+     *          "__api_collection_operation_name"="get_referentiels_grpCompetence"
+     *     }
+     * )
+     */
+    public function getReferentielGroupeCompetence(Request $request,EntityManagerInterface $entityManager)
+    {
+            $tab=[];
+            $tableau = $entityManager->getRepository(Referentiel::class)->findAll();
+
+            $competence= $tableau[0]->getGrpCompetences()[0]->getCompetences()[0]->getLibelle();
+        $cou=$groupCompetence=$tableau[0]->getGrpCompetences()[0]->getLidelle();
+
+        for ($i=0;$i<count($tableau);$i++){
+
+            $tab[]=$tableau[$i]->getGrpCompetences()[0];
+        }
+        return dd($tab);
+        }
+}
Index: src/Repository/ProfilRepository.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Profil;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\n/**\n * @method Profil|null find($id, $lockMode = null, $lockVersion = null)\n * @method Profil|null findOneBy(array $criteria, array $orderBy = null)\n * @method Profil[]    findAll()\n * @method Profil[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n */\nclass ProfilRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Profil::class);\n    }\n\n    // /**\n    //  * @return Profil[] Returns an array of Profil objects\n    //  */\n    /*\n    public function findByExampleField($value)\n    {\n        return $this->createQueryBuilder('p')\n            ->andWhere('p.exampleField = :val')\n            ->setParameter('val', $value)\n            ->orderBy('p.id', 'ASC')\n            ->setMaxResults(10)\n            ->getQuery()\n            ->getResult()\n        ;\n    }\n    */\n\n    /*\n    public function findOneBySomeField($value): ?Profil\n    {\n        return $this->createQueryBuilder('p')\n            ->andWhere('p.exampleField = :val')\n            ->setParameter('val', $value)\n            ->getQuery()\n            ->getOneOrNullResult()\n        ;\n    }\n    */\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Repository/ProfilRepository.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/Repository/ProfilRepository.php	(date 1597277288000)
@@ -19,14 +19,14 @@
         parent::__construct($registry, Profil::class);
     }
 
-    // /**
-    //  * @return Profil[] Returns an array of Profil objects
-    //  */
-    /*
-    public function findByExampleField($value)
+    /**
+     * @return Profil[] Returns an array of Profil objects
+     */
+    
+    public function findByArchivage($value)
     {
         return $this->createQueryBuilder('p')
-            ->andWhere('p.exampleField = :val')
+            ->andWhere('p.archivage = :val')
             ->setParameter('val', $value)
             ->orderBy('p.id', 'ASC')
             ->setMaxResults(10)
@@ -34,7 +34,7 @@
             ->getResult()
         ;
     }
-    */
+    
 
     /*
     public function findOneBySomeField($value): ?Profil
Index: src/Controller/GroupeCompetenceController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Controller/GroupeCompetenceController.php	(date 1597277288000)
+++ src/Controller/GroupeCompetenceController.php	(date 1597277288000)
@@ -0,0 +1,209 @@
+<?php
+
+namespace App\Controller;
+
+use App\Entity\GroupeCompetence;
+use Doctrine\ORM\EntityManagerInterface;
+use Symfony\Component\HttpFoundation\Request;
+use App\Repository\GroupeCompetenceRepository;
+use Symfony\Component\HttpFoundation\Response;
+use Symfony\Component\Routing\Annotation\Route;
+use Symfony\Component\HttpFoundation\JsonResponse;
+use Symfony\Component\Serializer\SerializerInterface;
+use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
+
+class GroupeCompetenceController extends AbstractController
+{
+    private $serializer;
+    private $em;
+    private $repoGC;
+    public function __construct(
+        SerializerInterface $serializer,
+        GroupeCompetenceRepository $repoGC,
+        EntityManagerInterface $em)
+    {
+        $this->repoGC=$repoGC;
+        $this->serializer=$serializer;
+        $this->em=$em;
+    }
+    /**
+     * @Route(
+     *     name="get_all",
+     *     path="/api/admin/grpecompetences",
+     *     methods={"GET"},
+     *     defaults={
+     *          "__controller"="App\Controller\GroupeCompetenceController::getAllGpre",
+     *          "__api_resource_class"=GroupeCompetence::class,
+     *          "__api_collection_operation_name"="get_all_grpe"
+     *     }
+     * )
+     */
+    public function getAllGpre(Request $request)
+    {
+        $page = (int) $request->query->get('page', 1);
+        $limit=10;
+        $offset=($page-1)*$limit;
+
+        $allgroup = $this->repoGC->findByArchivage(0,$limit,$offset); 
+         $tab_all=[];
+
+         foreach($allgroup as $all)
+         {
+             $tab_all_gc['id']=$all->getID();
+             $tab_all_gc["libelle"]=$all->getLibelle();
+             $tab_all_gc["description"]=$all->getDescription();
+
+
+             $tab_all_gc['competences']=[];
+             foreach($all->getCompetences() as $comp)
+             {
+                $tab_all_gc['competences'][]=$comp;
+             }
+
+             $tab_all[]=$tab_all_gc;
+         }
+
+
+        return $this->json($tab_all,201);
+     }
+
+
+    /**
+     * @Route(
+     *     name="get_gc",
+     *     path="/api/admin/grpecompetences/competences",
+     *     methods={"GET"},
+     *     defaults={
+     *          "__controller"="App\Controller\GroupeCompetenceController::getGpreComp",
+     *          "__api_resource_class"=GroupeCompetence::class,
+     *          "__api_collection_operation_name"="get_grpe_c"
+     *     }
+     * )
+     */
+    public function getGpreComp(Request $request)
+    {
+
+        $tab=[];
+        $page = (int) $request->query->get('page', 1);
+        $limit=10;
+        $offset=($page-1)*$limit;
+
+        
+         $tableau = $this->em->getRepository(GroupeCompetence::class)->findByArchivage(0,$limit,$offset);
+
+         for($i=0;$i<count($tableau);$i++){
+                $tab_pivot['groupeComptence']=$tableau[$i]->getLibelle();
+                $tab_pivot['comptences']=[];
+             for($a=0;$a<count($tableau[$i]->getCompetences());$a++){
+
+                $tab_pivot['comptences'][]=  $tableau[$i]->getCompetences()[$a]->getLibelle();
+             }
+
+             $tab[]=$tab_pivot;
+
+         }
+        return $this->json($tab,200);
+     }
+
+
+     /**
+      * @Route(
+      *     name="delete_gc_id",
+      *     path="/api/admin/grpecompetences/{id}",
+      *     methods={"DELETE"},
+      *     defaults={
+      *          "__controller"="App\Controller\GroupeCompetenceController::deleteGpreidComp",
+      *          "__api_resource_class"=GroupeCompetence::class,
+      *          "__api_collection_operation_name"="delete_id_grpe_c"
+      *     }
+      * )
+      */
+      public function deleteGpreidComp($id)
+      {
+          $grc=$this->repoGC->find($id);
+          if($grc || !$grc->getArchivage())
+          {
+                 $grc->setArchivage(true);
+                 $this->em->persist($grc);
+                 $this->em->flush();
+
+                 return$this->json('success',201);
+          }
+          return $this->json("ce groupe de compétence n'existe pas ou a été archivé!",401);
+       }
+ 
+
+
+     /**
+      * @Route(
+      *     name="get_gc_id",
+      *     path="/api/admin/grpecompetences/{id}/competences",
+      *     methods={"GET"},
+      *     defaults={
+      *          "__controller"="App\Controller\GroupeCompetenceController::getGpreidComp",
+      *          "__api_resource_class"=GroupeCompetence::class,
+      *          "__api_collection_operation_name"="get_id_grpe_c"
+      *     }
+      * )
+      */
+      public function getGpreidComp($id)
+      {
+        $grc=$this->repoGC->find($id);
+        $tab=[];
+        if($grc || !$grc->getArchivage())
+        {
+                 $tab["groupecompetence"]=$grc->getLibelle();
+                 $tab["competences"]=[];
+                foreach( $grc->getCompetences() as $comp)
+                {
+                    $tab["competences"][]=$comp;
+                }
+               return$this->json($tab,201);
+        }
+        return $this->json("ce groupe de compétence n'existe pas ou a été archivé!",401);
+       }
+ 
+
+    /**
+     * @Route(
+     *     name="add_competence",
+     *     path="/api/admin/grpecompetences/{id}",
+     *     methods={"PUT"},
+     *     defaults={
+     *          "__controller"="App\Controller\GroupeCompetenceController::add",
+     *          "__api_resource_class"=GroupeCompetence::class,
+     *          "__api_item_operation_name"="addCompetenceGrpupeCompetence"
+     *     }
+     * )
+     */
+    public  function addCompetenceGrpupeCompetence(Request $request,EntityManagerInterface $entityManager,int $id){
+
+        $groupeCompetence= $entityManager->getRepository(GroupeCompetences::class)->find($id);
+        $reponse=json_decode($request->getContent(),true);
+
+        $competence=$reponse['competences'];
+        $Competence= $entityManager->getRepository(Competences::class)->findOneBy(['libelle'=>$competence]);
+        
+        $idCompGroupe=$Competence->getGroupeCompetence()[0]->getId();
+
+        if($idCompGroupe==$groupeCompetence->getId()){
+            return $this->json("Cette  competence est deja associé a cet groupe de competence Veuillez ajouter une autre competence",200);
+
+        }else{
+            if($reponse['action']=="supprimer"){
+                $groupeCompetence ->removeCompetence($Competence);
+            }
+
+            if($reponse['action']=="ajouter"){
+                $groupeCompetence ->addCompetence($Competence);
+            }
+            $entityManager->persist($groupeCompetence);
+            $entityManager->flush();
+            return $this->json($groupeCompetence->getCompetences(),200);
+        }
+
+      //  return $this->json($idCompGroupe,200);
+
+    }
+  
+}
Index: src/Controller/PromotionController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Controller/PromotionController.php	(date 1597277288000)
+++ src/Controller/PromotionController.php	(date 1597277288000)
@@ -0,0 +1,629 @@
+<?php
+
+namespace App\Controller;
+
+use ContainerTqjcrpd\getUserRepositoryService;
+use DateTime;
+use App\Entity\User;
+use App\Entity\Groupes;
+use App\Entity\Promotion;
+use App\Entity\Apprenant;
+use App\Entity\Formateur;
+use Doctrine\ORM\EntityManager;
+use App\Repository\UserRepository;
+use App\Repository\GroupesRepository;
+use App\Repository\PromotionRepository;
+use Doctrine\ORM\EntityManagerInterface;
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpFoundation\Response;
+use Symfony\Component\Mailer\MailerInterface;
+use Symfony\Component\Mime\Email;
+use Symfony\Component\Routing\Annotation\Route;
+use Symfony\Component\HttpFoundation\JsonResponse;
+use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;
+use Symfony\Component\Serializer\SerializerInterface;
+use Symfony\Component\Validator\Validator\ValidatorInterface;
+use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
+use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
+
+class PromotionController extends AbstractController
+{
+
+
+    private $serializer;
+    private $validator;
+    private $em;
+    private $repo;
+    private $repoGroupe;
+
+    public function __construct(
+        PromotionRepository $repo,
+        GroupesRepository $repoGroupe,
+        SerializerInterface $serializer,
+        ValidatorInterface $validator,
+        EntityManagerInterface $em,
+        UserPasswordEncoderInterface $encoder,
+        TokenStorageInterface $tokenStorage
+)
+    {
+        $this->repo=$repo;
+        $this->serializer=$serializer;
+        $this->validator=$validator;
+        $this->repoGroupe=$repoGroupe;
+        $this->em=$em;
+        $this->encoder=$encoder;
+        $this->tokenStorage = $tokenStorage;
+    }
+    /**
+     * @Route(
+     *     name="add_promo",
+     *     path="/api/admin/promos",
+     *     methods={"POST"},
+     *     defaults={
+     *          "__controller"="App\Controller\PromotionController::add",
+     *          "__api_resource_class"=Promotion::class,
+     *          "__api_collection_operation_name"="addPromo"
+     *     }
+     * )
+     */
+    public function add(Request $request)
+    {
+        //recupéré tout les données de la requete
+        $promo=json_decode($request->getContent(),true);
+         
+        //recupération  recupération imga promo!
+        //@$avatar = $request->files->get("avatar");
+        
+        $promo = $this->serializer->denormalize($promo,"App\Entity\Promotion",true);
+        // if($avatar)
+        // {
+        //      //$avatarBlob = fopen($avatar->getRealPath(),"rb");
+        //     // $promo->setAvatar($avatarBlob);
+        // }
+        if(!$promo->getFabrique())
+        {
+            $promo->setFabrique("Sonatel académie");
+        }
+
+        $errors = $this->validator->validate($promo);
+        if (count($errors)){
+            $errors = $this->serializer->serialize($errors,"json");
+            return new JsonResponse($errors,Response::HTTP_BAD_REQUEST,[],true);
+        }
+      //$promo->setArchivage(false);
+
+        $em = $this->getDoctrine()->getManager();
+        $em->persist($promo);
+       $em->flush();
+       //creation dun groupe pour la promo
+       
+       $group= new Groupes();
+      // $date = date('Y-m-d');
+       $group->setNom('Groupe Générale')
+             ->setDateCreation(new \DateTime())
+             ->setStatut('ouvert')
+             ->setType('groupe principale')
+             ->setPromotion($promo);
+             $em->persist($group);
+            $em->flush();
+        
+        return $this->json($promo,201);
+     }
+
+
+    /**
+     * @Route(
+     *     name="get_promotion_all",
+     *     path="/api/admin/promos",
+     *     methods={"GET"},
+     *     defaults={
+     *          "__controller"="App\Controller\UserController::getPromos",
+     *          "__api_resource_class"=Promotion::class,
+     *          "__api_collection_operation_name"="get_promos"
+     *     }
+     * )
+     */
+    public function getPromos()
+    {
+        $promo=$this->repo->findAll();
+        return $this->json($promo,200);
+    }
+
+    /**
+     * @Route(
+     *     name="get_promotion_principale",
+     *     path="/api/admin/promo/principale",
+     *     methods={"GET"},
+     *     defaults={
+     *          "__controller"="App\Controller\UserController::getPromoPrincipale",
+     *          "__api_resource_class"=Promotion::class,
+     *          "__api_collection_operation_name"="get_promo_princ"
+     *     }
+     * )
+     */
+    public function getPromoPrincipale()
+    {
+        $promo_princ=$this->getGroupesPrincipale();
+        // $user=$this->serializer->serialize($user,"json");
+        return $this->json($promo_princ,200);
+    }
+    /**
+     * @Route(
+     *     name="get_promotion_apprenant_attente",
+     *     path="/api/admin/promo/apprenant/attente",
+     *     methods={"GET"},
+     *     defaults={
+     *          "__controller"="App\Controller\UserController::getPromoApprenantAttente",
+     *          "__api_resource_class"=Promotion::class,
+     *          "__api_collection_operation_name"="get_apprenant_attente"
+     *     }
+     * )
+     */
+    public function getPromoApprenantAttente()
+    {
+        $promos= $this->repo->findAll();
+
+        $gc=[];
+        foreach($promos as $promo)
+        {
+            
+            $group_ref_detail['referentiel']=$promo->getReferentiel();
+            //get id promo
+            $idPromo = $promo->getID();
+            //recupération du groupe principal
+            $group_ref_detail['appreants']=[];
+            $groupe=$this->repoGroupe->findBy(['promotion'=>$idPromo,'type'=>"groupe principale"], ['id' => 'DESC'])[0];
+            foreach($groupe->getApprenants() as $apprenant)
+            {
+                if($apprenant->getStatut()=="attente")
+                {
+                     $group_ref_detail['apprenants'][]=$apprenant->getFisrtName()." ".$apprenant->getLastName();
+                }
+            }
+
+           $gc[]= $group_ref_detail;
+
+        }
+
+
+        return $this->json($gc,200);
+    }
+
+    /**
+     * @Route(
+     *     name="get_promotion_id_apprenant_attente",
+     *     path="/api/admin/promo/{id}/apprenant/attente",
+     *     methods={"GET"},
+     *     defaults={
+     *          "__controller"="App\Controller\PromotionController::getPromoApprenantAttente",
+     *          "__api_resource_class"=Promotion::class,
+     *          "__api_collection_operation_name"="get_apprenant_id_attente"
+     *     }
+     * )
+     */
+    public function getPromoIdApprenantAttente($id)
+    {
+        $promos= $this->repo->findAll();
+
+        $gc=[];
+        foreach($promos as $promo)
+        {
+            
+            $group_ref_detail['referentiel']=$promo->getReferentiel();
+            //get id promo
+            $idPromo = $promo->getID();
+            //recupération du groupe principal
+            $group_ref_detail['appreants']=[];
+            $groupe=$this->repoGroupe->findBy(['promotion'=>$idPromo,'type'=>"groupe principale"], ['id' => 'DESC'])[0];
+            foreach($groupe->getApprenants() as $apprenant)
+            {
+                if($apprenant->getStatut()=="attente")
+                {
+                    if($idPromo==$id){
+                     $group_ref_detail['apprenants'][]=$apprenant->getFisrtName()." ".$apprenant->getLastName();
+                    }
+                }
+            }
+
+           $gc= $group_ref_detail;
+
+        }
+
+
+        return $this->json($gc,200);
+    }
+
+
+
+    /**
+     * @Route(
+     *     name="promo_get_principal",
+     *     path="/api/admin/promo/{id}/principal",
+     *     methods={"GET"},
+     *     defaults={
+     *          "__controller"="App\Controller\UserController::getPromoidPrincipal",
+     *          "__api_resource_class"=Promotion::class,
+     *          "__api_collection_operation_name"="get_PromoidPrincipal"
+     *     }
+     * )
+     */
+    public function getPromoidPrincipal($id)
+    {
+       $p_princs = $this->getGroupesPrincipale($id);
+
+        return $this->json($p_princs ,200);
+    }
+
+
+    /**
+     * @Route(
+     *     name="promo_get_referentiel",
+     *     path="/api/admin/promo/{id}/referentiel",
+     *     methods={"GET"},
+     *     defaults={
+     *          "__controller"="App\Controller\UserController::getPromoidreferentiel",
+     *          "__api_resource_class"=Promotion::class,
+     *          "__api_collection_operation_name"="get_Promoidreferentiel"
+     *     }
+     * )
+     */
+    public function getPromoidreferentiel($id)
+    {
+        //getreferentielpromo($id);
+      // $p_princs = $this->getGroupesPrincipale($id);
+
+        return $this->json($this->getreferentielpromo($id) ,200);
+    }
+
+
+
+    /**
+     * @Route(
+     *     name="promo_get_formateur",
+     *     path="/api/admin/promo/{id}/formateur",
+     *     methods={"GET"},
+     *     defaults={
+     *          "__controller"="App\Controller\UserController::getPromoidformateur",
+     *          "__api_resource_class"=Promotion::class,
+     *          "__api_collection_operation_name"="get_Promoidformateurl"
+     *     }
+     * )
+     */
+    public function getPromoidformateur($id)
+    {
+        $promo=$this->repo->find($id);
+
+        $data=array("referentiel"=>$promo->getReferentiel(), 'formateurs'=>$promo->getFormateurs());
+          
+
+        return $this->json($data ,200);
+    }
+
+
+    /**
+     * @Route(
+     *     name="get_pro_group_apprenant",
+     *     path="/api/admin/promo/{id}/groupes/{id1}/apprenants",
+     *     methods={"GET"},
+     *     defaults={
+     *          "__controller"="App\Controller\PromotionController::getpromogroupeapprenant",
+     *          "__api_resource_class"=Promotion::class,
+     *          "__api_item_operation_name"="get_pro_grp_apprenant"
+     *     }
+     * ),
+     */
+    public  function getpromogroupeapprenant($id,$id1)
+    {
+    //     $promo= $this->em->getRepository(Promotion::class)->find($id);
+    //     $groupe = $this->em->getRepository(Groupes::class)->find($id1);
+    //     $r
+    //     $titreG=$promo->getTitre();
+    //     $appGroupe=$promo->getGroupes()[0]->getApprenants()[0]->getUsername();
+
+    //     $libelleGroupe=$promo->getGroupes()[0]->getNom();
+
+    //    // return dd($promo->getReferentiel());
+         return $this->json("groupe" ,200);
+
+    }
+    private function getGroupesPrincipale($id=null)
+    {
+        $promos=null;
+          $promos= $this->repo->findAll();
+        $promo_princ=[];
+        
+        foreach($promos as $promo)
+        {
+            
+            $group_ref_detail['referentiel']=$promo->getReferentiel();
+
+            foreach($promo->getGroupes() as $promo_det)
+            {
+                if($promo_det->getType()==="groupe principale")
+                {
+                    if($promo->getID()==$id)
+                    {
+                        $group_ref_detail['groupes']=$promo_det;
+                            return $group_ref_detail;
+                    }
+                    $group_ref_detail['groupes']=$promo_det;
+                }
+            }
+
+            $promo_princ[]=$group_ref_detail;
+        }
+
+        if($id)
+        {
+            return null;
+        }else
+        {
+          return $promo_princ;
+        }
+    
+    }
+
+    private function getreferentielpromo($id=null)
+    {
+          $promos= $this->repo->find($id);
+        $promo_ref=$promos->getReferentiel();
+
+            return $promo_ref;
+
+    }
+    /**
+     * @Route(
+     *     name="modifie_Statut_Groupe",
+     *     path="/api/admin/promo/{id}/groupes/{id2}",
+     *     methods={"PUT"},
+     *     defaults={
+     *          "__api_resource_class"="Groupes::class",
+     *          "__api_item_operation_name"="Statut_Groupe",
+     *     }
+     * )
+     */
+    public function modifiStatutGroupe(Request $request,EntityManagerInterface $entityManager,int $id2,int $id)
+    {
+        $groupe = $entityManager->getRepository(groupes::class)->find($id2);
+        $promo = $entityManager->getRepository(promotion::class)->find($id);
+
+        $modif = json_decode($request->getContent(), true);
+        $idPromoGroupe = $groupe->getPromotion()->getId();
+        $idPromo = $promo->getId();
+
+
+        if ($idPromo == $idPromoGroupe) {
+            foreach ($modif as $value) {
+
+                foreach ($value[0] as $recu) {
+
+                    $persi = $groupe->setStatut($recu);
+                    $entityManager->persist($persi);
+                    $entityManager->flush();
+                    return $this->json($recu, 200);
+                }
+            }
+        } else {
+            return $this->json("Ce groupe n'existe pas", 200);
+        }
+
+    }
+
+
+    /*public function addApprenant(Request $request,EntityManagerInterface $entityManager,int $id){
+//recupéré tout les données de la requete
+        $apprenants=json_decode($request->getContent(),true);
+        $promo = $entityManager->getRepository(promotion::class)->find($id);
+        $apprenants = $this->serializer->denormalize($apprenants,"App\Entity\User","JSON");
+
+
+
+            $genre=$apprenants['genre'];
+            $adresse=$apprenants['adresse'];
+            $telephone=$apprenants['telephone'];
+            $username=$apprenants['username'];
+            $firstname=$apprenants['fisrtName'];
+            $lastname=$apprenants['lastName'];
+            $email=$apprenants['email'];
+            $password=['password'];
+            $profil=$apprenants['profil'];
+            $archivage=$apprenants['archivage'];
+            $photo = $request->files->get("photo");
+            $photoBlob = fopen($photo->getRealPath(),"rb");
+                if($profil==6){
+
+                    $ajApprenants=new apprenant();
+                    $ajApprenants->setGenre($genre)
+                        ->setAdresse($adresse)
+                        ->setTelephone($telephone);
+                }elseif ($profil==4){
+                    $ajApprenants=new formateur();
+                }else{
+                    return $this->json("Ce profil ne peut pas etre ajouter",400);
+                }
+
+        $ajApprenants->setUsername($username)
+                ->setFisrtName($firstname)
+                ->setLastName($lastname)
+                ->setEmail($email)
+                ->setPassword($this->encoder->encodePassword ($ajApprenants, $password ))
+                ->setProfil($profil)
+                ->setPhoto($photoBlob)
+                ->setArchivage($archivage);
+            $em = $this->getDoctrine()->getManager();
+            $em->persist($ajApprenants);
+            $em->flush();
+            return $this->json($apprenants,201);
+
+    }
+*/
+
+    /**
+     * @Route(
+     *     name="delete_promo_apprenant",
+     *     path="/api/admin/promo/{id}/apprenants",
+     *     methods={"DELETE"},
+     *     defaults={
+     *          "__controller"="App\Controller\PromotionController::DeleteApprenant",
+     *          "__api_resource_class"=User::class,
+     *          "__api_item_operation_name"="delete_Apprenant"
+     *     }
+     *     ),
+     *       @Route(
+     *     name="delete_promo_formateur",
+     *     path="/api/admin/promo/{id}/formateur",
+     *     methods={"DELETE"},
+     *     defaults={
+     *          "__controller"="App\Controller\PromotionController::DeleteApprenant",
+     *          "__api_resource_class"=User::class,
+     *          "__api_item_operation_name"="delete_Formateur"
+     *     }
+     *
+     * )
+     */
+    public function DeleteApprenant(Request $request,EntityManagerInterface $entityManager,UserRepository $userRepository){
+        $reponse=json_decode($request->getContent(),true);
+
+        $username=$reponse['username'];
+        $userId=$userRepository->findOneBy(["username"=>$username])
+           ->setArchivage(false);
+       $this->em->persist($userId);
+        $this->em->flush();
+        return $this->json(true,200);
+
+
+    }
+    /**
+     * @Route(
+     *     name="modifier_promo_id",
+     *     path="/api/admin/promo/{id}",
+     *     methods={"PUT"},
+     *     defaults={
+     *          "__controller"="App\Controller\PromotionController::ModifierPromo",
+     *          "__api_resource_class"=Promotion::class,
+     *          "__api_item_operation_name"="modifier_Promo"
+     *     }
+     *     ),
+    */
+    public function ModifierPromo(Request $request,EntityManagerInterface $entityManager,int $id){
+        $reponse=json_decode($request->getContent(),true);
+        $libele=['langue','titre','description','lieu','dateDebut','dateFinPrvisoire','fabrique','dateFinReelle','status'];
+
+        $promo = $entityManager->getRepository(promotion::class)->find($id);
+        $tabfonct=[
+            $promo->setLangue($reponse['langue']),
+            $promo->setTitre($reponse['titre']),
+            $promo->setdescription($reponse['description']),
+            $promo->setLieu($reponse['lieu']),
+            $promo->setDateDebut(\DateTime::createFromFormat('Y-m-d',$reponse['dateDebut'])),
+            $promo->setDateFinPrvisoire(\DateTime::createFromFormat('Y-m-d',$reponse['dateFinPrvisoire'])),
+            $promo->setFabrique($reponse['fabrique']),
+            $promo->setDateFinReelle(\DateTime::createFromFormat('Y-m-d',$reponse['dateFinReelle'])),
+            $promo->setStatus($reponse['status'])];
+        $tab=[];
+        for ($i=0;$i<count($reponse);$i++){
+
+            if(isset($reponse[$libele[$i]])){
+
+                $tab1[]=$reponse[$libele[$i]];
+                $entityManager->persist($tabfonct[$i]);
+                $entityManager->flush();
+            }
+
+        }
+
+
+        return $this->json(true,200);
+
+
+    }
+    /**
+     * @Route(
+     *     name="add_promo_apprenant",
+     *     path="/api/admin/promo/{id}/apprenants",
+     *     methods={"PUT"},
+     *     defaults={
+     *          "__controller"="App\Controller\PromotionController::addApprenant",
+     *          "__api_resource_class"=User::class,
+     *          "__api_item_operation_name"="addANDremoveUser"
+     *     }
+     * ),
+     *  @Route(
+     *     name="add_promo_formateur",
+     *     path="/api/admin/promo/{id}/formateur",
+     *     methods={"PUT"},
+     *     defaults={
+     *          "__controller"="App\Controller\PromotionController::addFormateur",
+     *          "__api_resource_class"=User::class,
+     *          "__api_item_operation_name"="addANDremoveUser"
+     *     }
+     * )
+     */
+    public function addANDremoveUser(MailerInterface $mailer,UserRepository $userRepository,Request $request,EntityManagerInterface $entityManager,int $id){
+        $promo = $entityManager->getRepository(promotion::class)->find($id);
+
+        $reponse=json_decode($request->getContent(),true);
+        $action=$reponse['action'];
+        $tableau=['username','email'];
+
+        if($action=="ajouter"){
+            for ($i=0;$i<count($tableau);$i++){
+
+                if(isset($reponse[$tableau[$i]])){
+                    $user=$reponse[$tableau[$i]];
+                    $userId=$userRepository->findOneBy([$tableau[$i]=>$user]);
+                    $idProfil=$userId->getProfil()->getId();
+
+                    if($idProfil==4){
+
+                                    $promo->addFormateur($userId);
+
+                                                         }
+                    if($idProfil==6){
+
+                        $promo->getGroupes()[0]->addApprenant($userId);
+                        $email = (new Email())
+                            ->from("abdoukarimsidibe1@gmail.com")
+                            ->to($promo->getGroupes()[0]->getApprenants()[0]->getEmail())
+                            ->subject('Message teste!')
+                            ->text("Bonjour {$promo->getGroupes()[0]->getApprenants()[0]->getFisrtName()}! ❤️ce message est un teste")
+                            ->html("<h1>Felicitation {$promo->getGroupes()[0]->getApprenants()[0]->getFisrtName()} !! vous avez ete selectionné(e) suite
+                                    a votre test d'entré a la Sonatel Academy! ❤.<br>Veuillez utiliser ces informations pour vous connecter a votre Promo,Username:
+                                    {$promo->getGroupes()[0]->getApprenants()[0]->getUsername()}, Password:Pass123️</h1>");
+
+
+                        $mailer->send($email);
+                                    }
+
+
+
+                }
+            }
+        }
+        if($action=="supprimer"){
+
+            for ($i=0;$i<count($tableau);$i++){
+
+                if(isset($reponse[$tableau[$i]])){
+                    $user=$reponse[$tableau[$i]];
+                    $userId=$userRepository->findOneBy([$tableau[$i]=>$user]);
+                    $idProfil=$userId->getProfil()->getId();
+                    if($idProfil==4){
+
+                        $promo->removeFormateur($userId);
+                    }
+                    if($idProfil==6){
+
+                        $promo->getGroupes()[0]->removeApprenant($userId);
+                    }
+                }
+            }
+        }
+
+        $entityManager->persist($promo);
+        $entityManager->flush();
+       return $this->json(true,200);
+//return dd($promo->getGroupes()[0]->getApprenants()[0]->getEmail());
+    }
+}
+
Index: src/DataFixtures/TagFixtures.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/DataFixtures/TagFixtures.php	(date 1597277288000)
+++ src/DataFixtures/TagFixtures.php	(date 1597277288000)
@@ -0,0 +1,56 @@
+<?php
+
+namespace App\DataFixtures;
+
+use Faker\Factory;
+use App\Entity\Tag;
+use App\Entity\GroupeTag;
+use App\Entity\Promotion;
+use Doctrine\Bundle\FixturesBundle\Fixture;
+use Doctrine\Common\Persistence\ObjectManager;
+use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
+
+class TagFixtures extends Fixture
+{
+
+    public function __construct()
+    {
+
+    }
+    
+
+
+    public function load(ObjectManager $manager)
+    {
+        $fake = Factory::create('fr-FR');
+        $tab=["HTML5", "php", "javascript", "angular", "wordpress", "bootstrap","json","python","java","joomla","c++","fortran","algo"];
+        
+        $tab_objt_tag=[];
+        for($i=0;$i<count($tab);$i++)
+        {
+            $tag=new Tag();
+            $tag->setLibelle($tab[$i]);
+            $tag->setDescription("description ".$i);
+
+            $tab_objt_tag[]=$tag;
+            $manager->persist($tag);
+        }
+        
+      $manager->flush();
+
+      for($i=1;$i<=3;$i++)
+      {
+          $grpTag=new GroupeTag();
+          $grpTag->setLibelle('libelle '.$i);
+          for($j=1;$j<=4;$j++)
+          {
+              $grpTag->addTag($fake->unique()->randomElement($tab_objt_tag));
+          }
+            $manager->persist($grpTag);
+          
+      }
+      $manager->flush();
+
+    }
+    
+}
Index: src/DataPersister/ProfilArchiveController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/DataPersister/ProfilArchiveController.php	(date 1597277288000)
+++ src/DataPersister/ProfilArchiveController.php	(date 1597277288000)
@@ -0,0 +1,31 @@
+<?php
+
+namespace App\Controller;
+use App\Entity\user;
+use App\Entity\Profil;
+use App\Repository\ProfilRepository;
+use App\Repository\UserRepository;
+use Doctrine\ORM\EntityManagerInterface;
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\Routing\Annotation\Route;
+use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
+
+class ProfilArchiveController extends AbstractController
+{
+   public function __invoke(UserRepository $userRepository,EntityManagerInterface $entityManager,int $id)
+   {
+      
+       $profil = $entityManager->getRepository(profil::class)->find($id);
+       $profil->setArchive(false);
+       
+       $users=$userRepository->findByProfil($id);
+       foreach($users as $user){
+
+            $user->setArchivage(true);
+            $entityManager->persist($user);
+            $entityManager->flush();
+       }
+       
+       
+   }
+}
Index: src/Repository/CommunityManagerRepository.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Repository/CommunityManagerRepository.php	(date 1597277288000)
+++ src/Repository/CommunityManagerRepository.php	(date 1597277288000)
@@ -0,0 +1,50 @@
+<?php
+
+namespace App\Repository;
+
+use App\Entity\CommunityManager;
+use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
+use Doctrine\Persistence\ManagerRegistry;
+
+/**
+ * @method CommunityManager|null find($id, $lockMode = null, $lockVersion = null)
+ * @method CommunityManager|null findOneBy(array $criteria, array $orderBy = null)
+ * @method CommunityManager[]    findAll()
+ * @method CommunityManager[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
+ */
+class CommunityManagerRepository extends ServiceEntityRepository
+{
+    public function __construct(ManagerRegistry $registry)
+    {
+        parent::__construct($registry, CommunityManager::class);
+    }
+
+    // /**
+    //  * @return CommunityManager[] Returns an array of CommunityManager objects
+    //  */
+    /*
+    public function findByExampleField($value)
+    {
+        return $this->createQueryBuilder('c')
+            ->andWhere('c.exampleField = :val')
+            ->setParameter('val', $value)
+            ->orderBy('c.id', 'ASC')
+            ->setMaxResults(10)
+            ->getQuery()
+            ->getResult()
+        ;
+    }
+    */
+
+    /*
+    public function findOneBySomeField($value): ?CommunityManager
+    {
+        return $this->createQueryBuilder('c')
+            ->andWhere('c.exampleField = :val')
+            ->setParameter('val', $value)
+            ->getQuery()
+            ->getOneOrNullResult()
+        ;
+    }
+    */
+}
Index: src/DataFixtures/PromotionFixtures.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/DataFixtures/PromotionFixtures.php	(date 1597277288000)
+++ src/DataFixtures/PromotionFixtures.php	(date 1597277288000)
@@ -0,0 +1,30 @@
+<?php
+
+namespace App\DataFixtures;
+
+use Faker\Factory;
+use App\Entity\Promotion;
+use Doctrine\Bundle\FixturesBundle\Fixture;
+use Doctrine\Common\Persistence\ObjectManager;
+use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
+
+class PromotionFixtures extends Fixture
+{
+
+    public function __construct()
+    {
+
+     }
+    
+
+
+    public function load(ObjectManager $manager)
+    {
+        $fake = Factory::create('fr-FR');
+        
+        
+      $manager->flush();
+
+    }
+    
+}
Index: src/Security/Voter/GroupeCompetenceVoter.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Security\\Voter;\n\nuse App\\Entity\\GroupeCompetence;\nuse Symfony\\Component\\HttpFoundation\\RequestStack;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nuse Symfony\\Component\\Security\\Core\\Authorization\\Voter\\Voter;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface;\n\nclass GroupeCompetenceVoter extends Voter\n{\n\n    private $request;\n\n    public function __construct(RequestStack $request)\n    {\n        $this->request = $request;\n    }\n\n    protected function supports($attribute, $subject)\n    {\n        // replace with your own logic\n        // https://symfony.com/doc/current/security/voters.html\n        return in_array($attribute, ['POST_EDIT', 'POST_VIEW'])\n            && $subject instanceof \\App\\Entity\\GroupeCompetence;\n    }\n\n    protected function voteOnAttribute($attribute, $subject, TokenInterface $token)\n    {\n        $user = $token->getUser();\n        $req=$this->request->getContent();\n        // if the user is anonymous, do not grant access\n        if (!$user instanceof UserInterface) {\n            return false;\n        }\n\n        // ... (check conditions and return true to grant permission) ...\n        switch ($attribute) {\n            case 'GC_EDIT':\n                    return true;\n                break;\n            case 'GC_VIEW':\n                // logic to determine if the user can VIEW\n                // return true or false\n                break;\n        }\n\n        return false;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Security/Voter/GroupeCompetenceVoter.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/Security/Voter/GroupeCompetenceVoter.php	(date 1597277288000)
@@ -3,6 +3,7 @@
 namespace App\Security\Voter;
 
 use App\Entity\GroupeCompetence;
+use App\Repository\GroupeCompetenceRepository;
 use Symfony\Component\HttpFoundation\RequestStack;
 use Symfony\Component\Security\Core\User\UserInterface;
 use Symfony\Component\Security\Core\Authorization\Voter\Voter;
@@ -12,24 +13,27 @@
 {
 
     private $request;
+    private $gc_repo;
 
-    public function __construct(RequestStack $request)
+    public function __construct(RequestStack $request,GroupeCompetenceRepository $gc_repo)
     {
         $this->request = $request;
+        $this->gc_repo = $gc_repo;
     }
 
     protected function supports($attribute, $subject)
     {
         // replace with your own logic
         // https://symfony.com/doc/current/security/voters.html
-        return in_array($attribute, ['POST_EDIT', 'POST_VIEW'])
+        return in_array($attribute, ['GC_EDIT', 'GC_VIEW'])
             && $subject instanceof \App\Entity\GroupeCompetence;
     }
 
     protected function voteOnAttribute($attribute, $subject, TokenInterface $token)
     {
         $user = $token->getUser();
-        $req=$this->request->getContent();
+       // $req=$this->request->getCurrentRequest()->getContent();
+       $req=$user->getID();
         // if the user is anonymous, do not grant access
         if (!$user instanceof UserInterface) {
             return false;
@@ -38,7 +42,8 @@
         // ... (check conditions and return true to grant permission) ...
         switch ($attribute) {
             case 'GC_EDIT':
-                    return true;
+                   dd($req);
+                    return false;
                 break;
             case 'GC_VIEW':
                 // logic to determine if the user can VIEW
Index: src/Repository/PromotionRepository.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Promotion;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\n/**\n * @method Promotion|null find($id, $lockMode = null, $lockVersion = null)\n * @method Promotion|null findOneBy(array $criteria, array $orderBy = null)\n * @method Promotion[]    findAll()\n * @method Promotion[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n */\nclass PromotionRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Promotion::class);\n    }\n\n    // /**\n    //  * @return Promotion[] Returns an array of Promotion objects\n    //  */\n    /*\n    public function findByExampleField($value)\n    {\n        return $this->createQueryBuilder('p')\n            ->andWhere('p.exampleField = :val')\n            ->setParameter('val', $value)\n            ->orderBy('p.id', 'ASC')\n            ->setMaxResults(10)\n            ->getQuery()\n            ->getResult()\n        ;\n    }\n    */\n\n    /*\n    public function findOneBySomeField($value): ?Promotion\n    {\n        return $this->createQueryBuilder('p')\n            ->andWhere('p.exampleField = :val')\n            ->setParameter('val', $value)\n            ->getQuery()\n            ->getOneOrNullResult()\n        ;\n    }\n    */\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Repository/PromotionRepository.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/Repository/PromotionRepository.php	(date 1597277288000)
@@ -19,11 +19,11 @@
         parent::__construct($registry, Promotion::class);
     }
 
-    // /**
-    //  * @return Promotion[] Returns an array of Promotion objects
-    //  */
-    /*
-    public function findByExampleField($value)
+    /**
+     * @return Promotion[] Returns an array of Promotion objects
+     */
+    
+    public function findByGroupePrincipal($value)
     {
         return $this->createQueryBuilder('p')
             ->andWhere('p.exampleField = :val')
@@ -34,7 +34,7 @@
             ->getResult()
         ;
     }
-    */
+    
 
     /*
     public function findOneBySomeField($value): ?Promotion
Index: src/Entity/Promotion.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse App\\Repository\\PromotionRepository;\nuse Doctrine\\Common\\Collections\\Collection;\nuse ApiPlatform\\Core\\Annotation\\ApiSubresource;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\n\n/**\n * @ApiResource(\n *     collectionOperations={\n *           \"get_promo\"={\n *               \"method\"=\"GET\",\n *               \"path\"=\"/admin/promo\",\n *               \"security\"=\"is_granted('ROLE_ADMIN')\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          },\n *     \"get_promo_principal\"={\n *               \"method\"=\"GET\",\n *               \"path\"=\"/admin/promo/principal\",\n *               \"security\"=\"is_granted('ROLE_ADMIN')\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          },\n *     \"get_promo_apprenants_attente\"={\n *               \"method\"=\"GET\",\n *               \"path\"=\"/admin/promo/apprenants/attente\",\n *               \"security\"=\"is_granted('ROLE_ADMIN')\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          },\n *            \"add_promo\"={\n *               \"method\"=\"POST\",\n *               \"path\"=\"/admin/promo\",\n *               \"security\"=\"is_granted('ROLE_ADMIN')\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          }\n *      },\n *      itemOperations={\n *           \"get_promo_id\"={\n *               \"method\"=\"GET\",\n *               \"path\"=\"/admin/promo/{id}\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *           \"get_promo_id_principal\"={\n *               \"method\"=\"GET\",\n *               \"path\"=\"/admin/promo/{id}/principal\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *           \"get_promo_id_referentiel\"={\n *               \"method\"=\"GET\",\n *               \"path\"=\"/admin/promo/{id}/referentiels\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *           \"get_promo_id_apprenants_attente\"={\n *               \"method\"=\"GET\",\n *               \"path\"=\"/admin/promo/{id}/apprenants/attente\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *           \"get_promo_id_groupe_id_apprenants\"={\n *               \"method\"=\"GET\",\n *               \"path\"=\"/admin/promo/{id1}/groupes/{id2}/apprenants\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *           \"get_promo_id_formateurs\"={\n *               \"method\"=\"GET\",\n *               \"path\"=\"/admin/promo/{id}/formateurs\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *            \"update_promo_id\"={\n *               \"method\"=\"PUT\",\n *               \"path\"=\"/admin/promo/{id}\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *            \"update_promo_id_apprenants\"={\n *               \"method\"=\"PUT\",\n *               \"path\"=\"/admin/promo/{id}/apprenants\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *            \"update_promo_id_formateurs\"={\n *               \"method\"=\"PUT\",\n *               \"path\"=\"/admin/promo/{id}/formateurs\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *            \"update_promo_id_groupes_id\"={\n *               \"method\"=\"PUT\",\n *               \"path\"=\"/admin/promo/{id1}/groupes/{id2}\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *            \"delete_groupe_id_apprenants\"={\n *               \"method\"=\"DELETE\",\n *               \"path\"=\"/admin/groupes/{id}/apprenants\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *      },\n *       normalizationContext={\"groups\"={\"promotion:read\"}},\n *       denormalizationContext={\"groups\"={\"promotion:write\"}},\n *       attributes={\"pagination_enabled\"=true, \"pagination_items_per_page\"=10}\n * )\n * @ORM\\Entity(repositoryClass=PromotionRepository::class)\n */\nclass Promotion\n{\n    /**\n     * @ORM\\Id()\n     * @ORM\\GeneratedValue()\n     * @ORM\\Column(type=\"integer\")\n     * @Groups({\"promotion:read\"})\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     * @Groups({\"promotion:read\",\"promotion:write\"})\n     */\n    private $langue;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     * @Groups({\"promotion:read\",\"promotion:write\"})\n     */\n    private $titre;\n\n    /**\n     * @ORM\\Column(type=\"text\")\n     * @Groups({\"promotion:read\",\"promotion:write\"})\n     */\n    private $description;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     * @Groups({\"promotion:read\",\"promotion:write\"})\n     */\n    private $lieu;\n\n    /**\n     * @ORM\\Column(type=\"date\", nullable=true)\n     * @Groups({\"promotion:read\",\"promotion:write\"})\n     */\n    private $dateDebut;\n\n    /**\n     * @ORM\\Column(type=\"date\", nullable=true)\n     * @Groups({\"promotion:read\",\"promotion:write\"})\n     */\n    private $dateFinPrvisoire;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     * @Groups({\"promotion:read\",\"promotion:write\"})\n     */\n    private $fabrique;\n\n    /**\n     * @ORM\\Column(type=\"date\", nullable=true)\n     * @Groups({\"promotion:read\",\"promotion:write\"})\n     */\n    private $dateFinReelle;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=50, nullable=true)\n     * @Groups({\"promotion:read\",\"promotion:write\"})\n     */\n    private $status;\n\n    /**\n     * @ORM\\ManyToOne(targetEntity=Referentiel::class, inversedBy=\"promotions\")\n     * @ApiSubresource\n     * @Groups({\"promotion:read\"})\n     */\n    private $referentiel;\n\n    /**\n     * @ORM\\ManyToMany(targetEntity=Formateur::class, inversedBy=\"promotions\")\n     * @ApiSubresource\n     * @Groups({\"promotion:read\"})\n     */\n    private $formateurs;\n\n    /**\n     * @ORM\\ManyToOne(targetEntity=User::class, inversedBy=\"promotions\")\n     * @ApiSubresource\n     * @Groups({\"promotion:read\"})\n     */\n    private $users;\n\n    /**\n     * @ORM\\OneToMany(targetEntity=Groupes::class, mappedBy=\"promotions\")\n     * @ApiSubresource\n     * @Groups({\"promotion:read\"})\n     */\n    private $groupe;\n\n    public function __construct()\n    {\n        $this->groupes = new ArrayCollection();\n        $this->groupe = new ArrayCollection();\n        $this->formateurs = new ArrayCollection();\n    }\n\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    public function getLangue(): ?string\n    {\n        return $this->langue;\n    }\n\n    public function setLangue(string $langue): self\n    {\n        $this->langue = $langue;\n\n        return $this;\n    }\n\n    public function getTitre(): ?string\n    {\n        return $this->titre;\n    }\n\n    public function setTitre(string $titre): self\n    {\n        $this->titre = $titre;\n\n        return $this;\n    }\n\n    public function getDescription(): ?string\n    {\n        return $this->description;\n    }\n\n    public function setDescription(string $description): self\n    {\n        $this->description = $description;\n\n        return $this;\n    }\n\n    public function getLieu(): ?string\n    {\n        return $this->lieu;\n    }\n\n    public function setLieu(string $lieu): self\n    {\n        $this->lieu = $lieu;\n\n        return $this;\n    }\n\n    public function getDateDebut(): ?\\DateTimeInterface\n    {\n        return $this->dateDebut;\n    }\n\n    public function setDateDebut(?\\DateTimeInterface $dateDebut): self\n    {\n        $this->dateDebut = $dateDebut;\n\n        return $this;\n    }\n\n    public function getDateFinPrvisoire(): ?\\DateTimeInterface\n    {\n        return $this->dateFinPrvisoire;\n    }\n\n    public function setDateFinPrvisoire(?\\DateTimeInterface $dateFinPrvisoire): self\n    {\n        $this->dateFinPrvisoire = $dateFinPrvisoire;\n\n        return $this;\n    }\n\n    public function getFabrique(): ?string\n    {\n        return $this->fabrique;\n    }\n\n    public function setFabrique(string $fabrique): self\n    {\n        $this->fabrique = $fabrique;\n\n        return $this;\n    }\n\n    public function getDateFinReelle(): ?\\DateTimeInterface\n    {\n        return $this->dateFinReelle;\n    }\n\n    public function setDateFinReelle(?\\DateTimeInterface $dateFinReelle): self\n    {\n        $this->dateFinReelle = $dateFinReelle;\n\n        return $this;\n    }\n\n    public function getStatus(): ?string\n    {\n        return $this->status;\n    }\n\n    public function setStatus(?string $status): self\n    {\n        $this->status = $status;\n\n        return $this;\n    }\n\n    public function getReferentiel(): ?Referentiel\n    {\n        return $this->referentiel;\n    }\n\n    public function setReferentiel(?Referentiel $referentiel): self\n    {\n        $this->referentiel = $referentiel;\n\n        return $this;\n    }\n\n    /**\n     * @return Collection|Formateur[]\n     */\n    public function getFormateurs(): Collection\n    {\n        return $this->formateurs;\n    }\n\n    public function addFormateur(Formateur $formateur): self\n    {\n        if (!$this->formateurs->contains($formateur)) {\n            $this->formateurs[] = $formateur;\n        }\n\n        return $this;\n    }\n\n    public function removeFormateur(Formateur $formateur): self\n    {\n        if ($this->formateurs->contains($formateur)) {\n            $this->formateurs->removeElement($formateur);\n        }\n\n        return $this;\n    }\n\n    public function getUsers(): ?User\n    {\n        return $this->users;\n    }\n\n    public function setUsers(?User $users): self\n    {\n        $this->users = $users;\n\n        return $this;\n    }\n\n    /**\n     * @return Collection|Groupes[]\n     */\n    public function getGroupe(): Collection\n    {\n        return $this->groupe;\n    }\n\n    public function addGroupe(Groupes $groupe): self\n    {\n        if (!$this->groupe->contains($groupe)) {\n            $this->groupe[] = $groupe;\n            $groupe->setPromotions($this);\n        }\n\n        return $this;\n    }\n\n    public function removeGroupe(Groupes $groupe): self\n    {\n        if ($this->groupe->contains($groupe)) {\n            $this->groupe->removeElement($groupe);\n            // set the owning side to null (unless already changed)\n            if ($groupe->getPromotions() === $this) {\n                $groupe->setPromotions(null);\n            }\n        }\n\n        return $this;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Entity/Promotion.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/Entity/Promotion.php	(date 1597277288000)
@@ -2,113 +2,70 @@
 
 namespace App\Entity;
 
-use ApiPlatform\Core\Annotation\ApiResource;
+use Symfony\Component\Validator\Constraints as Assert;
+use Doctrine\ORM\Mapping as ORM;
 use App\Repository\PromotionRepository;
 use Doctrine\Common\Collections\Collection;
+use ApiPlatform\Core\Annotation\ApiResource;
 use ApiPlatform\Core\Annotation\ApiSubresource;
 use Doctrine\Common\Collections\ArrayCollection;
-use Doctrine\ORM\Mapping as ORM;
 use Symfony\Component\Serializer\Annotation\Groups;
+use Symfony\Component\Validator\Constraints\NotBlank;
 
 /**
  * @ApiResource(
- *     collectionOperations={
- *           "get_promo"={
- *               "method"="GET",
- *               "path"="/admin/promo",
- *               "security"="is_granted('ROLE_ADMIN')",
- *               "security_message"="Acces non autorisé",
- *          },
- *     "get_promo_principal"={
- *               "method"="GET",
- *               "path"="/admin/promo/principal",
- *               "security"="is_granted('ROLE_ADMIN')",
- *               "security_message"="Acces non autorisé",
- *          },
- *     "get_promo_apprenants_attente"={
- *               "method"="GET",
- *               "path"="/admin/promo/apprenants/attente",
- *               "security"="is_granted('ROLE_ADMIN')",
- *               "security_message"="Acces non autorisé",
- *          },
- *            "add_promo"={
- *               "method"="POST",
- *               "path"="/admin/promo",
- *               "security"="is_granted('ROLE_ADMIN')",
- *               "security_message"="Acces non autorisé",
- *          }
- *      },
+ *
  *      itemOperations={
- *           "get_promo_id"={
- *               "method"="GET",
- *               "path"="/admin/promo/{id}",
- *                "security"="is_granted('ROLE_ADMIN')",
- *                  "security_message"="Acces non autorisé",
- *          },
- *           "get_promo_id_principal"={
- *               "method"="GET",
- *               "path"="/admin/promo/{id}/principal",
- *                "security"="is_granted('ROLE_ADMIN')",
- *                  "security_message"="Acces non autorisé",
- *          },
- *           "get_promo_id_referentiel"={
- *               "method"="GET",
- *               "path"="/admin/promo/{id}/referentiels",
- *                "security"="is_granted('ROLE_ADMIN')",
- *                  "security_message"="Acces non autorisé",
- *          },
- *           "get_promo_id_apprenants_attente"={
- *               "method"="GET",
- *               "path"="/admin/promo/{id}/apprenants/attente",
- *                "security"="is_granted('ROLE_ADMIN')",
- *                  "security_message"="Acces non autorisé",
- *          },
- *           "get_promo_id_groupe_id_apprenants"={
- *               "method"="GET",
- *               "path"="/admin/promo/{id1}/groupes/{id2}/apprenants",
- *                "security"="is_granted('ROLE_ADMIN')",
- *                  "security_message"="Acces non autorisé",
- *          },
- *           "get_promo_id_formateurs"={
- *               "method"="GET",
- *               "path"="/admin/promo/{id}/formateurs",
- *                "security"="is_granted('ROLE_ADMIN')",
- *                  "security_message"="Acces non autorisé",
- *          },
- *            "update_promo_id"={
- *               "method"="PUT",
- *               "path"="/admin/promo/{id}",
- *                "security"="is_granted('ROLE_ADMIN')",
- *                  "security_message"="Acces non autorisé",
- *          },
- *            "update_promo_id_apprenants"={
- *               "method"="PUT",
- *               "path"="/admin/promo/{id}/apprenants",
- *                "security"="is_granted('ROLE_ADMIN')",
- *                  "security_message"="Acces non autorisé",
- *          },
- *            "update_promo_id_formateurs"={
- *               "method"="PUT",
- *               "path"="/admin/promo/{id}/formateurs",
- *                "security"="is_granted('ROLE_ADMIN')",
- *                  "security_message"="Acces non autorisé",
- *          },
- *            "update_promo_id_groupes_id"={
- *               "method"="PUT",
- *               "path"="/admin/promo/{id1}/groupes/{id2}",
- *                "security"="is_granted('ROLE_ADMIN')",
- *                  "security_message"="Acces non autorisé",
- *          },
- *            "delete_groupe_id_apprenants"={
- *               "method"="DELETE",
- *               "path"="/admin/groupes/{id}/apprenants",
- *                "security"="is_granted('ROLE_ADMIN')",
- *                  "security_message"="Acces non autorisé",
- *          },
- *      },
- *       normalizationContext={"groups"={"promotion:read"}},
- *       denormalizationContext={"groups"={"promotion:write"}},
- *       attributes={"pagination_enabled"=true, "pagination_items_per_page"=10}
+ *                                  "get",
+ *                                  "Statut_Groupe"={
+ *                                      "method"="PUT",
+ *                                        "path"="/admin/promo/{id}/groupes/{id2}" ,
+ *                                      "route_name"="modifie_Statut_Groupe",
+ *                                         "defaults"={"id"=null},
+ *                                      "modifie_Statut_discontinuation",},
+ *
+ *
+ *                                    "add_Apprenant"={
+ *                                      "method"="PUT",
+ *                                        "path"="/admin/promo/{id}/apprenants" ,
+ *                                      "route_name"="add_promo_apprenant",
+ *                                       "defaults"={"id"=null},
+ *                                      "add_promo_discontinuation",},
+ *
+ *                                  "modifier_Promo"={
+ *                                      "method"="PUT",
+ *                                        "path"="/admin/promo/{id}" ,
+ *                                      "route_name"="modifier_promo_id",
+ *                                       "defaults"={"id"=null},
+ *                                      "modifier_promo_discontinuation",},
+ *
+ *                                      "delete_Apprenant"={
+ *                                      "method"="DELETE",
+ *                                        "path"="/admin/promo/{id}/apprenants" ,
+ *                                      "route_name"="delete_promo_apprenant",
+ *                                       "defaults"={"id"=null},
+ *                                      "add_promo_discontinuation",},
+ *
+ *                           "delete_Formateur"={
+ *                                      "method"="DELETE",
+ *                                        "path"="/admin/promo/{id}/formateur" ,
+ *                                      "route_name"="delete_promo_formateur",
+ *                                       "defaults"={"id"=null},
+ *                                      "add_promo_discontinuation",},
+ *
+ *                                  "add_Formateur"={
+ *                                      "method"="PUT",
+ *                                        "path"="/admin/promo/{id}/Formateur" ,
+ *                                      "route_name"="add_promo_formateur",
+ *                                       "defaults"={"id"=null},
+ *                                      "add_promo_discontinuation",},
+ *
+ *
+ *
+ *
+ *                      },
+ *      normalizationContext={"groups"={"promo:read"}},
+ *      denormalizationContext={"groups"={"promo:write"}}
  * )
  * @ORM\Entity(repositoryClass=PromotionRepository::class)
  */
@@ -118,96 +75,107 @@
      * @ORM\Id()
      * @ORM\GeneratedValue()
      * @ORM\Column(type="integer")
-     * @Groups({"promotion:read"})
+     * @Groups({"promo:read"})
+     * @Groups({"groupe:read"})
      */
-    private $id;
+    protected $id;
 
     /**
      * @ORM\Column(type="string", length=255)
-     * @Groups({"promotion:read","promotion:write"})
+     * @Groups({"promo:read", "promo:write"})
+     * @Assert\NotBlank
      */
     private $langue;
 
     /**
      * @ORM\Column(type="string", length=255)
-     * @Groups({"promotion:read","promotion:write"})
+     * @Groups({"promo:read", "promo:write"})
+     * @Assert\NotBlank
      */
     private $titre;
 
     /**
      * @ORM\Column(type="text")
-     * @Groups({"promotion:read","promotion:write"})
+     * @Groups({"promo:read", "promo:write"})
+     * @Assert\NotBlank
      */
     private $description;
 
     /**
      * @ORM\Column(type="string", length=255)
-     * @Groups({"promotion:read","promotion:write"})
+     * @Groups({"promo:read", "promo:write"})
      */
     private $lieu;
 
     /**
      * @ORM\Column(type="date", nullable=true)
-     * @Groups({"promotion:read","promotion:write"})
+     * @Groups({"promo:read", "promo:write"})
+     * @Assert\NotBlank
      */
     private $dateDebut;
 
     /**
      * @ORM\Column(type="date", nullable=true)
-     * @Groups({"promotion:read","promotion:write"})
+     * @Groups({"promo:read", "promo:write"})
+     * @Assert\NotBlank
      */
     private $dateFinPrvisoire;
 
     /**
      * @ORM\Column(type="string", length=255)
-     * @Groups({"promotion:read","promotion:write"})
+     * @Groups({"promo:read", "promo:write"})
+     * @Assert\NotBlank
      */
     private $fabrique;
 
     /**
      * @ORM\Column(type="date", nullable=true)
-     * @Groups({"promotion:read","promotion:write"})
+     * @Groups({"promo:read", "promo:write"})
+     * @Assert\NotBlank
      */
     private $dateFinReelle;
 
     /**
      * @ORM\Column(type="string", length=50, nullable=true)
-     * @Groups({"promotion:read","promotion:write"})
+     * @Groups({"promo:read", "promo:write"})
+     * @Assert\NotBlank
      */
     private $status;
 
+    /**
+     * @ORM\OneToMany(targetEntity=Groupes::class, mappedBy="promotion")
+     * @ApiSubresource()
+     * @Groups({"promo:read"})
+     *
+     */
+    private $groupes;
+
+   
+
+    /**
+     * @ORM\Column(type="blob", nullable=true)
+     * @Groups({"promo:read"})
+     */
+    private $avatar;
+
+
+    /**
+     * @ORM\ManyToMany(targetEntity=Formateur::class, inversedBy="promotions")
+     * @ApiSubresource()
+     * @Groups({"promo:read"})
+     */
+    private $formateurs;
+
     /**
      * @ORM\ManyToOne(targetEntity=Referentiel::class, inversedBy="promotions")
-     * @ApiSubresource
-     * @Groups({"promotion:read"})
+     * @ApiSubresource()
+     * @Groups({"promo:read"})
      */
     private $referentiel;
 
-    /**
-     * @ORM\ManyToMany(targetEntity=Formateur::class, inversedBy="promotions")
-     * @ApiSubresource
-     * @Groups({"promotion:read"})
-     */
-    private $formateurs;
-
-    /**
-     * @ORM\ManyToOne(targetEntity=User::class, inversedBy="promotions")
-     * @ApiSubresource
-     * @Groups({"promotion:read"})
-     */
-    private $users;
-
-    /**
-     * @ORM\OneToMany(targetEntity=Groupes::class, mappedBy="promotions")
-     * @ApiSubresource
-     * @Groups({"promotion:read"})
-     */
-    private $groupe;
-
     public function __construct()
     {
         $this->groupes = new ArrayCollection();
-        $this->groupe = new ArrayCollection();
         $this->formateurs = new ArrayCollection();
     }
 
@@ -276,14 +244,14 @@
         return $this;
     }
 
-    public function getDateFinPrvisoire(): ?\DateTimeInterface
+    public function getDateFinProvisoire(): ?\DateTimeInterface
     {
-        return $this->dateFinPrvisoire;
+        return $this->dateFinProvisoire;
     }
 
-    public function setDateFinPrvisoire(?\DateTimeInterface $dateFinPrvisoire): self
+    public function setDateFinProvisoire(?\DateTimeInterface $dateFinPrvisoire): self
     {
-        $this->dateFinPrvisoire = $dateFinPrvisoire;
+        $this->dateFinProvisoire = $dateFinPorvisoire;
 
         return $this;
     }
@@ -324,18 +292,54 @@
         return $this;
     }
 
-    public function getReferentiel(): ?Referentiel
+    /**
+     * @return Collection|Groupes[]
+     */
+    public function getGroupes(): Collection
+    {
+        return $this->groupes;
+    }
+
+    public function addGroupe(Groupes $groupe): self
+    {
+        if (!$this->groupes->contains($groupe)) {
+            $this->groupes[] = $groupe;
+            $groupe->setPromotion($this);
+        }
+
+        return $this;
+    }
+
+    public function removeGroupe(Groupes $groupe): self
     {
-        return $this->referentiel;
+        if ($this->groupes->contains($groupe)) {
+            $this->groupes->removeElement($groupe);
+            // set the owning side to null (unless already changed)
+            if ($groupe->getPromotion() === $this) {
+                $groupe->setPromotion(null);
+            }
+        }
+
+        return $this;
     }
 
-    public function setReferentiel(?Referentiel $referentiel): self
+
+    public function getAvatar()
     {
-        $this->referentiel = $referentiel;
+         $data = stream_get_contents($this->avatar);
+         fclose($this->avatar);
+//return $this->avatar;
+      return base64_encode($data);
+    }
+
+    public function setAvatar($avatar): self
+    {
+        $this->avatar = $avatar;
 
         return $this;
     }
 
+
     /**
      * @return Collection|Formateur[]
      */
@@ -362,46 +366,19 @@
         return $this;
     }
 
-    public function getUsers(): ?User
-    {
-        return $this->users;
-    }
-
-    public function setUsers(?User $users): self
-    {
-        $this->users = $users;
-
-        return $this;
-    }
-
-    /**
-     * @return Collection|Groupes[]
-     */
-    public function getGroupe(): Collection
+    public function getReferentiel(): ?Referentiel
     {
-        return $this->groupe;
+        return $this->referentiel;
     }
 
-    public function addGroupe(Groupes $groupe): self
+    public function setReferentiel(?Referentiel $referentiel): self
     {
-        if (!$this->groupe->contains($groupe)) {
-            $this->groupe[] = $groupe;
-            $groupe->setPromotions($this);
-        }
-
-        return $this;
-    }
-
-    public function removeGroupe(Groupes $groupe): self
-    {
-        if ($this->groupe->contains($groupe)) {
-            $this->groupe->removeElement($groupe);
-            // set the owning side to null (unless already changed)
-            if ($groupe->getPromotions() === $this) {
-                $groupe->setPromotions(null);
-            }
-        }
+        $this->referentiel = $referentiel;
 
         return $this;
     }
+
+
+
+
 }
Index: src/Controller/ProfilSortieController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Controller;\n\nuse App\\Entity\\User;\nuse App\\Entity\\ProfilSortie;\nuse Doctrine\\ORM\\EntityManager;\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse App\\Repository\\ProfilSortieRepository;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Component\\Validator\\Validator\\ValidatorInterface;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\Security\\Core\\Encoder\\UserPasswordEncoderInterface;\n\nclass ProfilSortieController extends AbstractController\n{\n    private $encoder;\n    private $serializer;\n    private $validator;\n    private $em;\n\n    public function __construct(\n        UserPasswordEncoderInterface $encoder,\n        SerializerInterface $serializer,\n        ValidatorInterface $validator,\n        EntityManagerInterface $em)\n    {\n        $this->encoder=$encoder;\n        $this->serializer=$serializer;\n        $this->validator=$validator;\n        $this->em=$em;\n    }\n\n\n    /**\n     * @Route(\n     *     name=\"getProfilSortie\",\n     *     path=\"/api/admin/profilSorties\",\n     *     methods={\"GET\"},\n     *     defaults={\n     *          \"__controller\"=\"App\\Controller\\ProfilSortieController::getProfilSortie\",\n     *          \"__api_resource_class\"=ProfilSortie::class,\n     *          \"__api_collection_operation_name\"=\"get_profil_sortie\"\n     *     }\n     * )\n     */\n    public function getProfilSortie(ProfilSortieRepository $repo)\n    {\n        $user= $repo->findByArchivage(0);\n        // $user=$this->serializer->serialize($user,\"json\");\n        return $this->json($user,200);\n    }\n\n\n    /**\n     * @Route(\n     *     name=\"archive_profil\",\n     *     path=\"/api/admin/profilSorties/{id}\",\n     *     methods={\"DELETE\"},\n     *     defaults={\n     *          \"__controller\"=\"App\\Controller\\ProfilSortieController::archiveProfil\",\n     *          \"__api_resource_class\"=ProfilSortie::class,\n     *          \"__api_collection_operation_name\"=\"archive_profilSortie\"\n     *     }\n     * )\n     */\n    public function archiveProfil(ProfilSortieRepository $repo,$id)\n    {\n        $profil=$repo->find($id)\n                  ->setArchivage(1);\n        $this->em->persist($profil);\n        $this->em->flush();\n        return $this->json(true,200);\n    }\n\n\n    /**\n     * @Route(\n     *     name=\"get_profilsortie_id\",\n     *     path=\"/api/admin/profilSorties/{id}\",\n     *     methods={\"GET\"},\n     *     defaults={\n     *          \"__controller\"=\"App\\Controller\\ProfilSortieController::getOneProfilSortie\",\n     *          \"__api_resource_class\"=ProfilSortie::class,\n     *          \"__api_collection_operation_name\"=\"get_one_profilSortie\"\n     *     }\n     * )\n     */\n    public function getOneProfilSortie(ProfilSortieRepository $repo,$id)\n    {\n        $profil=$repo->find($id);\n        if($profil && !$profil->getArchivage())\n        {\n            return $this->json($profil,200);     \n        }\n        return $this->json(\"ce profil de sortie n'existe pas! \\n ou a été archivé!\",Response::HTTP_BAD_REQUEST);  \n    }\n\n\n    /**\n     * @Route(\n     *     name=\"put_profil\",\n     *     path=\"/api/admin/profilSorties/{id}\",\n     *     methods={\"PUT\"},\n     *     defaults={\n     *          \"__controller\"=\"App\\Controller\\ProfilSortieController::putOneProfilSortie\",\n     *          \"__api_resource_class\"=ProfilSortie::class,\n     *          \"__api_collection_operation_name\"=\"put_one_profilSortie\"\n     *     }\n     * )\n     */\n    public function putOneProfilSortie(Request $request, ProfilSortieRepository $repo,$id)\n    {\n        $profil=$repo->find($id);\n        if($profil && !$profil->getArchivage())\n        {\n            $pSorties =json_decode( $request->getContent(),true);\n            foreach($pSorties as $k => $ps)\n            {\n                $profil->{\"set\".ucfirst($k)}($ps);\n            }\n            $this->em->persist($profil);\n            $this->em->flush();\n            return $this->json($profil,200);     \n        }\n        return $this->json(\"ce profil de sortie n'existe pas! \\n ou a été archivé!\",Response::HTTP_BAD_REQUEST);  \n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Controller/ProfilSortieController.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/Controller/ProfilSortieController.php	(date 1597277288000)
@@ -49,11 +49,20 @@
      *     }
      * )
      */
-    public function getProfilSortie(ProfilSortieRepository $repo)
+    public function getProfilSortie(ProfilSortieRepository $repo,Request $request)
     {
-        $user= $repo->findByArchivage(0);
-        // $user=$this->serializer->serialize($user,"json");
-        return $this->json($user,200);
+        $page = (int) $request->query->get('page', 1);
+        $limit=3;
+        $offset=($page-1)*$limit;
+
+        $profils= $repo->findByArchivage(0,$limit,$offset);
+        $tab_profil=[];
+        foreach($profils as $prf)
+        {
+            $tab_profil[]=["id"=>$prf->getID(),"libelle"=>$prf->getLibele()];
+        }
+
+        return $this->json($tab_profil,200);
     }
 
 
@@ -71,11 +80,20 @@
      */
     public function archiveProfil(ProfilSortieRepository $repo,$id)
     {
-        $profil=$repo->find($id)
-                  ->setArchivage(1);
-        $this->em->persist($profil);
-        $this->em->flush();
-        return $this->json(true,200);
+        $profil=$repo->find($id);
+
+        if($profil!==null)
+        {
+            if( $profil->getArchivage() !==true)
+            {          
+                  $profil->setArchivage(1);
+                $this->em->persist($profil);
+                $this->em->flush();
+                return $this->json(true,200);
+            }
+            return $this->json("ce profil a été déjà archiver!",400);
+       }
+       return $this->json("ce profil de sortie n'existe pas!",400);
     }
 
 
Index: src/Controller/UserController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Controller;\n\nuse App\\Entity\\User;\nuse Doctrine\\ORM\\EntityManager;\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Component\\Validator\\Validator\\ValidatorInterface;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\Security\\Core\\Encoder\\UserPasswordEncoderInterface;\n\nclass UserController extends AbstractController\n{\n    private $encoder;\n    private $serializer;\n    private $validator;\n    private $em;\n\n    public function __construct(\n        UserPasswordEncoderInterface $encoder,\n        SerializerInterface $serializer,\n        ValidatorInterface $validator,\n        EntityManagerInterface $em)\n    {\n        $this->encoder=$encoder;\n        $this->serializer=$serializer;\n        $this->validator=$validator;\n        $this->em=$em;\n    }\n    /**\n     * @Route(\n     *     name=\"addUser\",\n     *     path=\"/api/addUser\",\n     *     methods={\"POST\"},\n     *     defaults={\n     *          \"__controller\"=\"App\\Controller\\UserController::add\",\n     *          \"__api_resource_class\"=User::class,\n     *          \"__api_collection_operation_name\"=\"add_user\"\n     *     }\n     * )\n     */\n    public function add(Request $request)\n    {\n        //recupéré tout les données de la requete\n        $user = $request->request->all();\n         \n        //recupération de l'image\n        $photo = $request->files->get(\"photo\");\n        \n        $user = $this->serializer->denormalize($user,\"App\\Entity\\User\",true);\n        if(!$photo)\n        {\n            \n            return new JsonResponse(\"veuillez mettre une images\",Response::HTTP_BAD_REQUEST,[],true);\n        }\n            //$base64 = base64_decode($imagedata);\n            $photoBlob = fopen($photo->getRealPath(),\"rb\");\n            \n             $user->setPhoto($photoBlob);\n\n                // // PREVISUALISATION DE L'IMAGE\n                //     $file = file_get_contents($photo);\n                //     $avatar = base64_encode($file);\n                //     $type = $photo->getMimeType();\n                //     // fclose($file);\n                //     echo \"<img src='data:$type;base64,$avatar' />\";\n                // // PREVISUALISATION DE L'IMAGE\n        \n        $errors = $this->validator->validate($user);\n        if (count($errors)){\n            $errors = $this->serializer->serialize($errors,\"json\");\n            return new JsonResponse($errors,Response::HTTP_BAD_REQUEST,[],true);\n        }\n        $password = $user->getPassword();\n       $user->setPassword($this->encoder->encodePassword($user,$password));\n       $user->setArchivage(false);\n\n        $em = $this->getDoctrine()->getManager();\n        $em->persist($user);\n        $em->flush();\n        \n        return $this->json(\"success\",201);\n    }\n    /**\n     * @Route(\n     *     name=\"getUser\",\n     *     path=\"/api/admin/users\",\n     *     methods={\"GET\"},\n     *     defaults={\n     *          \"__controller\"=\"App\\Controller\\UserController::getUsers\",\n     *          \"__api_resource_class\"=User::class,\n     *          \"__api_collection_operation_name\"=\"get_user\"\n     *     }\n     * )\n     */\n    public function getUsers(UserRepository $repo)\n    {\n        $user= $repo->findByArchivage(0);\n        // $user=$this->serializer->serialize($user,\"json\");\n        return $this->json($user,200);\n    }\n    /**\n     * @Route(\n     *     name=\"archive_user\",\n     *     path=\"/api/admin/users/{id}\",\n     *     methods={\"DELETE\"},\n     *     defaults={\n     *          \"__controller\"=\"App\\Controller\\UserController::archiveUser\",\n     *          \"__api_resource_class\"=User::class,\n     *          \"__api_collection_operation_name\"=\"archive_user\"\n     *     }\n     * )\n     */\n    public function archiveUser(UserRepository $repo,$id)\n    {\n        $user=$repo->find($id)\n                  ->setArchivage(1);\n        $this->em->persist($user);\n        $this->em->flush();\n        // $user=$this->serializer->serialize($user,\"json\");\n        return $this->json(true,200);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Controller/UserController.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/Controller/UserController.php	(date 1597277288000)
@@ -36,7 +36,7 @@
     /**
      * @Route(
      *     name="addUser",
-     *     path="/api/addUser",
+     *     path="/api/admin/users",
      *     methods={"POST"},
      *     defaults={
      *          "__controller"="App\Controller\UserController::add",
@@ -86,7 +86,8 @@
         $em->flush();
         
         return $this->json("success",201);
-    }
+     }
+
     /**
      * @Route(
      *     name="getUser",
@@ -99,12 +100,17 @@
      *     }
      * )
      */
-    public function getUsers(UserRepository $repo)
+    public function getUsers(UserRepository $repo,Request $request)
     {
-        $user= $repo->findByArchivage(0);
+        $page = (int) $request->query->get('page', 1);
+        $limit=3;
+        $offset=($page-1)*$limit;
+        $user= $repo->findByArchivage(0,$limit,$offset);
         // $user=$this->serializer->serialize($user,"json");
         return $this->json($user,200);
     }
+
+    
     /**
      * @Route(
      *     name="archive_user",
Index: src/Entity/GroupeCompetence.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Doctrine\\Common\\Collections\\Collection;\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse App\\Repository\\GroupeCompetenceRepository;\nuse ApiPlatform\\Core\\Annotation\\ApiSubresource;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\n\n/**\n * @ApiResource(\n *      collectionOperations={\n *           \"get_grpCompetence\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/admin/grpecompetences\",\n *               \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN') or is_granted('ROLE_CM'))\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          },\n *           \"get_grpCompetence_competence\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/admin/grpecompetences/competences\",\n *               \"security\"=\"is_granted('ROLE_ADMIN')\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          },\n *            \"add_grpCompetence\"={ \n *               \"method\"=\"POST\", \n *               \"path\"=\"/admin/grpecompetences\",\n *               \"security\"=\"is_granted('ROLE_ADMIN')\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          }\n *      },\n *      itemOperations={\n *           \"get_grpecompetence_id\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/admin/grpecompetences/{id}\",\n *                \"defaults\"={\"id\"=null},\n *                \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN') or is_granted('ROLE_CM'))\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *\n *            \"get_grpcompetence_id_competence\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/admin/grpecompetences/{id}/competences\",\n *                \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN') or is_granted('ROLE_CM'))\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *\n *            \"PUT\"={ \n *               \"path\"=\"/admin/grpecompetences/{id}\",\n *                \"security\"=\"is_granted('GC_EDIT',object) or is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *      },\n *       normalizationContext={\"groups\"={\"grpcompetence:read\"}},\n *       denormalizationContext={\"groups\"={\"grpcompetence:write\"}},\n *       attributes={\"pagination_enabled\"=true, \"pagination_items_per_page\"=2}\n * )\n * @ORM\\Entity(repositoryClass=GroupeCompetenceRepository::class)\n */\nclass GroupeCompetence\n{\n    /**\n     * @ORM\\Id()\n     * @ORM\\GeneratedValue()\n     * @ORM\\Column(type=\"integer\")\n     * @Groups({\"grpcompetence:read\"})\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     * @Groups({\"grpcompetence:read\", \"grpcompetence:write\"})\n     */\n    private $lidelle;\n\n    /**\n     * @ORM\\Column(type=\"text\")\n     * @Groups({\"grpcompetence:read\", \"grpcompetence:write\"})\n     */\n    private $description;\n\n    /**\n     * @ORM\\ManyToMany(targetEntity=Referentiel::class, mappedBy=\"grpCompetences\")\n     * @ApiSubresource\n     * @Groups({\"grpcompetence:read\"})\n     */\n    private $referentiels;\n\n    /**\n     * @ORM\\ManyToMany(targetEntity=Competence::class, inversedBy=\"groupeCompetences\")\n     * @ApiSubresource\n     * @Groups({\"grpcompetence:read\"})\n     */\n    private $competences;\n\n    /**\n     * @ORM\\ManyToMany(targetEntity=Tag::class, mappedBy=\"groupecompetences\")\n     */\n    private $tags;\n\n    /**\n     * @ORM\\ManyToMany(targetEntity=Tag::class, mappedBy=\"groupecompetences\")\n     */\n    private $tag;\n\n    public function __construct()\n    {\n        $this->referentiels = new ArrayCollection();\n        $this->competences = new ArrayCollection();\n        $this->tags = new ArrayCollection();\n        $this->tag = new ArrayCollection();\n    }\n\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    public function getLidelle(): ?string\n    {\n        return $this->lidelle;\n    }\n\n    public function setLidelle(string $lidelle): self\n    {\n        $this->lidelle = $lidelle;\n\n        return $this;\n    }\n\n    public function getDescription(): ?string\n    {\n        return $this->description;\n    }\n\n    public function setDescription(string $description): self\n    {\n        $this->description = $description;\n\n        return $this;\n    }\n\n    /**\n     * @return Collection|Referentiel[]\n     */\n    public function getReferentiels(): Collection\n    {\n        return $this->referentiels;\n    }\n\n    public function addReferentiel(Referentiel $referentiel): self\n    {\n        if (!$this->referentiels->contains($referentiel)) {\n            $this->referentiels[] = $referentiel;\n            $referentiel->addGrpCompetence($this);\n        }\n\n        return $this;\n    }\n\n    public function removeReferentiel(Referentiel $referentiel): self\n    {\n        if ($this->referentiels->contains($referentiel)) {\n            $this->referentiels->removeElement($referentiel);\n            $referentiel->removeGrpCompetence($this);\n        }\n\n        return $this;\n    }\n\n    /**\n     * @return Collection|Competence[]\n     */\n    public function getCompetences(): Collection\n    {\n        return $this->competences;\n    }\n\n    public function addCompetence(Competence $competence): self\n    {\n        if (!$this->competences->contains($competence)) {\n            $this->competences[] = $competence;\n        }\n\n        return $this;\n    }\n\n    public function removeCompetence(Competence $competence): self\n    {\n        if ($this->competences->contains($competence)) {\n            $this->competences->removeElement($competence);\n        }\n\n        return $this;\n    }\n\n    /**\n     * @return Collection|Tag[]\n     */\n    public function getTags(): Collection\n    {\n        return $this->tags;\n    }\n\n    public function addTag(Tag $tag): self\n    {\n        if (!$this->tags->contains($tag)) {\n            $this->tags[] = $tag;\n            $tag->addGroupecompetence($this);\n        }\n\n        return $this;\n    }\n\n    public function removeTag(Tag $tag): self\n    {\n        if ($this->tags->contains($tag)) {\n            $this->tags->removeElement($tag);\n            $tag->removeGroupecompetence($this);\n        }\n\n        return $this;\n    }\n\n    /**\n     * @return Collection|Tag[]\n     */\n    public function getTag(): Collection\n    {\n        return $this->tag;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Entity/GroupeCompetence.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/Entity/GroupeCompetence.php	(date 1597277288000)
@@ -2,6 +2,7 @@
 
 namespace App\Entity;
 
+use Symfony\Component\Validator\Constraints as Assert;
 use Doctrine\ORM\Mapping as ORM;
 use Doctrine\Common\Collections\Collection;
 use ApiPlatform\Core\Annotation\ApiResource;
@@ -50,7 +51,7 @@
  *
  *            "PUT"={ 
  *               "path"="/admin/grpecompetences/{id}",
- *                "security"="is_granted('GC_EDIT',object) or is_granted('ROLE_ADMIN')",
+ *                "security"="is_granted('GC_EDIT',object)",
  *                  "security_message"="Acces non autorisé",
  *          },
  *      },
@@ -73,12 +74,14 @@
     /**
      * @ORM\Column(type="string", length=255)
      * @Groups({"grpcompetence:read", "grpcompetence:write"})
+     * @Assert\NotBlank
      */
-    private $lidelle;
+    private $libelle;
 
     /**
      * @ORM\Column(type="text")
      * @Groups({"grpcompetence:read", "grpcompetence:write"})
+     * @Assert\NotBlank
      */
     private $description;
 
@@ -97,21 +100,14 @@
     private $competences;
 
     /**
-     * @ORM\ManyToMany(targetEntity=Tag::class, mappedBy="groupecompetences")
+     * @ORM\Column(type="boolean", options={"default":false})
      */
-    private $tags;
-
-    /**
-     * @ORM\ManyToMany(targetEntity=Tag::class, mappedBy="groupecompetences")
-     */
-    private $tag;
+    private $archivage;
 
     public function __construct()
     {
         $this->referentiels = new ArrayCollection();
         $this->competences = new ArrayCollection();
-        $this->tags = new ArrayCollection();
-        $this->tag = new ArrayCollection();
     }
 
     public function getId(): ?int
@@ -119,14 +115,14 @@
         return $this->id;
     }
 
-    public function getLidelle(): ?string
+    public function getLibelle(): ?string
     {
-        return $this->lidelle;
+        return $this->libelle;
     }
 
-    public function setLidelle(string $lidelle): self
+    public function setLibelle(string $libelle): self
     {
-        $this->lidelle = $lidelle;
+        $this->libelle = $libelle;
 
         return $this;
     }
@@ -197,39 +193,15 @@
         return $this;
     }
 
-    /**
-     * @return Collection|Tag[]
-     */
-    public function getTags(): Collection
+    public function getArchivage(): ?bool
     {
-        return $this->tags;
+        return $this->archivage;
     }
 
-    public function addTag(Tag $tag): self
+    public function setArchivage(bool $archivage): self
     {
-        if (!$this->tags->contains($tag)) {
-            $this->tags[] = $tag;
-            $tag->addGroupecompetence($this);
-        }
+        $this->archivage = $archivage;
 
         return $this;
     }
-
-    public function removeTag(Tag $tag): self
-    {
-        if ($this->tags->contains($tag)) {
-            $this->tags->removeElement($tag);
-            $tag->removeGroupecompetence($this);
-        }
-
-        return $this;
-    }
-
-    /**
-     * @return Collection|Tag[]
-     */
-    public function getTag(): Collection
-    {
-        return $this->tag;
-    }
 }
Index: src/Entity/Referentiel.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse App\\Repository\\ReferentielRepository;\nuse Doctrine\\Common\\Collections\\Collection;\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse ApiPlatform\\Core\\Annotation\\ApiSubresource;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\n\n/**\n * @ApiResource(\n *      collectionOperations={\n *           \"get_referentiels\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/admin/referentiels\",\n *               \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN') or is_granted('ROLE_CM'))\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          },\n *           \"get_referentiels_grpCompetence\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/admin/referentiels/grpecompetences\",\n *               \"security\"=\"is_granted('ROLE_ADMIN')\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          },\n *            \"add_referentiel\"={ \n *               \"method\"=\"POST\", \n *               \"path\"=\"/admin/referentiels\",\n *               \"security\"=\"is_granted('ROLE_ADMIN')\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          }\n *      },\n *      itemOperations={\n *           \"get_referentiel_id\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/admin/referentiels/{id}\",\n *                \"defaults\"={\"id\"=null},\n *                \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN') or is_granted('ROLE_CM'))\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *\n *            \"get_referentiel_id_grpcompetence\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/admin/referentiels/{id1}/gprecompetences/{id2}\",\n *                \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN') or is_granted('ROLE_CM'))\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *\n *            \"update_referentiel_id\"={ \n *               \"method\"=\"PUT\", \n *               \"path\"=\"/admin/referentiels/{id}\",\n *                \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN') or is_granted('ROLE_CM'))\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *      },\n *       normalizationContext={\"groups\"={\"referentiel:read\"}},\n *       denormalizationContext={\"groups\"={\"referentiel:write\"}},\n *       attributes={\"pagination_enabled\"=true, \"pagination_items_per_page\"=5}\n * )\n * @ORM\\Entity(repositoryClass=ReferentielRepository::class)\n */\nclass Referentiel\n{\n    /**\n     * @ORM\\Id()\n     * @ORM\\GeneratedValue()\n     * @ORM\\Column(type=\"integer\")\n     * @Groups({\"referentiel:read\"})\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     * @Groups({\"referentiel:read\", \"referentiel:write\"})\n     */\n    private $libelle;\n\n    /**\n     * @ORM\\Column(type=\"text\")\n     * @Groups({\"referentiel:read\", \"referentiel:write\"})\n     */\n    private $presentation;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     * @Groups({\"referentiel:read\", \"referentiel:write\"})\n     */\n    private $programme;\n\n    /**\n     * @ORM\\Column(type=\"text\")\n     * @Groups({\"referentiel:read\", \"referentiel:write\"})\n     */\n    private $critereAdmission;\n\n    /**\n     * @ORM\\Column(type=\"text\")\n     * @Groups({\"referentiel:read\", \"referentiel:write\"})\n     */\n    private $critereEvaluation;\n\n    /**\n     * @ORM\\OneToMany(targetEntity=Promotion::class, mappedBy=\"referentiel\")\n     * @ApiSubresource\n     * @Groups({\"referentiel:read\"})\n     */\n    private $promotions;\n\n    /**\n     * @ORM\\ManyToMany(targetEntity=GroupeCompetence::class, inversedBy=\"referentiels\")\n     * @ApiSubresource\n     * @Groups({\"referentiel:read\"})\n     */\n    private $grpCompetences;\n\n\n    public function __construct()\n    {\n        $this->promotions = new ArrayCollection();\n         $this->grpCompetences = new ArrayCollection();\n         $this->promoref = new ArrayCollection();\n    }\n\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    public function getLibelle(): ?string\n    {\n        return $this->libelle;\n    }\n\n    public function setLibelle(string $libelle): self\n    {\n        $this->libelle = $libelle;\n\n        return $this;\n    }\n\n    public function getPresentation(): ?string\n    {\n        return $this->presentation;\n    }\n\n    public function setPresentation(string $presentation): self\n    {\n        $this->presentation = $presentation;\n\n        return $this;\n    }\n\n    public function getProgramme(): ?string\n    {\n        return $this->programme;\n    }\n\n    public function setProgramme(string $programme): self\n    {\n        $this->programme = $programme;\n\n        return $this;\n    }\n\n    public function getCritereAdmission(): ?string\n    {\n        return $this->critereAdmission;\n    }\n\n    public function setCritereAdmission(string $critereAdmission): self\n    {\n        $this->critereAdmission = $critereAdmission;\n\n        return $this;\n    }\n\n    public function getCritereEvaluation(): ?string\n    {\n        return $this->critereEvaluation;\n    }\n\n    public function setCritereEvaluation(string $critereEvaluation): self\n    {\n        $this->critereEvaluation = $critereEvaluation;\n\n        return $this;\n    }\n\n    /**\n     * @return Collection|Promotion[]\n     */\n    public function getPromotions(): Collection\n    {\n        return $this->promotions;\n    }\n\n    public function addPromotion(Promotion $promotion): self\n    {\n        if (!$this->promotions->contains($promotion)) {\n            $this->promotions[] = $promotion;\n            $promotion->setReferentiel($this);\n        }\n\n        return $this;\n    }\n\n    public function removePromotion(Promotion $promotion): self\n    {\n        if ($this->promotions->contains($promotion)) {\n            $this->promotions->removeElement($promotion);\n            // set the owning side to null (unless already changed)\n            if ($promotion->getReferentiel() === $this) {\n                $promotion->setReferentiel(null);\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * @return Collection|GroupeCompetence[]\n     */\n    public function getGrpCompetences(): Collection\n    {\n        return $this->grpCompetences;\n    }\n\n    public function addGrpCompetence(GroupeCompetence $grpCompetence): self\n    {\n        if (!$this->grpCompetences->contains($grpCompetence)) {\n            $this->grpCompetences[] = $grpCompetence;\n        }\n\n        return $this;\n    }\n\n    public function removeGrpCompetence(GroupeCompetence $grpCompetence): self\n    {\n        if ($this->grpCompetences->contains($grpCompetence)) {\n            $this->grpCompetences->removeElement($grpCompetence);\n        }\n\n        return $this;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Entity/Referentiel.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/Entity/Referentiel.php	(date 1597277288000)
@@ -22,8 +22,9 @@
  *           "get_referentiels_grpCompetence"={ 
  *               "method"="GET", 
  *               "path"="/admin/referentiels/grpecompetences",
+ *                "route_name"="get_grpcompetence_competence",
  *               "security"="is_granted('ROLE_ADMIN')",
- *               "security_message"="Acces non autorisé",
+ *               "get_grpcompetence_discontinuation",
  *          },
  *            "add_referentiel"={ 
  *               "method"="POST", 
@@ -68,59 +69,65 @@
      * @ORM\GeneratedValue()
      * @ORM\Column(type="integer")
      * @Groups({"referentiel:read"})
+     * @Groups({"promo:read"})
      */
     private $id;
 
     /**
      * @ORM\Column(type="string", length=255)
      * @Groups({"referentiel:read", "referentiel:write"})
+     * @Groups({"promo:read", "promo:write"})
      */
     private $libelle;
 
     /**
      * @ORM\Column(type="text")
      * @Groups({"referentiel:read", "referentiel:write"})
+     * @Groups({"promo:read", "promo:write"})
      */
     private $presentation;
 
     /**
      * @ORM\Column(type="string", length=255)
      * @Groups({"referentiel:read", "referentiel:write"})
+     * @Groups({"promo:read", "promo:write"})
      */
     private $programme;
 
     /**
      * @ORM\Column(type="text")
      * @Groups({"referentiel:read", "referentiel:write"})
+     * @Groups({"promo:read", "promo:write"})
      */
     private $critereAdmission;
 
     /**
      * @ORM\Column(type="text")
      * @Groups({"referentiel:read", "referentiel:write"})
+     * @Groups({"promo:read", "promo:write"})
      */
     private $critereEvaluation;
 
+
     /**
      * @ORM\OneToMany(targetEntity=Promotion::class, mappedBy="referentiel")
-     * @ApiSubresource
+     * @ApiSubresource()
      * @Groups({"referentiel:read"})
      */
     private $promotions;
 
+
     /**
      * @ORM\ManyToMany(targetEntity=GroupeCompetence::class, inversedBy="referentiels")
      * @ApiSubresource
-     * @Groups({"referentiel:read"})
+     * @Groups({"referentiel:read", "referentiel:write"})
      */
     private $grpCompetences;
 
-
     public function __construct()
     {
-        $this->promotions = new ArrayCollection();
          $this->grpCompetences = new ArrayCollection();
-         $this->promoref = new ArrayCollection();
+         $this->promotions = new ArrayCollection();
     }
 
     public function getId(): ?int
@@ -185,6 +192,33 @@
     {
         $this->critereEvaluation = $critereEvaluation;
 
+        return $this;
+    }
+
+
+    /**
+     * @return Collection|GroupeCompetence[]
+     */
+    public function getGrpCompetences(): Collection
+    {
+        return $this->grpCompetences;
+    }
+
+    public function addGrpCompetence(GroupeCompetence $grpCompetence): self
+    {
+        if (!$this->grpCompetences->contains($grpCompetence)) {
+            $this->grpCompetences[] = $grpCompetence;
+        }
+
+        return $this;
+    }
+
+    public function removeGrpCompetence(GroupeCompetence $grpCompetence): self
+    {
+        if ($this->grpCompetences->contains($grpCompetence)) {
+            $this->grpCompetences->removeElement($grpCompetence);
+        }
+
         return $this;
     }
 
@@ -219,29 +253,4 @@
         return $this;
     }
 
-    /**
-     * @return Collection|GroupeCompetence[]
-     */
-    public function getGrpCompetences(): Collection
-    {
-        return $this->grpCompetences;
-    }
-
-    public function addGrpCompetence(GroupeCompetence $grpCompetence): self
-    {
-        if (!$this->grpCompetences->contains($grpCompetence)) {
-            $this->grpCompetences[] = $grpCompetence;
-        }
-
-        return $this;
-    }
-
-    public function removeGrpCompetence(GroupeCompetence $grpCompetence): self
-    {
-        if ($this->grpCompetences->contains($grpCompetence)) {
-            $this->grpCompetences->removeElement($grpCompetence);
-        }
-
-        return $this;
-    }
 }
Index: .idea/PRF_G2.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"WEB_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\">\n      <sourceFolder url=\"file://$MODULE_DIR$/spec\" isTestSource=\"true\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" packagePrefix=\"App\\\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/tests\" isTestSource=\"true\" packagePrefix=\"App\\Tests\\\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/api-platform/core\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/composer\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/doctrine/annotations\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/doctrine/cache\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/doctrine/collections\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/doctrine/common\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/doctrine/data-fixtures\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/doctrine/dbal\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/doctrine/doctrine-bundle\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/doctrine/doctrine-fixtures-bundle\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/doctrine/doctrine-migrations-bundle\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/doctrine/event-manager\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/doctrine/inflector\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/doctrine/instantiator\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/doctrine/lexer\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/doctrine/migrations\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/doctrine/orm\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/doctrine/persistence\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/doctrine/reflection\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/doctrine/sql-formatter\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/fig/link-util\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/fzaninotto/faker\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/hshn/base64-encoded-file\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/laminas/laminas-code\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/laminas/laminas-eventmanager\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/laminas/laminas-zendframework-bridge\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/lcobucci/jwt\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/lexik/jwt-authentication-bundle\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/monolog/monolog\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/namshi/jose\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/nelmio/cors-bundle\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/nikic/php-parser\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/ocramius/proxy-manager\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/phpdocumentor/reflection-common\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/phpdocumentor/reflection-docblock\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/phpdocumentor/type-resolver\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/psr/cache\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/psr/container\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/psr/event-dispatcher\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/psr/link\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/psr/log\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/asset\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/cache\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/cache-contracts\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/config\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/console\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/debug-bundle\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/dependency-injection\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/deprecation-contracts\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/doctrine-bridge\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/dotenv\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/error-handler\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/event-dispatcher\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/event-dispatcher-contracts\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/expression-language\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/filesystem\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/finder\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/flex\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/framework-bundle\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/http-foundation\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/http-kernel\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/maker-bundle\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/monolog-bridge\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/monolog-bundle\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/polyfill-intl-grapheme\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/polyfill-intl-normalizer\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/polyfill-mbstring\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/polyfill-php73\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/polyfill-php80\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/process\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/property-access\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/property-info\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/routing\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/security-bundle\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/security-core\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/security-csrf\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/security-guard\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/security-http\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/serializer\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/service-contracts\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/stopwatch\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/string\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/translation-contracts\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/twig-bridge\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/twig-bundle\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/validator\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/var-dumper\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/var-exporter\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/web-link\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/web-server-bundle\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/symfony/yaml\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/twig/twig\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/webimpress/safe-writer\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/webmozart/assert\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/vendor/willdurand/negotiation\" />\n    </content>\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/PRF_G2.iml	(revision 8768312777851918de75823999ef4b225bed3810)
+++ .idea/PRF_G2.iml	(date 1597286530733)
@@ -46,6 +46,7 @@
       <excludeFolder url="file://$MODULE_DIR$/vendor/psr/event-dispatcher" />
       <excludeFolder url="file://$MODULE_DIR$/vendor/psr/link" />
       <excludeFolder url="file://$MODULE_DIR$/vendor/psr/log" />
+      <excludeFolder url="file://$MODULE_DIR$/vendor/swiftmailer/swiftmailer" />
       <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/asset" />
       <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/cache" />
       <excludeFolder url="file://$MODULE_DIR$/vendor/symfony/cache-contracts" />
Index: src/Entity/ProfilSortie.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse App\\Repository\\ProfilSortieRepository;\nuse Doctrine\\Common\\Collections\\Collection;\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse ApiPlatform\\Core\\Annotation\\ApiSubresource;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\n\n/**\n * @ApiResource(\n *       normalizationContext={\"groups\"={\"profilSortie:read\",\"apprenant:read\"}},\n *       attributes={\"pagination_enabled\"=true, \"pagination_items_per_page\"=2}\n * )\n * @ORM\\Entity(repositoryClass=ProfilSortieRepository::class)\n */\nclass ProfilSortie\n{\n    /**\n     * @ORM\\Id()\n     * @ORM\\GeneratedValue()\n     * @ORM\\Column(type=\"integer\")\n     * @Groups({\"apprenant:read\", \"profilSortie:read\"})\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     * @Groups({\"apprenant:read\", \"profilSortie:read\"})\n     */\n    private $libele;\n\n    /**\n     * @ORM\\OneToMany(targetEntity=Apprenant::class, mappedBy=\"profilSortie\")\n     * @ApiSubresource\n     * @Groups({\"profilSortie:read\"})\n     */\n    private $apprenants;\n\n    /**\n     * @ORM\\Column(type=\"boolean\", options={\"default\":true})\n     */\n    private $archivage;\n\n    public function __construct()\n    {\n        $this->apprenants = new ArrayCollection();\n    }\n\n   \n    \n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    public function getLibele(): ?string\n    {\n        return $this->libele;\n    }\n\n    public function setLibele(string $libele): self\n    {\n        $this->libele = $libele;\n\n        return $this;\n    }\n    /**\n     * @return Collection|Apprenant[]\n     */\n    public function getApprenants(): Collection\n    {\n        return $this->apprenants;\n    }\n\n    public function addApprenant(Apprenant $apprenant): self\n    {\n        if (!$this->apprenants->contains($apprenant)) {\n            $this->apprenants[] = $apprenant;\n            $apprenant->setProfilSortie($this);\n        }\n\n        return $this;\n    }\n\n    public function removeApprenant(Apprenant $apprenant): self\n    {\n        if ($this->apprenants->contains($apprenant)) {\n            $this->apprenants->removeElement($apprenant);\n            // set the owning side to null (unless already changed)\n            if ($apprenant->getProfilSortie() === $this) {\n                $apprenant->setProfilSortie(null);\n            }\n        }\n\n        return $this;\n    }\n\n    public function getArchivage(): ?bool\n    {\n        return $this->archivage;\n    }\n\n    public function setArchivage(bool $archivage): self\n    {\n        $this->archivage = $archivage;\n\n        return $this;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Entity/ProfilSortie.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/Entity/ProfilSortie.php	(date 1597277288000)
@@ -2,6 +2,7 @@
 
 namespace App\Entity;
 
+use Symfony\Component\Validator\Constraints as Assert;
 use Doctrine\ORM\Mapping as ORM;
 use App\Repository\ProfilSortieRepository;
 use Doctrine\Common\Collections\Collection;
@@ -30,6 +31,9 @@
     /**
      * @ORM\Column(type="string", length=255)
      * @Groups({"apprenant:read", "profilSortie:read"})
+     * @Groups({"groupe:read"})
+     * @Groups({"promo:read"})
+     * @Assert\NotBlank
      */
     private $libele;
 
@@ -41,7 +45,7 @@
     private $apprenants;
 
     /**
-     * @ORM\Column(type="boolean", options={"default":true})
+     * @ORM\Column(type="boolean", options={"default":false})
      */
     private $archivage;
 
@@ -66,6 +70,17 @@
     {
         $this->libele = $libele;
 
+        return $this;
+    }
+    public function getArchivage(): ?bool
+    {
+        return $this->archivage;
+    }
+
+    public function setArchivage(bool $archivage): self
+    {
+        $this->archivage = $archivage;
+
         return $this;
     }
     /**
@@ -99,16 +114,5 @@
         return $this;
     }
 
-    public function getArchivage(): ?bool
-    {
-        return $this->archivage;
-    }
-
-    public function setArchivage(bool $archivage): self
-    {
-        $this->archivage = $archivage;
-
-        return $this;
-    }
 
 }
Index: src/Entity/Apprenant.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Entity;\n\nuse App\\Entity\\User;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse App\\Repository\\ApprenantRepository;\nuse Doctrine\\Common\\Collections\\Collection;\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse ApiPlatform\\Core\\Annotation\\ApiSubresource;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\ORM\\Mapping\\JoinColumn;\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\n\n/**\n * @ApiResource(\n *      collectionOperations={\n *           \"get_apprenants\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/apprenants\",\n *               \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN') or is_granted('ROLE_CM'))\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          },\n *            \"add_apprenant\"={ \n *               \"method\"=\"POST\", \n *               \"path\"=\"/apprenants\",\n *               \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN'))\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          }\n *      },\n *      itemOperations={\n *           \"get_apprenants_id\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/apprenants/{id}\",\n *                \"defaults\"={\"id\"=null},\n *                \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN') or is_granted('ROLE_APPRENANT') or is_granted('ROLE_CM'))\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *\n *            \"modifier_apprenants_id\"={ \n *               \"method\"=\"PUT\", \n *               \"path\"=\"/apprenants/{id}\",\n *                \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN') or is_granted('ROLE_APPRENANT'))\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *\n *            \"archiver_apprenants_id\"={ \n *               \"method\"=\"DELETE\", \n *               \"path\"=\"/apprenants/{id}\",\n *                \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN'))\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *      },\n *       normalizationContext={\"groups\"={\"apprenant:read\",\"user:read\"}},\n *       denormalizationContext={\"groups\"={\"apprenant:write\",\"user:write\"}}\n * )\n * @ORM\\Entity(repositoryClass=ApprenantRepository::class)\n */\nclass Apprenant extends User\n{\n    /**\n     * @ORM\\Id()\n     * @ORM\\GeneratedValue()\n     * @ORM\\Column(type=\"integer\")\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=30)\n     * @Groups({\"apprenant:read\", \"apprenant:write\"})\n     */\n    private $genre;\n\n    /**\n     * @ORM\\Column(type=\"text\")\n     * @Groups({\"apprenant:read\", \"apprenant:write\"})\n     */\n    private $adresse;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=50)\n     * @Groups({\"apprenant:read\", \"apprenant:write\"})\n     */\n    private $telephone;\n\n    /**\n     * @ORM\\ManyToOne(targetEntity=ProfilSortie::class, inversedBy=\"apprenants\")\n     * @Groups({\"apprenant:read\"})\n     *  @ApiSubresource\n     */\n    private $profilSortie;\n\n    /**\n     * @ORM\\ManyToMany(targetEntity=Groupes::class, mappedBy=\"apprenants\")\n     */\n    private $groupe;\n\n    public function __construct()\n    {\n        parent::__construct();\n        $this->groupe = new ArrayCollection();\n    }\n\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    public function getGenre(): ?string\n    {\n        return $this->genre;\n    }\n\n    public function setGenre(string $genre): self\n    {\n        $this->genre = $genre;\n\n        return $this;\n    }\n\n    public function getAdresse(): ?string\n    {\n        return $this->adresse;\n    }\n\n    public function setAdresse(string $adresse): self\n    {\n        $this->adresse = $adresse;\n\n        return $this;\n    }\n\n    public function getTelephone(): ?string\n    {\n        return $this->telephone;\n    }\n\n    public function setTelephone(string $telephone): self\n    {\n        $this->telephone = $telephone;\n\n        return $this;\n    }\n\n    public function getProfilSortie(): ?ProfilSortie\n    {\n        return $this->profilSortie;\n    }\n\n    public function setProfilSortie(?ProfilSortie $profilSortie): self\n    {\n        $this->profilSortie = $profilSortie;\n\n        return $this;\n    }\n\n    /**\n     * @return Collection|Groupes[]\n     */\n    public function getGroupe(): Collection\n    {\n        return $this->groupe;\n    }\n\n    public function addGroupe(Groupes $groupe): self\n    {\n        if (!$this->groupe->contains($groupe)) {\n            $this->groupe[] = $groupe;\n            $groupe->addApprenant($this);\n        }\n\n        return $this;\n    }\n\n    public function removeGroupe(Groupes $groupe): self\n    {\n        if ($this->groupe->contains($groupe)) {\n            $this->groupe->removeElement($groupe);\n            $groupe->removeApprenant($this);\n        }\n\n        return $this;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Entity/Apprenant.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/Entity/Apprenant.php	(date 1597277288000)
@@ -9,7 +9,6 @@
 use ApiPlatform\Core\Annotation\ApiResource;
 use ApiPlatform\Core\Annotation\ApiSubresource;
 use Doctrine\Common\Collections\ArrayCollection;
-use Doctrine\ORM\Mapping\JoinColumn;
 use Symfony\Component\Serializer\Annotation\Groups;
 
 /**
@@ -67,38 +66,51 @@
 
     /**
      * @ORM\Column(type="string", length=30)
-     * @Groups({"apprenant:read", "apprenant:write"})
+     * @Groups({"apprenant:read"})
+     * @Groups({"groupe:read"})
+     * @Groups({"promo:read"})
+     * @Groups({"apprenant:read", "apprenant:write","promo:read"})
      */
     private $genre;
 
     /**
      * @ORM\Column(type="text")
-     * @Groups({"apprenant:read", "apprenant:write"})
+     * @Groups({"apprenant:read"})
+     * @Groups({"groupe:read"})
+     * @Groups({"promo:read"})
+     * @Groups({"apprenant:read", "apprenant:write","promo:read"})
      */
     private $adresse;
 
     /**
      * @ORM\Column(type="string", length=50)
-     * @Groups({"apprenant:read", "apprenant:write"})
+     * @Groups({"apprenant:read"})
+     * @Groups({"groupe:read"})
+     * @Groups({"promo:read"})
+     * @Groups({"apprenant:read", "apprenant:write", "promo:read"})
      */
     private $telephone;
 
     /**
      * @ORM\ManyToOne(targetEntity=ProfilSortie::class, inversedBy="apprenants")
-     * @Groups({"apprenant:read"})
-     *  @ApiSubresource
+     *  @ApiSubresource()
      */
     private $profilSortie;
 
     /**
-     * @ORM\ManyToMany(targetEntity=Groupes::class, mappedBy="apprenants")
+     * @ORM\ManyToMany(targetEntity=Groupes::class, inversedBy="apprenants")
      */
-    private $groupe;
+    private $groupes;
+
+    /**
+     * @ORM\Column(type="string", length=50,options={"default" : "attente"})
+     * @Groups({"apprenant:read", "apprenant:write", "groupe:read"})
+     */
+    private $statut;
 
     public function __construct()
     {
-        parent::__construct();
-        $this->groupe = new ArrayCollection();
+        $this->groupes = new ArrayCollection();
     }
 
     public function getId(): ?int
@@ -157,16 +169,15 @@
     /**
      * @return Collection|Groupes[]
      */
-    public function getGroupe(): Collection
+    public function getGroupes(): Collection
     {
-        return $this->groupe;
+        return $this->groupes;
     }
 
     public function addGroupe(Groupes $groupe): self
     {
-        if (!$this->groupe->contains($groupe)) {
-            $this->groupe[] = $groupe;
-            $groupe->addApprenant($this);
+        if (!$this->groupes->contains($groupe)) {
+            $this->groupes[] = $groupe;
         }
 
         return $this;
@@ -174,12 +185,22 @@
 
     public function removeGroupe(Groupes $groupe): self
     {
-        if ($this->groupe->contains($groupe)) {
-            $this->groupe->removeElement($groupe);
-            $groupe->removeApprenant($this);
+        if ($this->groupes->contains($groupe)) {
+            $this->groupes->removeElement($groupe);
         }
+
+        return $this;
+    }
+
+    public function getStatut(): ?string
+    {
+        return $this->statut;
+    }
+
+    public function setStatut(string $statut): self
+    {
+        $this->statut = $statut;
 
         return $this;
     }
-
 }
Index: src/Entity/Competence.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse App\\Repository\\CompetenceRepository;\nuse Doctrine\\Common\\Collections\\Collection;\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse ApiPlatform\\Core\\Annotation\\ApiSubresource;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\n\n/**\n * @ApiResource(\n *      collectionOperations={\n *           \"get_Competences\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/admin/competences\",\n *               \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN') or is_granted('ROLE_CM'))\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          },\n *            \"add_competence\"={ \n *               \"method\"=\"POST\", \n *               \"path\"=\"/admin/competences\",\n *               \"security\"=\"is_granted('ROLE_ADMIN')\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          }\n *      },\n *      itemOperations={\n *           \"get_competence_id\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/admin/competences/{id}\",\n *                \"defaults\"={\"id\"=null},\n *                \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN') or is_granted('ROLE_CM'))\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *\n *            \"update_competence_id\"={ \n *               \"method\"=\"PUT\", \n *               \"path\"=\"/admin/competences/{id}\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *      },\n *       normalizationContext={\"groups\"={\"competence:read\"}},\n *       denormalizationContext={\"groups\"={\"competence:write\"}},\n *       attributes={\"pagination_enabled\"=true, \"pagination_items_per_page\"=5}\n * )\n * @ORM\\Entity(repositoryClass=CompetenceRepository::class)\n */\nclass Competence\n{\n    /**\n     * @ORM\\Id()\n     * @ORM\\GeneratedValue()\n     * @ORM\\Column(type=\"integer\")\n     * @Groups({\"competence:read\"})\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=100)\n     * @Groups({\"competence:read\", \"competence:write\"})\n     */\n    private $libelle;\n\n    /**\n     * @ORM\\ManyToMany(targetEntity=GroupeCompetence::class, mappedBy=\"competences\")\n     */\n    private $groupeCompetences;\n\n    /**\n     * @ORM\\Column(type=\"text\")\n     */\n    private $descriptif;\n\n    /**\n     * @ORM\\OneToMany(targetEntity=Niveau::class, mappedBy=\"competence\")\n     */\n    private $niveaux;\n\n    public function __construct()\n    {\n        $this->groupeCompetences = new ArrayCollection();\n        $this->niveaux = new ArrayCollection();\n    }\n\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    public function getLibelle(): ?string\n    {\n        return $this->libelle;\n    }\n\n    public function setLibelle(string $libelle): self\n    {\n        $this->libelle = $libelle;\n\n        return $this;\n    }\n\n    /**\n     * @return Collection|GroupeCompetence[]\n     */\n    public function getGroupeCompetences(): Collection\n    {\n        return $this->groupeCompetences;\n    }\n\n    public function addGroupeCompetence(GroupeCompetence $groupeCompetence): self\n    {\n        if (!$this->groupeCompetences->contains($groupeCompetence)) {\n            $this->groupeCompetences[] = $groupeCompetence;\n            $groupeCompetence->addCompetence($this);\n        }\n\n        return $this;\n    }\n\n    public function removeGroupeCompetence(GroupeCompetence $groupeCompetence): self\n    {\n        if ($this->groupeCompetences->contains($groupeCompetence)) {\n            $this->groupeCompetences->removeElement($groupeCompetence);\n            $groupeCompetence->removeCompetence($this);\n        }\n\n        return $this;\n    }\n\n    public function getDescriptif(): ?string\n    {\n        return $this->descriptif;\n    }\n\n    public function setDescriptif(string $descriptif): self\n    {\n        $this->descriptif = $descriptif;\n\n        return $this;\n    }\n\n    /**\n     * @return Collection|Niveau[]\n     */\n    public function getNiveaux(): Collection\n    {\n        return $this->niveaux;\n    }\n\n    public function addNiveau(Niveau $niveau): self\n    {\n        if (!$this->niveaux->contains($niveau)) {\n            $this->niveaux[] = $niveau;\n            $niveau->setCompetence($this);\n        }\n\n        return $this;\n    }\n\n    public function removeNiveau(Niveau $niveau): self\n    {\n        if ($this->niveaux->contains($niveau)) {\n            $this->niveaux->removeElement($niveau);\n            // set the owning side to null (unless already changed)\n            if ($niveau->getCompetence() === $this) {\n                $niveau->setCompetence(null);\n            }\n        }\n\n        return $this;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Entity/Competence.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/Entity/Competence.php	(date 1597277288000)
@@ -69,6 +69,13 @@
      */
     private $groupeCompetences;
 
+    // /**
+    //  * @ORM\ManyToOne(targetEntity=Niveau::class, inversedBy="competences")
+    //  * @ApiSubresource
+    //  * @Groups({"competence:read"})
+    //  */
+    // private $niveau;
+
     /**
      * @ORM\Column(type="text")
      */
@@ -130,6 +137,18 @@
         return $this;
     }
 
+    // public function getNiveau(): ?Niveau
+    // {
+    //     return $this->niveau;
+    // }
+
+    // public function setNiveau(?Niveau $niveau): self
+    // {
+    //     $this->niveau = $niveau;
+
+    //     return $this;
+    // }
+
     public function getDescriptif(): ?string
     {
         return $this->descriptif;
@@ -172,5 +191,4 @@
 
         return $this;
     }
-
 }
Index: src/DataFixtures/CompetenceFixtures.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\Competence;\nuse App\\Entity\\Groupes;\nuse App\\Entity\\GroupeTag;\nuse App\\Entity\\Promotion;\nuse App\\Entity\\Referentiel;\nuse Faker\\Factory;\nuse App\\Entity\\GroupeCompetence;\nuse App\\Entity\\Niveau;\nuse App\\Entity\\Tag;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Common\\Persistence\\ObjectManager;\nuse phpDocumentor\\Reflection\\DocBlock\\Description;\nuse PhpParser\\Builder\\Class_;\n\n\nclass CompetenceFixtures extends Fixture\n{\n    private $encoder;\n    private $profilRepository;\n    public function load(ObjectManager $manager)\n    {\n        $fake = Factory::create('fr-FR');\n\n        //groupeCompetence\n        $groupeCompentences=[\"Développer le back-end d’une application web\",\"Envoyer des emails automatiques\",\"Développer les composants d’accès aux données\"];\n        $competences=[\"Créer une base de données\",\"Validation serveur et client\",\"generer un token\"];\n        $tags=[\"php\",\"javascript\",\"symfony\",\"jqery\"];\n        $groupedaction=[\n            \"A partir d'un schéma\n                    physique de données et\n                    dans le contexte d'un\n                    besoin client décrit créer\n                    une base de données sur\n                    un SGBD désigné\",\n            \"Creer un formulaire d'inscription\n                     generique selon \n                    les besoins de l'utilisteur \",\n            \"Creer une application qui permet \n                    de sauvegarder des donnees securise \n                    avec avec email et un motdepasse\",\n        ];\n        $Criteredevaluation=[\n            \"La BD est créée à l'aide\n                        d'un script sans erreur et\n                        les données sont\n                        insérées à l'aide d'un\n                        script sans erreur\",\n            \"Les donnees serons envoyées \n                        par ajax et bien valider\",\n\n        ];\n\n        $niveau=['Niveau_1','Niveau_2','Niveau_3'];\n//groupe\n\n        $tab_grpCompetence=[];\n        $tab_referentiel=[];\n        foreach($competences as $value){\n            $groupeC=new GroupeCompetence();\n            $comp=new Competence();\n            foreach ($niveau as $key => $niv){\n                $niveau=new Niveau();\n                $niveau->setLibelle($niv)\n                    ->setCritereEvaluation($fake->randomElement($Criteredevaluation))\n                    ->setGroupeAction($fake->randomElement($groupedaction))\n                    ->setCompetence($comp);\n                $manager->persist($niveau);\n            }\n            $groupeC->setLidelle($fake->unique()->randomElement($groupeCompentences))\n                    ->setDescription('Description'.$key)\n                    ->addCompetence($comp);\n            $tab_grpCompetence[]=$groupeC;\n            $manager->persist($groupeC);\n\n            $comp->setLibelle($fake->unique()->randomElement($competences))\n                ->setDescriptif('Descriptif'.$key)\n                ->addGroupeCompetence($groupeC);\n            $manager->persist($comp);\n\n        }\n        $manager ->flush();\n        foreach ($tags as $key => $val){\n            $t=new Tag();\n            $groupetag= new GroupeTag();\n            $t->setLibelle($val)\n                ->setDescription('Description'.$key)\n                ->addGroupeCompetence($groupeC)\n                ->addGroupeTag($groupetag);\n            $manager->persist($t);\n            $groupetag->setLibelle($fake->unique()->randomElement($tags))\n                ->addTag($t);\n            $manager->persist($groupetag);\n        }\n        $manager ->flush();\n        for($i=1;$i<=2;$i++)\n        {\n            $referenciel = new Referentiel();\n\n            $referenciel->setCritereAdmission('critere d\\'admission '.$i)\n                ->setCritereEvaluation('critere evaluation '.$i)\n                ->setLibelle('referentiel no'.$i)\n                ->setPresentation($fake->text)\n                ->setProgramme('programme '.$i);\n            for($j=0;$j<2;$j++)\n            {\n                $referenciel->addGrpCompetence($fake->randomElement($tab_grpCompetence));\n            }\n            $tab_competence[]=$referenciel;\n            $manager->persist($referenciel);\n        }\n        $manager ->flush();\n\n        $tab_promo=[];\n        for($i=1 ; $i<=2 ; $i++)\n        {\n            $promo=new Promotion();\n            $promo->setDescription($fake->text)\n                ->setFabrique(\"fabrique 1\")\n                ->setLangue('français')\n                ->setLieu('lieu1')\n                ->setStatus(\"encours\")\n                ->setReferentiel($fake->randomElement($tab_referentiel))\n                ->setTitre('promo '.$i);\n\n            $tab_promo[]=$promo;\n            $manager->persist($promo);\n        }\n\n        //insertion de grpupes!\n        for($i=1; $i<=2 ; $i++)\n        {\n            $group=new Groupes();\n            $group->setNom(\"group principale \".$i);\n            $group->setStatut($fake->randomElement(['encours','ferme']));\n            $group->setType($fake->randomElement(['binome','filerouge','general']));\n            $group->setPromotions($fake->randomElement($tab_promo));\n\n            for($j=1;$j<=2;$j++)\n            {\n                $group->addApprenant($this->getReference(AppFixtures::APPRENANTS));\n            }\n            $manager->persist($group);\n\n        }\n        $manager->flush();\n\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/DataFixtures/CompetenceFixtures.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/DataFixtures/CompetenceFixtures.php	(date 1597277288000)
@@ -2,152 +2,196 @@
 
 namespace App\DataFixtures;
 
-use App\Entity\Competence;
+use Faker\Factory;
+use App\Entity\User;
+use App\Entity\Niveau;
+use App\Entity\Profil;
 use App\Entity\Groupes;
-use App\Entity\GroupeTag;
+use App\Entity\Apprenant;
+use App\Entity\Formateur;
 use App\Entity\Promotion;
+use App\Entity\Competence;
 use App\Entity\Referentiel;
-use Faker\Factory;
+use App\Entity\ProfilSortie;
 use App\Entity\GroupeCompetence;
-use App\Entity\Niveau;
-use App\Entity\Tag;
+use App\DataFixtures\AppFixtures;
+use App\Repository\ApprenantRepository;
+use App\Repository\FormateurRepository;
 use Doctrine\Bundle\FixturesBundle\Fixture;
 use Doctrine\Common\Persistence\ObjectManager;
-use phpDocumentor\Reflection\DocBlock\Description;
-use PhpParser\Builder\Class_;
+use Doctrine\Common\DataFixtures\DependentFixtureInterface;
+use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
+
+class CompetenceFixtures extends Fixture implements DependentFixtureInterface
+{
 
+    protected $apprenantRepo;
+    protected $formateurRepo;
 
-class CompetenceFixtures extends Fixture
+    public function __construct(ApprenantRepository $apprenantRepo,FormateurRepository $formateurRepo)
+    {
+            $this->apprenantRepo= $apprenantRepo;
+            $this->formateurRepo=$formateurRepo;
+     }
+    
+public function getDependencies()
 {
-    private $encoder;
-    private $profilRepository;
+    return array(
+        AppFixtures::class,
+    );
+}
+
     public function load(ObjectManager $manager)
     {
         $fake = Factory::create('fr-FR');
-
-        //groupeCompetence
-        $groupeCompentences=["Développer le back-end d’une application web","Envoyer des emails automatiques","Développer les composants d’accès aux données"];
-        $competences=["Créer une base de données","Validation serveur et client","generer un token"];
-        $tags=["php","javascript","symfony","jqery"];
-        $groupedaction=[
-            "A partir d'un schéma
-                    physique de données et
-                    dans le contexte d'un
-                    besoin client décrit créer
-                    une base de données sur
-                    un SGBD désigné",
-            "Creer un formulaire d'inscription
-                     generique selon 
-                    les besoins de l'utilisteur ",
-            "Creer une application qui permet 
-                    de sauvegarder des donnees securise 
-                    avec avec email et un motdepasse",
-        ];
-        $Criteredevaluation=[
-            "La BD est créée à l'aide
-                        d'un script sans erreur et
-                        les données sont
-                        insérées à l'aide d'un
-                        script sans erreur",
-            "Les donnees serons envoyées 
-                        par ajax et bien valider",
+        $tab_niveau=[];
+    //     $tab_apprenant=$this->getReference(AppFixtures::APPRENANTS);
+    //    $tab_formateur=$this->getReference(AppFixtures::FORMATEURS);
 
-        ];
-
-        $niveau=['Niveau_1','Niveau_2','Niveau_3'];
-//groupe
-
-        $tab_grpCompetence=[];
-        $tab_referentiel=[];
-        foreach($competences as $value){
-            $groupeC=new GroupeCompetence();
-            $comp=new Competence();
-            foreach ($niveau as $key => $niv){
+        $tab_competence=[];
+        for($i=1; $i<=10;$i++)
+        {
+            $competence=new Competence();
+            $competence->setLibelle('libelle_'.$i)
+            ->setDescriptif($fake->text);
+          //  ->setNiveau($fake->randomElement($tab_niveau));
+            $manager->persist($competence);
+            //ajout des niveaux de compétences
+            for($j=1;$j<=3;$j++)
+            {
                 $niveau=new Niveau();
-                $niveau->setLibelle($niv)
-                    ->setCritereEvaluation($fake->randomElement($Criteredevaluation))
-                    ->setGroupeAction($fake->randomElement($groupedaction))
-                    ->setCompetence($comp);
+                $niveau->setLibelle('niveau '.$j);
+                $niveau->setCritereEvaluation('competentence '.$i.'critere_evaluation '.$j);
+                $niveau->setGroupeAction('competentence '.$i.'groupe action '.$j);
+                $niveau->setCompetence($competence);
                 $manager->persist($niveau);
             }
-            $groupeC->setLidelle($fake->unique()->randomElement($groupeCompentences))
-                    ->setDescription('Description'.$key)
-                    ->addCompetence($comp);
-            $tab_grpCompetence[]=$groupeC;
-            $manager->persist($groupeC);
 
-            $comp->setLibelle($fake->unique()->randomElement($competences))
-                ->setDescriptif('Descriptif'.$key)
-                ->addGroupeCompetence($groupeC);
-            $manager->persist($comp);
-
+            $tab_competence[]=$competence;
         }
-        $manager ->flush();
-        foreach ($tags as $key => $val){
-            $t=new Tag();
-            $groupetag= new GroupeTag();
-            $t->setLibelle($val)
-                ->setDescription('Description'.$key)
-                ->addGroupeCompetence($groupeC)
-                ->addGroupeTag($groupetag);
-            $manager->persist($t);
-            $groupetag->setLibelle($fake->unique()->randomElement($tags))
-                ->addTag($t);
-            $manager->persist($groupetag);
+        $manager->flush();
+
+        $tab_grpCompetence=[];
+        for($j=0 ; $j < 3;$j++)
+        {
+            $grpc=new GroupeCompetence();
+            $grpc->setLidelle($fake->realText($maxNBChars = 50, $indexSize = 2 ));
+            $grpc->setDescription($fake->text);
+            for($i=1;$i<=3;$i++)
+            {
+                 $grpc->addCompetence($fake->unique()->randomElement($tab_competence));
+            }
+            $tab_grpCompetence[]=$grpc;
+            $manager->persist($grpc);
         }
-        $manager ->flush();
+        $manager->flush();
+        
+        $tab_referentiel=[];
         for($i=1;$i<=2;$i++)
         {
             $referenciel = new Referentiel();
 
             $referenciel->setCritereAdmission('critere d\'admission '.$i)
-                ->setCritereEvaluation('critere evaluation '.$i)
-                ->setLibelle('referentiel no'.$i)
-                ->setPresentation($fake->text)
-                ->setProgramme('programme '.$i);
-            for($j=0;$j<2;$j++)
-            {
-                $referenciel->addGrpCompetence($fake->randomElement($tab_grpCompetence));
-            }
-            $tab_competence[]=$referenciel;
+                         ->setCritereEvaluation('critere evaluation '.$i)
+                         ->setLibelle('referentiel no'.$i)
+                         ->setPresentation($fake->text)
+                         ->setProgramme('programme '.$i);
+                         for($j=0;$j<2;$j++)
+                         {
+                            $referenciel->addGrpCompetence($fake->randomElement($tab_grpCompetence));
+                         }
+             $tab_referentiel[]=$referenciel;
             $manager->persist($referenciel);
         }
-        $manager ->flush();
+
+      $manager->flush();
+      //-----------------------------------//
+      //récupération de tout les apprrenant //
+      //-----------------------------------//
+    $apprenants=$this->apprenantRepo->findAll(); 
+    $tab_apprenant=[];
+    foreach($apprenants as $app)
+    {
+        $tab_apprenant[]=$app;
+    }
+        //-----------------------------------//
+        //récupération de tout les formateurs //
+        //-----------------------------------//
+      $formateurs=$this->formateurRepo->findAll(); 
+      $tab_formateurs=[];
+      foreach($formateurs as $for)
+      {
+          $tab_formateur[]=$for;
+      }
+
+        //insertion de grpupes!
+        $tab_group=[];
+        for($i=1; $i<=5 ; $i++)
+        {
+            $group=new Groupes();
+            $group->setNom("group ".$i);
+            $group->setStatut($fake->randomElement(['encours','ferme']));
+            $group->setType($fake->randomElement(['binome','filerouge']));
+            // $group->setPromotion($fake->randomElement($tab_promo));
+            
+            for($j=1;$j<=10;$j++)
+            {
+                $group->addApprenant($fake->unique()->randomElement($tab_apprenant));
+            }
+
+            for($j=1;$j<=2;$j++)
+            {
+               $group->addFormateur($fake->unique()->randomElement($tab_formateur));
+            }
+
+            $tab_group[] = $group;
+
+            $manager->persist($group);
+  
+        }
 
-        $tab_promo=[];
-        for($i=1 ; $i<=2 ; $i++)
-        {
-            $promo=new Promotion();
-            $promo->setDescription($fake->text)
-                ->setFabrique("fabrique 1")
-                ->setLangue('français')
-                ->setLieu('lieu1')
-                ->setStatus("encours")
-                ->setReferentiel($fake->randomElement($tab_referentiel))
-                ->setTitre('promo '.$i);
+      $tab_promo=[];
+      for($i=1 ; $i<=3 ; $i++)
+      {
+          $promo=new Promotion();
+          $promo->setDescription($fake->text)
+          ->setFabrique($fake->randomElement(['Sonatel Académie','Simplon']))
+          ->setLangue($fake->randomElement(['anglais','france']))
+          ->setLieu('lieu1')
+          ->setStatus($fake->randomElement(['encours','ferme','attente']))
+          ->setReferentiel($fake->randomElement($tab_referentiel))
+          ->setTitre('promo '.$i);
+          
+          //ajouter un groupe principal au promo!
+                $group_princ=new Groupes();
+                $group_princ->setNom("groupe principale promo ".$i)
+                            ->setStatut($fake->randomElement(['encours','ferme','attente']))
+                            ->setType('groupe principale');
+                            $manager->persist($group_princ);
+            
+                for($j=1;$j<=10;$j++)
+                {
+                    $group_princ->addApprenant($fake->unique()->randomElement($tab_apprenant));
+                }
+    
+                for($j=1;$j<=2;$j++)
+                {
+                    $group_princ->addFormateur($fake->unique()->randomElement($tab_formateur));
+                }
+            $promo->addGroupe($group_princ);
+            for($k=1;$k<=2;$k++)
+            {
+                $promo->addGroupe($fake->randomElement($tab_group));
+                $promo->addFormateur($fake->unique()->randomElement($tab_formateur));
+            }
 
-            $tab_promo[]=$promo;
-            $manager->persist($promo);
-        }
-
-        //insertion de grpupes!
-        for($i=1; $i<=2 ; $i++)
-        {
-            $group=new Groupes();
-            $group->setNom("group principale ".$i);
-            $group->setStatut($fake->randomElement(['encours','ferme']));
-            $group->setType($fake->randomElement(['binome','filerouge','general']));
-            $group->setPromotions($fake->randomElement($tab_promo));
+          //$tab_promo[]=$promo;
+          $manager->persist($promo);
+      }
+//recuperations des apprenants!
 
-            for($j=1;$j<=2;$j++)
-            {
-                $group->addApprenant($this->getReference(AppFixtures::APPRENANTS));
-            }
-            $manager->persist($group);
-
-        }
-        $manager->flush();
-
+      $manager->flush();
+        
     }
-
+    
 }
\ No newline at end of file
Index: src/Entity/Profil.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse App\\Repository\\ProfilRepository;\nuse Doctrine\\Common\\Collections\\Collection;\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse ApiPlatform\\Core\\Annotation\\ApiSubresource;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\n\n/**\n * @ORM\\Entity(repositoryClass=ProfilRepository::class)\n * \n * @ApiResource(\n *      collectionOperations={\n *           \"get_admin_profils\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/admin/profils\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\"\n *          },\n * \n *            \"get_admin_profils_users\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/admin/profils/{id}/users\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\"\n *          },\n *            \"create_profil\"={ \n *               \"method\"=\"POST\", \n *               \"path\"=\"/admin/profils\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\"\n *          }\n *      },\n *      itemOperations={\n *           \"get_admin_profils_id\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/admin/profils/{id}\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\"\n *          },\n * \n *            \"put_admin_profils_id\"={ \n *               \"method\"=\"PUT\", \n *               \"path\"=\"/admin/profils/{id}\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *            \"delete_profil\"={ \n *               \"method\"=\"DELETE\", \n *               \"path\"=\"/admin/profils/{id}\",\n *                \"controller\"=\"App\\Controller\\ProfilArchiveController\",\n *                \"security\"=\"is_granted('ROLE_ADMIN')\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *                  \"swagger_context\"={\n *                                          \"summary\"=\"archive un profil\",\n *                                          \"description\"=\"Ne supprime pas un profil mais il change le status qui nous sert de corbeille\",\n *                                      }\n *          },\n *      },\n *      normalizationContext={\"groups\"={\"profil:read\"}},\n * )\n */\nclass Profil\n{\n    /**\n     * @ORM\\Id()\n     * @ORM\\GeneratedValue()\n     * @ORM\\Column(type=\"integer\")\n     * @Groups({\"profil:read\", \"user:read\"})\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     * @Groups({\"profil:read\", \"user:read\"})\n     */\n    private $libelle;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     * @Groups({\"profil:read\", \"user:read\"})\n     */\n    private $abbr;\n\n    /**\n     * @ORM\\OneToMany(targetEntity=User::class, mappedBy=\"profil\")\n     * @ApiSubresource\n     * @Groups({\"profil:read\"})\n     */\n    private $users;\n\n    public function __construct()\n    {\n        $this->users = new ArrayCollection();\n    }\n\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    public function getLibelle(): ?string\n    {\n        return $this->libelle;\n    }\n\n    public function setLibelle(string $libelle): self\n    {\n        $this->libelle = $libelle;\n\n        return $this;\n    }\n\n    public function getAbbr(): ?string\n    {\n        return $this->abbr;\n    }\n\n    public function setAbbr(string $abbr): self\n    {\n        $this->abbr = $abbr;\n\n        return $this;\n    }\n\n    /**\n     * @return Collection|User[]\n     */\n    public function getUsers(): Collection\n    {\n        return $this->users;\n    }\n\n    public function addUser(User $user): self\n    {\n        if (!$this->users->contains($user)) {\n            $this->users[] = $user;\n            $user->setProfil($this);\n        }\n\n        return $this;\n    }\n\n    public function removeUser(User $user): self\n    {\n        if ($this->users->contains($user)) {\n            $this->users->removeElement($user);\n            // set the owning side to null (unless already changed)\n            if ($user->getProfil() === $this) {\n                $user->setProfil(null);\n            }\n        }\n\n        return $this;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Entity/Profil.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/Entity/Profil.php	(date 1597277288000)
@@ -2,6 +2,7 @@
 
 namespace App\Entity;
 
+use Symfony\Component\Validator\Constraints as Assert;
 use Doctrine\ORM\Mapping as ORM;
 use App\Repository\ProfilRepository;
 use Doctrine\Common\Collections\Collection;
@@ -18,20 +19,17 @@
  *           "get_admin_profils"={ 
  *               "method"="GET", 
  *               "path"="/admin/profils",
- *                "security"="is_granted('ROLE_ADMIN')",
  *                  "security_message"="Acces non autorisé"
  *          },
  * 
  *            "get_admin_profils_users"={ 
  *               "method"="GET", 
  *               "path"="/admin/profils/{id}/users",
- *                "security"="is_granted('ROLE_ADMIN')",
  *                  "security_message"="Acces non autorisé"
  *          },
  *            "create_profil"={ 
  *               "method"="POST", 
  *               "path"="/admin/profils",
- *                "security"="is_granted('ROLE_ADMIN')",
  *                  "security_message"="Acces non autorisé"
  *          }
  *      },
@@ -39,21 +37,17 @@
  *           "get_admin_profils_id"={ 
  *               "method"="GET", 
  *               "path"="/admin/profils/{id}",
- *                "security"="is_granted('ROLE_ADMIN')",
  *                  "security_message"="Acces non autorisé"
  *          },
  * 
  *            "put_admin_profils_id"={ 
  *               "method"="PUT", 
  *               "path"="/admin/profils/{id}",
- *                "security"="is_granted('ROLE_ADMIN')",
  *                  "security_message"="Acces non autorisé",
  *          },
  *            "delete_profil"={ 
  *               "method"="DELETE", 
  *               "path"="/admin/profils/{id}",
- *                "controller"="App\Controller\ProfilArchiveController",
- *                "security"="is_granted('ROLE_ADMIN')",
  *                  "security_message"="Acces non autorisé",
  *                  "swagger_context"={
  *                                          "summary"="archive un profil",
@@ -77,12 +71,14 @@
     /**
      * @ORM\Column(type="string", length=255)
      * @Groups({"profil:read", "user:read"})
+     * @Assert\NotBlank
      */
     private $libelle;
 
     /**
      * @ORM\Column(type="string", length=255)
      * @Groups({"profil:read", "user:read"})
+     * @Assert\NotBlank
      */
     private $abbr;
 
@@ -93,6 +89,11 @@
      */
     private $users;
 
+    /**
+     * @ORM\Column(type="boolean", options={"default":false})
+     */
+    private $archivage;
+
     public function __construct()
     {
         $this->users = new ArrayCollection();
@@ -155,6 +156,18 @@
             }
         }
 
+        return $this;
+    }
+
+    public function getArchivage(): ?bool
+    {
+        return $this->archivage;
+    }
+
+    public function setArchivage(bool $archivage): self
+    {
+        $this->archivage = $archivage;
+
         return $this;
     }
 }
Index: src/Entity/Tag.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse App\\Repository\\TagRepository;\nuse Doctrine\\Common\\Collections\\Collection;\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\n\n/**\n *\n * @ORM\\Entity(repositoryClass=TagRepository::class)\n * @ApiResource(\n *      collectionOperations={\n *           \"get_tags\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/admin/tags\",\n *               \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN'))\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          },\n *            \"add_tags\"={ \n *               \"method\"=\"POST\", \n *               \"path\"=\"/admin/tags\",\n *               \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN'))\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          }\n *      },\n *      itemOperations={\n *           \"get_tag_id\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/admin/tags/{id}\",\n *                \"defaults\"={\"id\"=null},\n *                \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN') )\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *\n *            \"update_tag_id\"={ \n *               \"method\"=\"PUT\", \n *               \"path\"=\"/admin/tags/{id}\",\n *                \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN'))\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *      },\n *       normalizationContext={\"groups\"={\"tag:read\"}},\n *       denormalizationContext={\"groups\"={\"tag:write\"}},\n *       attributes={\"pagination_enabled\"=true, \"pagination_items_per_page\"=10}\n * )\n */\nclass Tag\n{\n    /**\n     * @ORM\\Id()\n     * @ORM\\GeneratedValue()\n     * @ORM\\Column(type=\"integer\")\n     * @Groups({\"tag:read\",\"grptag:read\"})\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     * @Groups({\"tag:read\",\"tag:write\", \"grptag:read\"})\n     */\n    private $libelle;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     * @Groups({\"tag:read\",\"tag:write\", \"grptag:read\"})\n     */\n    private $description;\n\n     /**\n      * @ORM\\ManyToMany(targetEntity=GroupeTag::class, mappedBy=\"tags\")\n      */\n     private $groupeTags;\n\n     /**\n      * @ORM\\ManyToMany(targetEntity=GroupeCompetence::class, inversedBy=\"tag\")\n      */\n     private $groupecompetences;\n\n     public function __construct()\n     {\n         $this->groupeTags = new ArrayCollection();\n         $this->groupecompetences = new ArrayCollection();\n     }\n\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    public function getLibelle(): ?string\n    {\n        return $this->libelle;\n    }\n\n    public function setLibelle(string $libelle): self\n    {\n        $this->libelle = $libelle;\n\n        return $this;\n    }\n\n    public function getDescription(): ?string\n    {\n        return $this->description;\n    }\n\n    public function setDescription(string $description): self\n    {\n        $this->description = $description;\n\n        return $this;\n    }\n\n     /**\n      * @return Collection|GroupeTag[]\n      */\n     public function getGroupeTags(): Collection\n     {\n         return $this->groupeTags;\n     }\n\n     public function addGroupeTag(GroupeTag $groupeTag): self\n     {\n         if (!$this->groupeTags->contains($groupeTag)) {\n             $this->groupeTags[] = $groupeTag;\n             $groupeTag->addTag($this);\n         }\n\n         return $this;\n     }\n\n     public function removeGroupeTag(GroupeTag $groupeTag): self\n     {\n         if ($this->groupeTags->contains($groupeTag)) {\n             $this->groupeTags->removeElement($groupeTag);\n             $groupeTag->removeTag($this);\n         }\n\n        return $this;\n     }\n\n    /**\n     * @return Collection|GroupeCompetence[]\n     */\n    public function getGroupecompetences(): Collection\n    {\n        return $this->groupecompetences;\n    }\n\n    public function addGroupecompetence(GroupeCompetence $groupecompetence): self\n    {\n        if (!$this->groupecompetences->contains($groupecompetence)) {\n            $this->groupecompetences[] = $groupecompetence;\n        }\n\n        return $this;\n    }\n\n    public function removeGroupecompetence(GroupeCompetence $groupecompetence): self\n    {\n        if ($this->groupecompetences->contains($groupecompetence)) {\n            $this->groupecompetences->removeElement($groupecompetence);\n        }\n\n        return $this;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Entity/Tag.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/Entity/Tag.php	(date 1597277288000)
@@ -13,36 +13,7 @@
  *
  * @ORM\Entity(repositoryClass=TagRepository::class)
  * @ApiResource(
- *      collectionOperations={
- *           "get_tags"={ 
- *               "method"="GET", 
- *               "path"="/admin/tags",
- *               "security"="(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN'))",
- *               "security_message"="Acces non autorisé",
- *          },
- *            "add_tags"={ 
- *               "method"="POST", 
- *               "path"="/admin/tags",
- *               "security"="(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN'))",
- *               "security_message"="Acces non autorisé",
- *          }
- *      },
- *      itemOperations={
- *           "get_tag_id"={ 
- *               "method"="GET", 
- *               "path"="/admin/tags/{id}",
- *                "defaults"={"id"=null},
- *                "security"="(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN') )",
- *                  "security_message"="Acces non autorisé",
- *          },
- *
- *            "update_tag_id"={ 
- *               "method"="PUT", 
- *               "path"="/admin/tags/{id}",
- *                "security"="(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN'))",
- *                  "security_message"="Acces non autorisé",
- *          },
- *      },
+ *      routePrefix="/admin",
  *       normalizationContext={"groups"={"tag:read"}},
  *       denormalizationContext={"groups"={"tag:write"}},
  *       attributes={"pagination_enabled"=true, "pagination_items_per_page"=10}
@@ -70,21 +41,15 @@
      */
     private $description;
 
-     /**
-      * @ORM\ManyToMany(targetEntity=GroupeTag::class, mappedBy="tags")
-      */
-     private $groupeTags;
+    // /**
+    //  * @ORM\ManyToMany(targetEntity=GroupeTag::class, mappedBy="tags")
+    //  */
+    // private $groupeTags;
 
-     /**
-      * @ORM\ManyToMany(targetEntity=GroupeCompetence::class, inversedBy="tag")
-      */
-     private $groupecompetences;
-
-     public function __construct()
-     {
-         $this->groupeTags = new ArrayCollection();
-         $this->groupecompetences = new ArrayCollection();
-     }
+    // public function __construct()
+    // {
+    //     $this->groupeTags = new ArrayCollection();
+    // }
 
     public function getId(): ?int
     {
@@ -115,57 +80,31 @@
         return $this;
     }
 
-     /**
-      * @return Collection|GroupeTag[]
-      */
-     public function getGroupeTags(): Collection
-     {
-         return $this->groupeTags;
-     }
-
-     public function addGroupeTag(GroupeTag $groupeTag): self
-     {
-         if (!$this->groupeTags->contains($groupeTag)) {
-             $this->groupeTags[] = $groupeTag;
-             $groupeTag->addTag($this);
-         }
-
-         return $this;
-     }
-
-     public function removeGroupeTag(GroupeTag $groupeTag): self
-     {
-         if ($this->groupeTags->contains($groupeTag)) {
-             $this->groupeTags->removeElement($groupeTag);
-             $groupeTag->removeTag($this);
-         }
-
-        return $this;
-     }
-
-    /**
-     * @return Collection|GroupeCompetence[]
-     */
-    public function getGroupecompetences(): Collection
-    {
-        return $this->groupecompetences;
-    }
-
-    public function addGroupecompetence(GroupeCompetence $groupecompetence): self
-    {
-        if (!$this->groupecompetences->contains($groupecompetence)) {
-            $this->groupecompetences[] = $groupecompetence;
-        }
-
-        return $this;
-    }
-
-    public function removeGroupecompetence(GroupeCompetence $groupecompetence): self
-    {
-        if ($this->groupecompetences->contains($groupecompetence)) {
-            $this->groupecompetences->removeElement($groupecompetence);
-        }
+    // /**
+    //  * @return Collection|GroupeTag[]
+    //  */
+    // public function getGroupeTags(): Collection
+    // {
+    //     return $this->groupeTags;
+    // }
+
+    // public function addGroupeTag(GroupeTag $groupeTag): self
+    // {
+    //     if (!$this->groupeTags->contains($groupeTag)) {
+    //         $this->groupeTags[] = $groupeTag;
+    //         $groupeTag->addTag($this);
+    //     }
 
-        return $this;
-    }
+    //     return $this;
+    // }
+
+    // public function removeGroupeTag(GroupeTag $groupeTag): self
+    // {
+    //     if ($this->groupeTags->contains($groupeTag)) {
+    //         $this->groupeTags->removeElement($groupeTag);
+    //         $groupeTag->removeTag($this);
+    //     }
+
+    //     return $this;
+    // }
 }
Index: src/Entity/Formateur.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Entity;\n\nuse App\\Entity\\User;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse App\\Repository\\FormateurRepository;\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\ORM\\Mapping\\JoinColumn;\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\n\n/**\n * @ApiResource(\n *      collectionOperations={\n *           \"get_formateurs\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/formateurs\",\n *               \"security\"=\"( is_granted('ROLE_ADMIN') or is_granted('ROLE_CM'))\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          },\n *            \"add_formateur\"={ \n *               \"method\"=\"POST\", \n *               \"path\"=\"/formateurs\",\n *               \"security\"=\"is_granted('ROLE_ADMIN')\",\n *               \"security_message\"=\"Acces non autorisé\",\n *          }\n *      },\n *      itemOperations={\n *           \"get_formateur_id\"={ \n *               \"method\"=\"GET\", \n *               \"path\"=\"/formateurs/{id}\",\n *                \"defaults\"={\"id\"=null},\n *                \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN') or is_granted('ROLE_CM'))\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *\n *            \"modifier_formateur_id\"={ \n *               \"method\"=\"PUT\", \n *               \"path\"=\"/formateurs/{id}\",\n *                \"security\"=\"(is_granted('ROLE_FORMATEUR') or is_granted('ROLE_ADMIN'))\",\n *                  \"security_message\"=\"Acces non autorisé\",\n *          },\n *      },\n *       normalizationContext={\"groups\"={\"user:read\",\"formateur:read\"}},\n *       denormalizationContext={\"groups\"={\"user:write\",\"formateur:write\"}},\n *       attributes={\"pagination_enabled\"=true, \"pagination_items_per_page\"=2}\n * )\n * @ORM\\Entity(repositoryClass=FormateurRepository::class)\n */\nclass Formateur extends User\n{\n    /**\n     * @ORM\\Id()\n     * @ORM\\GeneratedValue()\n     * @ORM\\Column(type=\"integer\")\n     * @Groups(\"formateur:read\")\n     */\n    private $id;\n\n    /**\n     * @ORM\\ManyToMany(targetEntity=Promotion::class, mappedBy=\"formateurs\")\n     */\n    private $promotions;\n\n    /**\n     * @ORM\\ManyToMany(targetEntity=Groupes::class, mappedBy=\"formateurs\")\n     */\n    private $groupe;\n\n    public function __construct()\n    {\n        $this->promotions = new ArrayCollection();\n        $this->groupe = new ArrayCollection();\n    }\n\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    /**\n     * Set the value of id\n     *\n     * @return  self\n     */ \n    public function setId($id)\n    {\n        $this->id = $id;\n\n        return $this;\n    }\n\n    /**\n     * @return Collection|Promotion[]\n     */\n    public function getPromotions(): Collection\n    {\n        return $this->promotions;\n    }\n\n    public function addPromotion(Promotion $promotion): self\n    {\n        if (!$this->promotions->contains($promotion)) {\n            $this->promotions[] = $promotion;\n            $promotion->addFormateur($this);\n        }\n\n        return $this;\n    }\n\n    public function removePromotion(Promotion $promotion): self\n    {\n        if ($this->promotions->contains($promotion)) {\n            $this->promotions->removeElement($promotion);\n            $promotion->removeFormateur($this);\n        }\n\n        return $this;\n    }\n\n    /**\n     * @return Collection|Groupes[]\n     */\n    public function getGroupe(): Collection\n    {\n        return $this->groupe;\n    }\n\n    public function addGroupe(Groupes $groupe): self\n    {\n        if (!$this->groupe->contains($groupe)) {\n            $this->groupe[] = $groupe;\n            $groupe->addFormateur($this);\n        }\n\n        return $this;\n    }\n\n    public function removeGroupe(Groupes $groupe): self\n    {\n        if ($this->groupe->contains($groupe)) {\n            $this->groupe->removeElement($groupe);\n            $groupe->removeFormateur($this);\n        }\n\n        return $this;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Entity/Formateur.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/Entity/Formateur.php	(date 1597277288000)
@@ -8,7 +8,6 @@
 use ApiPlatform\Core\Annotation\ApiResource;
 use Doctrine\Common\Collections\Collection;
 use Doctrine\Common\Collections\ArrayCollection;
-use Doctrine\ORM\Mapping\JoinColumn;
 use Symfony\Component\Serializer\Annotation\Groups;
 
 /**
@@ -59,20 +58,20 @@
      */
     private $id;
 
+    /**
+     * @ORM\ManyToMany(targetEntity=Groupes::class, inversedBy="formateurs")
+     */
+    private $groupes;
+
     /**
      * @ORM\ManyToMany(targetEntity=Promotion::class, mappedBy="formateurs")
      */
     private $promotions;
 
-    /**
-     * @ORM\ManyToMany(targetEntity=Groupes::class, mappedBy="formateurs")
-     */
-    private $groupe;
-
     public function __construct()
     {
+        $this->groupes = new ArrayCollection();
         $this->promotions = new ArrayCollection();
-        $this->groupe = new ArrayCollection();
     }
 
     public function getId(): ?int
@@ -89,6 +88,32 @@
     {
         $this->id = $id;
 
+        return $this;
+    }
+
+    /**
+     * @return Collection|Groupes[]
+     */
+    public function getGroupes(): Collection
+    {
+        return $this->groupes;
+    }
+
+    public function addGroupe(Groupes $groupe): self
+    {
+        if (!$this->groupes->contains($groupe)) {
+            $this->groupes[] = $groupe;
+        }
+
+        return $this;
+    }
+
+    public function removeGroupe(Groupes $groupe): self
+    {
+        if ($this->groupes->contains($groupe)) {
+            $this->groupes->removeElement($groupe);
+        }
+
         return $this;
     }
 
@@ -117,34 +142,6 @@
             $promotion->removeFormateur($this);
         }
 
-        return $this;
-    }
-
-    /**
-     * @return Collection|Groupes[]
-     */
-    public function getGroupe(): Collection
-    {
-        return $this->groupe;
-    }
-
-    public function addGroupe(Groupes $groupe): self
-    {
-        if (!$this->groupe->contains($groupe)) {
-            $this->groupe[] = $groupe;
-            $groupe->addFormateur($this);
-        }
-
-        return $this;
-    }
-
-    public function removeGroupe(Groupes $groupe): self
-    {
-        if ($this->groupe->contains($groupe)) {
-            $this->groupe->removeElement($groupe);
-            $groupe->removeFormateur($this);
-        }
-
         return $this;
     }
 }
Index: src/Entity/Niveau.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse App\\Repository\\NiveauRepository;\nuse Doctrine\\Common\\Collections\\Collection;\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse ApiPlatform\\Core\\Annotation\\ApiSubresource;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\n\n/**\n * @ApiResource(\n *       normalizationContext={\"groups\"={\"niveau:read\"}},\n * )\n * @ORM\\Entity(repositoryClass=NiveauRepository::class)\n */\nclass Niveau\n{\n    /**\n     * @ORM\\Id()\n     * @ORM\\GeneratedValue()\n     * @ORM\\Column(type=\"integer\")\n     * @Groups({\"niveau:read\",\"competence:read\"})\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=100)\n     * @Groups({\"niveau:read\",\"competence:read\"})\n     */\n    private $libelle;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     * @Groups({\"niveau:read\", \"competence:read\"})\n     */\n    private $critereEvaluation;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     * @Groups({\"niveau:read\", \"competence:read\"})\n     */\n    private $groupeAction;\n\n    /**\n     * @ORM\\ManyToOne(targetEntity=Competence::class, inversedBy=\"niveaux\")\n     */\n    private $competence;\n\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    public function getLibelle(): ?string\n    {\n        return $this->libelle;\n    }\n\n    public function setLibelle(string $libelle): self\n    {\n        $this->libelle = $libelle;\n\n        return $this;\n    }\n\n    public function getCritereEvaluation(): ?string\n    {\n        return $this->critereEvaluation;\n    }\n\n    public function setCritereEvaluation(string $critereEvaluation): self\n    {\n        $this->critereEvaluation = $critereEvaluation;\n\n        return $this;\n    }\n\n    public function getGroupeAction(): ?string\n    {\n        return $this->groupeAction;\n    }\n\n    public function setGroupeAction(string $groupeAction): self\n    {\n        $this->groupeAction = $groupeAction;\n\n        return $this;\n    }\n\n    public function getCompetence(): ?Competence\n    {\n        return $this->competence;\n    }\n\n    public function setCompetence(?Competence $competence): self\n    {\n        $this->competence = $competence;\n\n        return $this;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Entity/Niveau.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/Entity/Niveau.php	(date 1597277288000)
@@ -49,6 +49,16 @@
      */
     private $competence;
 
+    // /**
+    //  * @ORM\OneToMany(targetEntity=Competence::class, mappedBy="niveau")
+    //  */
+    // private $competences;
+
+    public function __construct()
+    {
+       // $this->competences = new ArrayCollection();
+    }
+
     public function getId(): ?int
     {
         return $this->id;
Index: src/DataFixtures/AppFixtures.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\DataFixtures;\n\nuse Faker\\Factory;\nuse App\\Entity\\User;\nuse App\\Entity\\Profil;\nuse App\\Entity\\Apprenant;\nuse App\\Entity\\Formateur;\nuse App\\Entity\\ProfilSortie;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Common\\Persistence\\ObjectManager;\nuse Symfony\\Component\\Security\\Core\\Encoder\\UserPasswordEncoderInterface;\n\nclass AppFixtures extends Fixture\n{\n    private $encoder;\n    private $profilRepository;\n    public function __construct(UserPasswordEncoderInterface $encoder)\n    {\n       $this->encoder=$encoder; \n\n     }\n\n    public const APPRENANTS= 'apprenants';\n    public const FORMATEURS= 'formateurs';\n\n    public function load(ObjectManager $manager)\n    {\n        $fake = Factory::create('fr-FR');\n\n        $abbrs=[\"ADMIN\",\"FORMATEUR\"  ,\"CM\",\"APPRENANT\"];\n        $libelle=['Administrateur',\"Formateur\",\"Community Manager\",\"Aprenant\"];\n   $tab_ps_entity=[];     \n  $ProfilSortis = [\"Développeur front\", \"back\", \"fullstack\", \"CMS\", \"intégrateur\", \"designer\", \"CM\", \"Data\"];\n    foreach($ProfilSortis as $ps) \n    {\n        $pro_sortie=new ProfilSortie();\n        $pro_sortie->setLibele($ps);\n        $pro_sortie->setArchivage(false);\n        $tab_ps_entity[]=$pro_sortie;\n        $manager->persist($pro_sortie);\n    }\n    $manager->flush();\n      \n  foreach ($abbrs as $key => $abbr) \n  {\n  // profile de sorties\n\n    $profil =new Profil() ;\n    $profil ->setLibelle ($libelle[$key]);\n    $profil ->setAbbr($abbr);\n    $manager ->persist($profil);\n\n    $manager ->flush();\n        for ($i=1; $i <=3 ; $i++) {\n           $user = new User();\n           if($abbr==\"APPRENANT\")\n           {\n\n            // $pro_sortie=new ProfilSortie();\n            // $pro_sortie->setLibele($fake->unique()->randomElement($ProfilSortis));\n            // $manager->persist($pro_sortie);\n               //apprenant!\n               $user=new Apprenant();\n               $user->setGenre($fake->randomElement(['homme','femme']));\n               $user->setTelephone($fake->phoneNumber());\n               $user->setAdresse($fake->address());\n               $user->setProfilSortie($fake->randomElement($tab_ps_entity));\n           }\n           if($abbr==\"FORMATEUR\")\n           {\n               $user=new Formateur();\n           }\n           $user ->setProfil ($profil);\n           $user ->setUsername(strtolower ($abbr ).$i);\n           $user ->setFisrtName($fake->firstName);\n            // gestion de la photo\n                 $photo = fopen($fake->imageUrl($width = 640, $height = 480),\"rb\");\n                 $user->setPhoto($photo);\n            // fin \n           $user ->setLastName($fake->lastName);\n           $user ->setEmail($fake->email);\n           $user->setArchivage(false);\n\n //Génération des Users\n           $password = $this->encoder->encodePassword ($user, 'passe123' );\n          $user ->setPassword ($password );\n            \n            $manager ->persist($user);\n            $this->setReference(self::APPRENANTS, $user);\n            $this->setReference(self::FORMATEURS, $user);\n         }\n          $manager ->flush();\n  }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/DataFixtures/AppFixtures.php	(revision 8768312777851918de75823999ef4b225bed3810)
+++ src/DataFixtures/AppFixtures.php	(date 1597277288000)
@@ -8,6 +8,7 @@
 use App\Entity\Apprenant;
 use App\Entity\Formateur;
 use App\Entity\ProfilSortie;
+use App\Entity\CommunityManager;
 use Doctrine\Bundle\FixturesBundle\Fixture;
 use Doctrine\Common\Persistence\ObjectManager;
 use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
@@ -21,77 +22,106 @@
        $this->encoder=$encoder; 
 
      }
-
-    public const APPRENANTS= 'apprenants';
-    public const FORMATEURS= 'formateurs';
+    
+     public const APPRENANTS= 'apprenants';
+     public const FORMATEURS= 'formateurs';
 
+
     public function load(ObjectManager $manager)
     {
         $fake = Factory::create('fr-FR');
 
+        $tab_apprenants;//tableau contenant les objets des appranants!
+        $tab_formateurs;//tableau contenant les objets des formateurs!
+
         $abbrs=["ADMIN","FORMATEUR"  ,"CM","APPRENANT"];
         $libelle=['Administrateur',"Formateur","Community Manager","Aprenant"];
-   $tab_ps_entity=[];     
-  $ProfilSortis = ["Développeur front", "back", "fullstack", "CMS", "intégrateur", "designer", "CM", "Data"];
-    foreach($ProfilSortis as $ps) 
-    {
-        $pro_sortie=new ProfilSortie();
-        $pro_sortie->setLibele($ps);
-        $pro_sortie->setArchivage(false);
-        $tab_ps_entity[]=$pro_sortie;
-        $manager->persist($pro_sortie);
-    }
-    $manager->flush();
+        $tab_ps_entity=[];     
+      $ProfilSortis = ["Développeur front", "back", "fullstack", "CMS", "intégrateur", "designer", "CM", "Data"];
+        foreach($ProfilSortis as $ps) 
+        {
+            $pro_sortie=new ProfilSortie();
+            $pro_sortie->setLibele($ps)
+            ->setArchivage(false);
+            $tab_ps_entity[]=$pro_sortie;
+            $manager->persist($pro_sortie);
+        }
+        $manager->flush();
       
-  foreach ($abbrs as $key => $abbr) 
-  {
-  // profile de sorties
+        foreach ($abbrs as $key => $abbr) 
+        {
+        // profile de sorties
 
-    $profil =new Profil() ;
-    $profil ->setLibelle ($libelle[$key]);
-    $profil ->setAbbr($abbr);
-    $manager ->persist($profil);
+          $profil =new Profil() ;
+          $profil ->setLibelle ($libelle[$key]);
+          $profil ->setAbbr($abbr);
+          $manager ->persist($profil);
 
-    $manager ->flush();
-        for ($i=1; $i <=3 ; $i++) {
-           $user = new User();
-           if($abbr=="APPRENANT")
-           {
+          $manager ->flush();
+          $nbrUSer=3;
+          if($abbr=="APPRENANT")
+          {
+            $nbrUSer=80;
+          }
+              for ($i=1; $i <=$nbrUSer ; $i++) {
+                $user = new User();
+                if($abbr=="APPRENANT")
+                {
 
-            // $pro_sortie=new ProfilSortie();
-            // $pro_sortie->setLibele($fake->unique()->randomElement($ProfilSortis));
-            // $manager->persist($pro_sortie);
-               //apprenant!
-               $user=new Apprenant();
-               $user->setGenre($fake->randomElement(['homme','femme']));
-               $user->setTelephone($fake->phoneNumber());
-               $user->setAdresse($fake->address());
-               $user->setProfilSortie($fake->randomElement($tab_ps_entity));
-           }
-           if($abbr=="FORMATEUR")
-           {
-               $user=new Formateur();
-           }
-           $user ->setProfil ($profil);
-           $user ->setUsername(strtolower ($abbr ).$i);
-           $user ->setFisrtName($fake->firstName);
-            // gestion de la photo
-                 $photo = fopen($fake->imageUrl($width = 640, $height = 480),"rb");
-                 $user->setPhoto($photo);
-            // fin 
-           $user ->setLastName($fake->lastName);
-           $user ->setEmail($fake->email);
-           $user->setArchivage(false);
+                  // $pro_sortie=new ProfilSortie();
+                  // $pro_sortie->setLibele($fake->unique()->randomElement($ProfilSortis));
+                  // $manager->persist($pro_sortie);
+                    //apprenant!
+                    $user=new Apprenant();
+                    $user->setGenre($fake->randomElement(['homme','femme']));
+                    $user->setTelephone($fake->phoneNumber());
+                    $user->setAdresse($fake->address());
+                    $user->setStatut("attente");
+                    $user->setProfilSortie($fake->randomElement($tab_ps_entity));
+                   
+                }
+                if($abbr=="FORMATEUR")
+                {
+                    $user=new Formateur();
+
+                }
+                if($abbr=="CM")
+                {
+                    $user=new CommunityManager();
+
+                }
+                $user ->setProfil ($profil);
+                $user ->setUsername(strtolower ($abbr ).$i);
+                $user ->setFisrtName($fake->firstName);
+                  // gestion de la photo
+                      // $photo = fopen($fake->imageUrl($width = 640, $height = 480),"rb");
+                      // $user->setPhoto($photo);
+                  // fin 
+                $user ->setLastName($fake->lastName);
+                $user ->setEmail($fake->email);
+                $user->setArchivage(false);
 
- //Génération des Users
-           $password = $this->encoder->encodePassword ($user, 'passe123' );
-          $user ->setPassword ($password );
-            
-            $manager ->persist($user);
-            $this->setReference(self::APPRENANTS, $user);
-            $this->setReference(self::FORMATEURS, $user);
-         }
+             //Génération des Users
+                $password = $this->encoder->encodePassword ($user, 'passe123' );
+                $user ->setPassword ($password );
+                  
+                if($abbr=="APPRENANT")
+                {
+                  $tab_apprenants = $user;
+                }
+                if($abbr=="FORMATEUR")
+                {
+                  $tab_formateurs=$user;
+
+                }
+                  
+                  $manager ->persist($user);
+
+              }
+
+        }
+        $this->addReference(self::APPRENANTS, $tab_apprenants);
+         $this->addReference(self::FORMATEURS, $tab_formateurs);
           $manager ->flush();
-  }
     }
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"BranchesTreeState\">\n    <expand>\n      <path>\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"LOCAL_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n      </path>\n      <path>\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n      </path>\n      <path>\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"GROUP_NODE:origin\" type=\"e8cecc67:BranchNodeDescriptor\" />\n      </path>\n    </expand>\n    <select />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"616230c9-1139-4e5d-948f-37ed1360cdad\" name=\"Default Changelist\" comment=\"\">\n      <change afterPath=\"$PROJECT_DIR$/migrations/Version20200808234921.php\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/migrations/Version20200808235331.php\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/migrations/Version20200809121603.php\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/migrations/Version20200809122029.php\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/migrations/Version20200809124402.php\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/migrations/Version20200809130411.php\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/migrations/Version20200809132436.php\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/migrations/Version20200809134108.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/DataFixtures/AppFixtures.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/DataFixtures/AppFixtures.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/DataFixtures/CompetenceFixtures.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/DataFixtures/CompetenceFixtures.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/DataPersister/ProfilArchiveController.php\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/Entity/Apprenant.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Entity/Apprenant.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/Entity/Formateur.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Entity/Formateur.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/Entity/Groupes.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Entity/Groupes.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/Entity/Promotion.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Entity/Promotion.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/Entity/Referentiel.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Entity/Referentiel.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/Entity/User.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Entity/User.php\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ComposerSettings\" doNotAsk=\"true\" synchronizationState=\"SYNCHRONIZE\">\n    <pharConfigPath>$PROJECT_DIR$/composer.json</pharConfigPath>\n    <execution />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"composer.json\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"PhpWorkspaceProjectConfiguration\">\n    <include_path>\n      <path value=\"$PROJECT_DIR$/vendor/symfony/security-core\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-php73\" />\n      <path value=\"$PROJECT_DIR$/vendor/hshn/base64-encoded-file\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/event-dispatcher-contracts\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/console\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/filesystem\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-mbstring\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/maker-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/web-server-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/validator\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/stopwatch\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/http-kernel\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/property-access\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/flex\" />\n      <path value=\"$PROJECT_DIR$/vendor/composer\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/translation-contracts\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/serializer\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-intl-normalizer\" />\n      <path value=\"$PROJECT_DIR$/vendor/api-platform/core\" />\n      <path value=\"$PROJECT_DIR$/vendor/nelmio/cors-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/phpdocumentor/type-resolver\" />\n      <path value=\"$PROJECT_DIR$/vendor/phpdocumentor/reflection-docblock\" />\n      <path value=\"$PROJECT_DIR$/vendor/phpdocumentor/reflection-common\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/orm\" />\n      <path value=\"$PROJECT_DIR$/vendor/nikic/php-parser\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/yaml\" />\n      <path value=\"$PROJECT_DIR$/vendor/twig/twig\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/dbal\" />\n      <path value=\"$PROJECT_DIR$/vendor/webmozart/assert\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/sql-formatter\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/var-dumper\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/migrations\" />\n      <path value=\"$PROJECT_DIR$/vendor/fzaninotto/faker\" />\n      <path value=\"$PROJECT_DIR$/vendor/fig/link-util\" />\n      <path value=\"$PROJECT_DIR$/vendor/laminas/laminas-eventmanager\" />\n      <path value=\"$PROJECT_DIR$/vendor/laminas/laminas-zendframework-bridge\" />\n      <path value=\"$PROJECT_DIR$/vendor/laminas/laminas-code\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/cache\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/inflector\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/event-manager\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/lexer\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/doctrine-migrations-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/doctrine-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/reflection\" />\n      <path value=\"$PROJECT_DIR$/vendor/psr/link\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/collections\" />\n      <path value=\"$PROJECT_DIR$/vendor/psr/container\" />\n      <path value=\"$PROJECT_DIR$/vendor/namshi/jose\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/annotations\" />\n      <path value=\"$PROJECT_DIR$/vendor/psr/event-dispatcher\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/instantiator\" />\n      <path value=\"$PROJECT_DIR$/vendor/psr/log\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/doctrine-fixtures-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/psr/cache\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/data-fixtures\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/common\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/persistence\" />\n      <path value=\"$PROJECT_DIR$/vendor/ocramius/proxy-manager\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/var-exporter\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/security-http\" />\n      <path value=\"$PROJECT_DIR$/vendor/webimpress/safe-writer\" />\n      <path value=\"$PROJECT_DIR$/vendor/monolog/monolog\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/event-dispatcher\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/routing\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/process\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/deprecation-contracts\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/expression-language\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/asset\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/monolog-bridge\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/doctrine-bridge\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/config\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/error-handler\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/service-contracts\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-php80\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/security-csrf\" />\n      <path value=\"$PROJECT_DIR$/vendor/willdurand/negotiation\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/dependency-injection\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/twig-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/lexik/jwt-authentication-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/twig-bridge\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/finder\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/framework-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/monolog-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/dotenv\" />\n      <path value=\"$PROJECT_DIR$/vendor/lcobucci/jwt\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/http-foundation\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/cache\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-intl-grapheme\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/debug-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/security-guard\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/string\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/security-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/cache-contracts\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/property-info\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/web-link\" />\n    </include_path>\n  </component>\n  <component name=\"ProjectId\" id=\"1fmdBV9w7wfFrF4GhOPfonzvyN7\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\n    <property name=\"DatabaseDriversLRU\" value=\"mariadb\" />\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/../test\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"editor.preferences.import\" />\n  </component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/src/DataFixtures\" />\n    </key>\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/config/jwt\" />\n      <recent name=\"$PROJECT_DIR$/src/DataFixtures\" />\n    </key>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"616230c9-1139-4e5d-948f-37ed1360cdad\" name=\"Default Changelist\" comment=\"\" />\n      <created>1596827066857</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1596827066857</updated>\n      <workItem from=\"1596827068319\" duration=\"6548000\" />\n      <workItem from=\"1596840524927\" duration=\"4051000\" />\n      <workItem from=\"1596880584124\" duration=\"3516000\" />\n      <workItem from=\"1596927687821\" duration=\"12637000\" />\n      <workItem from=\"1596975063246\" duration=\"7189000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\n  </component>\n  <component name=\"WindowStateProjectService\">\n    <state x=\"555\" y=\"215\" width=\"800\" height=\"673\" key=\"#com.intellij.execution.impl.EditConfigurationsDialog\" timestamp=\"1596827272502\">\n      <screen x=\"0\" y=\"28\" width=\"1920\" height=\"1052\" />\n    </state>\n    <state x=\"555\" y=\"215\" width=\"800\" height=\"673\" key=\"#com.intellij.execution.impl.EditConfigurationsDialog/0.28.1920.1052@0.28.1920.1052\" timestamp=\"1596827272502\" />\n    <state x=\"743\" y=\"312\" width=\"424\" height=\"480\" key=\"FileChooserDialogImpl\" timestamp=\"1597001555042\">\n      <screen x=\"0\" y=\"28\" width=\"1920\" height=\"1052\" />\n    </state>\n    <state x=\"743\" y=\"312\" width=\"424\" height=\"480\" key=\"FileChooserDialogImpl/0.28.1920.1052@0.28.1920.1052\" timestamp=\"1597001555042\" />\n    <state width=\"263\" height=\"500\" key=\"HiddenNamespacesPopup\" timestamp=\"1596827400069\">\n      <screen x=\"0\" y=\"28\" width=\"1920\" height=\"1052\" />\n    </state>\n    <state width=\"263\" height=\"500\" key=\"HiddenNamespacesPopup/0.28.1920.1052@0.28.1920.1052\" timestamp=\"1596827400069\" />\n    <state x=\"449\" y=\"189\" key=\"SettingsEditor\" timestamp=\"1596935205824\">\n      <screen x=\"0\" y=\"28\" width=\"1920\" height=\"1052\" />\n    </state>\n    <state x=\"449\" y=\"189\" key=\"SettingsEditor/0.28.1920.1052@0.28.1920.1052\" timestamp=\"1596935205824\" />\n    <state x=\"624\" y=\"255\" key=\"run.anything.popup\" timestamp=\"1596836267606\">\n      <screen x=\"0\" y=\"28\" width=\"1920\" height=\"1052\" />\n    </state>\n    <state x=\"624\" y=\"255\" key=\"run.anything.popup/0.28.1920.1052@0.28.1920.1052\" timestamp=\"1596836267606\" />\n    <state x=\"623\" y=\"260\" width=\"672\" height=\"678\" key=\"search.everywhere.popup\" timestamp=\"1596934182840\">\n      <screen x=\"0\" y=\"28\" width=\"1920\" height=\"1052\" />\n    </state>\n    <state x=\"623\" y=\"260\" width=\"672\" height=\"678\" key=\"search.everywhere.popup/0.28.1920.1052@0.28.1920.1052\" timestamp=\"1596934182840\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/workspace.xml	(revision 8768312777851918de75823999ef4b225bed3810)
+++ .idea/workspace.xml	(date 1597286530741)
@@ -20,24 +20,41 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="616230c9-1139-4e5d-948f-37ed1360cdad" name="Default Changelist" comment="">
-      <change afterPath="$PROJECT_DIR$/migrations/Version20200808234921.php" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/migrations/Version20200808235331.php" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/migrations/Version20200809121603.php" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/migrations/Version20200809122029.php" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/migrations/Version20200809124402.php" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/migrations/Version20200809130411.php" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/migrations/Version20200809132436.php" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/migrations/Version20200809134108.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/Controller/GroupeCompetenceController.php" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/Controller/GroupeController.php" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/Controller/ProfilController.php" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/Controller/PromotionController.php" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/Controller/ReferentielController.php" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/Controller/TestController.php" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/DataFixtures/PromotionFixtures.php" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/DataFixtures/TagFixtures.php" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/DataPersister/ProfilArchiveController.php" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/Entity/CommunityManager.php" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/Repository/CommunityManagerRepository.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/PRF/.idea/workspace.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Controller/ProfilSortieController.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/Controller/ProfilSortieController.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Controller/UserController.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/Controller/UserController.php" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/DataFixtures/AppFixtures.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/DataFixtures/AppFixtures.php" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/DataFixtures/CompetenceFixtures.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/DataFixtures/CompetenceFixtures.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/DataPersister/ProfilArchiveController.php" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Entity/Apprenant.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/Entity/Apprenant.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Entity/Competence.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/Entity/Competence.php" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Entity/Formateur.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/Entity/Formateur.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Entity/GroupeCompetence.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/Entity/GroupeCompetence.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Entity/GroupeTag.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/Entity/GroupeTag.php" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Entity/Groupes.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/Entity/Groupes.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Entity/Niveau.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/Entity/Niveau.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Entity/Profil.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/Entity/Profil.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Entity/ProfilSortie.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/Entity/ProfilSortie.php" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Entity/Promotion.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/Entity/Promotion.php" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Entity/Referentiel.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/Entity/Referentiel.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Entity/Tag.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/Entity/Tag.php" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Entity/User.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/Entity/User.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Repository/GroupeCompetenceRepository.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/Repository/GroupeCompetenceRepository.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Repository/ProfilRepository.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/Repository/ProfilRepository.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Repository/ProfilSortieRepository.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/Repository/ProfilSortieRepository.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Repository/PromotionRepository.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/Repository/PromotionRepository.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Repository/UserRepository.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/Repository/UserRepository.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Security/Voter/GroupeCompetenceVoter.php" beforeDir="false" afterPath="$PROJECT_DIR$/src/Security/Voter/GroupeCompetenceVoter.php" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -56,6 +73,11 @@
     </option>
   </component>
   <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="basse" />
+      </map>
+    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
   <component name="PhpWorkspaceProjectConfiguration">
@@ -155,6 +177,19 @@
       <path value="$PROJECT_DIR$/vendor/symfony/cache-contracts" />
       <path value="$PROJECT_DIR$/vendor/symfony/property-info" />
       <path value="$PROJECT_DIR$/vendor/symfony/web-link" />
+      <path value="$PROJECT_DIR$/vendor/vich/uploader-bundle" />
+      <path value="$PROJECT_DIR$/vendor/symfony/form" />
+      <path value="$PROJECT_DIR$/vendor/symfony/options-resolver" />
+      <path value="$PROJECT_DIR$/vendor/symfony/intl" />
+      <path value="$PROJECT_DIR$/vendor/jms/metadata" />
+      <path value="$PROJECT_DIR$/vendor/symfony/polyfill-intl-icu" />
+      <path value="$PROJECT_DIR$/vendor/symfony/mime" />
+      <path value="$PROJECT_DIR$/vendor/symfony/polyfill-intl-idn" />
+      <path value="$PROJECT_DIR$/vendor/ocramius/package-versions" />
+      <path value="$PROJECT_DIR$/vendor/sensio/framework-extra-bundle" />
+      <path value="$PROJECT_DIR$/vendor/egulias/email-validator" />
+      <path value="$PROJECT_DIR$/vendor/symfony/swiftmailer-bundle" />
+      <path value="$PROJECT_DIR$/vendor/swiftmailer/swiftmailer" />
     </include_path>
   </component>
   <component name="ProjectId" id="1fmdBV9w7wfFrF4GhOPfonzvyN7" />
Index: .idea/php.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"PhpIncludePathManager\">\n    <include_path>\n      <path value=\"$PROJECT_DIR$/vendor/lexik/jwt-authentication-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/webimpress/safe-writer\" />\n      <path value=\"$PROJECT_DIR$/vendor/willdurand/negotiation\" />\n      <path value=\"$PROJECT_DIR$/vendor/twig/twig\" />\n      <path value=\"$PROJECT_DIR$/vendor/nelmio/cors-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/monolog/monolog\" />\n      <path value=\"$PROJECT_DIR$/vendor/api-platform/core\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/cache\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/doctrine-migrations-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/inflector\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/event-manager\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/lexer\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/doctrine-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/reflection\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/collections\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/annotations\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/instantiator\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/doctrine-fixtures-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/data-fixtures\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/common\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/persistence\" />\n      <path value=\"$PROJECT_DIR$/vendor/vich/uploader-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/lcobucci/jwt\" />\n      <path value=\"$PROJECT_DIR$/vendor/laminas/laminas-eventmanager\" />\n      <path value=\"$PROJECT_DIR$/vendor/laminas/laminas-zendframework-bridge\" />\n      <path value=\"$PROJECT_DIR$/vendor/laminas/laminas-code\" />\n      <path value=\"$PROJECT_DIR$/vendor/composer\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/orm\" />\n      <path value=\"$PROJECT_DIR$/vendor/nikic/php-parser\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/yaml\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/cache\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/translation-contracts\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/console\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/dbal\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/monolog-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/config\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/security-guard\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/sql-formatter\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/http-kernel\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-php73\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/var-dumper\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/expression-language\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/dotenv\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-intl-normalizer\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/stopwatch\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/var-exporter\" />\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/migrations\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/flex\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/form\" />\n      <path value=\"$PROJECT_DIR$/vendor/fig/link-util\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/validator\" />\n      <path value=\"$PROJECT_DIR$/vendor/phpdocumentor/type-resolver\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/options-resolver\" />\n      <path value=\"$PROJECT_DIR$/vendor/phpdocumentor/reflection-docblock\" />\n      <path value=\"$PROJECT_DIR$/vendor/phpdocumentor/reflection-common\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/monolog-bridge\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/doctrine-bridge\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/maker-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/intl\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/security-csrf\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/serializer\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/web-link\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/security-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/error-handler\" />\n      <path value=\"$PROJECT_DIR$/vendor/jms/metadata\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/deprecation-contracts\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-mbstring\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/property-access\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/dependency-injection\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-intl-icu\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/mime\" />\n      <path value=\"$PROJECT_DIR$/vendor/webmozart/assert\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/twig-bridge\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/property-info\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-intl-grapheme\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/service-contracts\" />\n      <path value=\"$PROJECT_DIR$/vendor/namshi/jose\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/framework-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/finder\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/http-foundation\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/security-http\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-php80\" />\n      <path value=\"$PROJECT_DIR$/vendor/fzaninotto/faker\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/event-dispatcher-contracts\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/asset\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/twig-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/cache-contracts\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/security-core\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/filesystem\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/routing\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/event-dispatcher\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-intl-idn\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/string\" />\n      <path value=\"$PROJECT_DIR$/vendor/ocramius/package-versions\" />\n      <path value=\"$PROJECT_DIR$/vendor/ocramius/proxy-manager\" />\n      <path value=\"$PROJECT_DIR$/vendor/psr/cache\" />\n      <path value=\"$PROJECT_DIR$/vendor/psr/container\" />\n      <path value=\"$PROJECT_DIR$/vendor/psr/event-dispatcher\" />\n      <path value=\"$PROJECT_DIR$/vendor/psr/log\" />\n      <path value=\"$PROJECT_DIR$/vendor/psr/link\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/web-server-bundle\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/process\" />\n      <path value=\"$PROJECT_DIR$/vendor/sensio/framework-extra-bundle\" />\n<<<<<<< Updated upstream\n      <path value=\"$PROJECT_DIR$/vendor/phpoffice/phpspreadsheet\" />\n      <path value=\"$PROJECT_DIR$/vendor/psr/simple-cache\" />\n      <path value=\"$PROJECT_DIR$/vendor/psr/http-client\" />\n      <path value=\"$PROJECT_DIR$/vendor/psr/http-message\" />\n      <path value=\"$PROJECT_DIR$/vendor/psr/http-factory\" />\n      <path value=\"$PROJECT_DIR$/vendor/markbaker/matrix\" />\n      <path value=\"$PROJECT_DIR$/vendor/markbaker/complex\" />\n      <path value=\"$PROJECT_DIR$/vendor/myclabs/php-enum\" />\n      <path value=\"$PROJECT_DIR$/vendor/maennchen/zipstream-php\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/mailer\" />\n      <path value=\"$PROJECT_DIR$/vendor/egulias/email-validator\" />\n=======\n      <path value=\"$PROJECT_DIR$/vendor/egulias/email-validator\" />\n      <path value=\"$PROJECT_DIR$/vendor/symfony/mailer\" />\n>>>>>>> Stashed changes\n    </include_path>\n  </component>\n  <component name=\"PhpProjectSharedConfiguration\" php_language_level=\"7.2\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/php.xml	(revision 8768312777851918de75823999ef4b225bed3810)
+++ .idea/php.xml	(date 1597286530745)
@@ -2,126 +2,114 @@
 <project version="4">
   <component name="PhpIncludePathManager">
     <include_path>
-      <path value="$PROJECT_DIR$/vendor/lexik/jwt-authentication-bundle" />
-      <path value="$PROJECT_DIR$/vendor/webimpress/safe-writer" />
-      <path value="$PROJECT_DIR$/vendor/willdurand/negotiation" />
+      <path value="$PROJECT_DIR$/vendor/symfony/security-core" />
+      <path value="$PROJECT_DIR$/vendor/symfony/polyfill-php73" />
+      <path value="$PROJECT_DIR$/vendor/hshn/base64-encoded-file" />
+      <path value="$PROJECT_DIR$/vendor/symfony/event-dispatcher-contracts" />
+      <path value="$PROJECT_DIR$/vendor/symfony/console" />
+      <path value="$PROJECT_DIR$/vendor/symfony/filesystem" />
+      <path value="$PROJECT_DIR$/vendor/symfony/polyfill-mbstring" />
+      <path value="$PROJECT_DIR$/vendor/symfony/maker-bundle" />
+      <path value="$PROJECT_DIR$/vendor/symfony/web-server-bundle" />
+      <path value="$PROJECT_DIR$/vendor/symfony/validator" />
+      <path value="$PROJECT_DIR$/vendor/symfony/stopwatch" />
+      <path value="$PROJECT_DIR$/vendor/symfony/http-kernel" />
+      <path value="$PROJECT_DIR$/vendor/symfony/property-access" />
+      <path value="$PROJECT_DIR$/vendor/symfony/flex" />
+      <path value="$PROJECT_DIR$/vendor/composer" />
+      <path value="$PROJECT_DIR$/vendor/symfony/translation-contracts" />
+      <path value="$PROJECT_DIR$/vendor/symfony/serializer" />
+      <path value="$PROJECT_DIR$/vendor/symfony/polyfill-intl-normalizer" />
+      <path value="$PROJECT_DIR$/vendor/api-platform/core" />
+      <path value="$PROJECT_DIR$/vendor/nelmio/cors-bundle" />
+      <path value="$PROJECT_DIR$/vendor/phpdocumentor/type-resolver" />
+      <path value="$PROJECT_DIR$/vendor/phpdocumentor/reflection-docblock" />
+      <path value="$PROJECT_DIR$/vendor/phpdocumentor/reflection-common" />
+      <path value="$PROJECT_DIR$/vendor/doctrine/orm" />
+      <path value="$PROJECT_DIR$/vendor/nikic/php-parser" />
+      <path value="$PROJECT_DIR$/vendor/symfony/yaml" />
       <path value="$PROJECT_DIR$/vendor/twig/twig" />
-      <path value="$PROJECT_DIR$/vendor/nelmio/cors-bundle" />
-      <path value="$PROJECT_DIR$/vendor/monolog/monolog" />
-      <path value="$PROJECT_DIR$/vendor/api-platform/core" />
+      <path value="$PROJECT_DIR$/vendor/doctrine/dbal" />
+      <path value="$PROJECT_DIR$/vendor/webmozart/assert" />
+      <path value="$PROJECT_DIR$/vendor/doctrine/sql-formatter" />
+      <path value="$PROJECT_DIR$/vendor/symfony/var-dumper" />
+      <path value="$PROJECT_DIR$/vendor/doctrine/migrations" />
+      <path value="$PROJECT_DIR$/vendor/fzaninotto/faker" />
+      <path value="$PROJECT_DIR$/vendor/fig/link-util" />
+      <path value="$PROJECT_DIR$/vendor/laminas/laminas-eventmanager" />
+      <path value="$PROJECT_DIR$/vendor/laminas/laminas-zendframework-bridge" />
+      <path value="$PROJECT_DIR$/vendor/laminas/laminas-code" />
       <path value="$PROJECT_DIR$/vendor/doctrine/cache" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/doctrine-migrations-bundle" />
       <path value="$PROJECT_DIR$/vendor/doctrine/inflector" />
       <path value="$PROJECT_DIR$/vendor/doctrine/event-manager" />
       <path value="$PROJECT_DIR$/vendor/doctrine/lexer" />
+      <path value="$PROJECT_DIR$/vendor/doctrine/doctrine-migrations-bundle" />
       <path value="$PROJECT_DIR$/vendor/doctrine/doctrine-bundle" />
       <path value="$PROJECT_DIR$/vendor/doctrine/reflection" />
+      <path value="$PROJECT_DIR$/vendor/psr/link" />
       <path value="$PROJECT_DIR$/vendor/doctrine/collections" />
+      <path value="$PROJECT_DIR$/vendor/psr/container" />
+      <path value="$PROJECT_DIR$/vendor/namshi/jose" />
       <path value="$PROJECT_DIR$/vendor/doctrine/annotations" />
+      <path value="$PROJECT_DIR$/vendor/psr/event-dispatcher" />
       <path value="$PROJECT_DIR$/vendor/doctrine/instantiator" />
+      <path value="$PROJECT_DIR$/vendor/psr/log" />
       <path value="$PROJECT_DIR$/vendor/doctrine/doctrine-fixtures-bundle" />
+      <path value="$PROJECT_DIR$/vendor/psr/cache" />
       <path value="$PROJECT_DIR$/vendor/doctrine/data-fixtures" />
       <path value="$PROJECT_DIR$/vendor/doctrine/common" />
       <path value="$PROJECT_DIR$/vendor/doctrine/persistence" />
-      <path value="$PROJECT_DIR$/vendor/vich/uploader-bundle" />
+      <path value="$PROJECT_DIR$/vendor/ocramius/proxy-manager" />
+      <path value="$PROJECT_DIR$/vendor/symfony/var-exporter" />
+      <path value="$PROJECT_DIR$/vendor/symfony/security-http" />
+      <path value="$PROJECT_DIR$/vendor/webimpress/safe-writer" />
+      <path value="$PROJECT_DIR$/vendor/monolog/monolog" />
+      <path value="$PROJECT_DIR$/vendor/symfony/event-dispatcher" />
+      <path value="$PROJECT_DIR$/vendor/symfony/routing" />
+      <path value="$PROJECT_DIR$/vendor/symfony/process" />
+      <path value="$PROJECT_DIR$/vendor/symfony/deprecation-contracts" />
+      <path value="$PROJECT_DIR$/vendor/symfony/expression-language" />
+      <path value="$PROJECT_DIR$/vendor/symfony/asset" />
+      <path value="$PROJECT_DIR$/vendor/symfony/monolog-bridge" />
+      <path value="$PROJECT_DIR$/vendor/symfony/doctrine-bridge" />
+      <path value="$PROJECT_DIR$/vendor/symfony/config" />
+      <path value="$PROJECT_DIR$/vendor/symfony/error-handler" />
+      <path value="$PROJECT_DIR$/vendor/symfony/service-contracts" />
+      <path value="$PROJECT_DIR$/vendor/symfony/polyfill-php80" />
+      <path value="$PROJECT_DIR$/vendor/symfony/security-csrf" />
+      <path value="$PROJECT_DIR$/vendor/willdurand/negotiation" />
+      <path value="$PROJECT_DIR$/vendor/symfony/dependency-injection" />
+      <path value="$PROJECT_DIR$/vendor/symfony/twig-bundle" />
+      <path value="$PROJECT_DIR$/vendor/lexik/jwt-authentication-bundle" />
+      <path value="$PROJECT_DIR$/vendor/symfony/twig-bridge" />
+      <path value="$PROJECT_DIR$/vendor/symfony/finder" />
+      <path value="$PROJECT_DIR$/vendor/symfony/framework-bundle" />
+      <path value="$PROJECT_DIR$/vendor/symfony/monolog-bundle" />
+      <path value="$PROJECT_DIR$/vendor/symfony/dotenv" />
       <path value="$PROJECT_DIR$/vendor/lcobucci/jwt" />
-      <path value="$PROJECT_DIR$/vendor/laminas/laminas-eventmanager" />
-      <path value="$PROJECT_DIR$/vendor/laminas/laminas-zendframework-bridge" />
-      <path value="$PROJECT_DIR$/vendor/laminas/laminas-code" />
-      <path value="$PROJECT_DIR$/vendor/composer" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/orm" />
-      <path value="$PROJECT_DIR$/vendor/nikic/php-parser" />
-      <path value="$PROJECT_DIR$/vendor/symfony/yaml" />
+      <path value="$PROJECT_DIR$/vendor/symfony/http-foundation" />
       <path value="$PROJECT_DIR$/vendor/symfony/cache" />
-      <path value="$PROJECT_DIR$/vendor/symfony/translation-contracts" />
-      <path value="$PROJECT_DIR$/vendor/symfony/console" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/dbal" />
-      <path value="$PROJECT_DIR$/vendor/symfony/monolog-bundle" />
-      <path value="$PROJECT_DIR$/vendor/symfony/config" />
+      <path value="$PROJECT_DIR$/vendor/symfony/polyfill-intl-grapheme" />
+      <path value="$PROJECT_DIR$/vendor/symfony/debug-bundle" />
       <path value="$PROJECT_DIR$/vendor/symfony/security-guard" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/sql-formatter" />
-      <path value="$PROJECT_DIR$/vendor/symfony/http-kernel" />
-      <path value="$PROJECT_DIR$/vendor/symfony/polyfill-php73" />
-      <path value="$PROJECT_DIR$/vendor/symfony/var-dumper" />
-      <path value="$PROJECT_DIR$/vendor/symfony/expression-language" />
-      <path value="$PROJECT_DIR$/vendor/symfony/dotenv" />
-      <path value="$PROJECT_DIR$/vendor/symfony/polyfill-intl-normalizer" />
-      <path value="$PROJECT_DIR$/vendor/symfony/stopwatch" />
-      <path value="$PROJECT_DIR$/vendor/symfony/var-exporter" />
-      <path value="$PROJECT_DIR$/vendor/doctrine/migrations" />
-      <path value="$PROJECT_DIR$/vendor/symfony/flex" />
+      <path value="$PROJECT_DIR$/vendor/symfony/string" />
+      <path value="$PROJECT_DIR$/vendor/symfony/security-bundle" />
+      <path value="$PROJECT_DIR$/vendor/symfony/cache-contracts" />
+      <path value="$PROJECT_DIR$/vendor/symfony/property-info" />
+      <path value="$PROJECT_DIR$/vendor/symfony/web-link" />
+      <path value="$PROJECT_DIR$/vendor/vich/uploader-bundle" />
       <path value="$PROJECT_DIR$/vendor/symfony/form" />
-      <path value="$PROJECT_DIR$/vendor/fig/link-util" />
-      <path value="$PROJECT_DIR$/vendor/symfony/validator" />
-      <path value="$PROJECT_DIR$/vendor/phpdocumentor/type-resolver" />
       <path value="$PROJECT_DIR$/vendor/symfony/options-resolver" />
-      <path value="$PROJECT_DIR$/vendor/phpdocumentor/reflection-docblock" />
-      <path value="$PROJECT_DIR$/vendor/phpdocumentor/reflection-common" />
-      <path value="$PROJECT_DIR$/vendor/symfony/monolog-bridge" />
-      <path value="$PROJECT_DIR$/vendor/symfony/doctrine-bridge" />
-      <path value="$PROJECT_DIR$/vendor/symfony/maker-bundle" />
       <path value="$PROJECT_DIR$/vendor/symfony/intl" />
-      <path value="$PROJECT_DIR$/vendor/symfony/security-csrf" />
-      <path value="$PROJECT_DIR$/vendor/symfony/serializer" />
-      <path value="$PROJECT_DIR$/vendor/symfony/web-link" />
-      <path value="$PROJECT_DIR$/vendor/symfony/security-bundle" />
-      <path value="$PROJECT_DIR$/vendor/symfony/error-handler" />
       <path value="$PROJECT_DIR$/vendor/jms/metadata" />
-      <path value="$PROJECT_DIR$/vendor/symfony/deprecation-contracts" />
-      <path value="$PROJECT_DIR$/vendor/symfony/polyfill-mbstring" />
-      <path value="$PROJECT_DIR$/vendor/symfony/property-access" />
-      <path value="$PROJECT_DIR$/vendor/symfony/dependency-injection" />
       <path value="$PROJECT_DIR$/vendor/symfony/polyfill-intl-icu" />
       <path value="$PROJECT_DIR$/vendor/symfony/mime" />
-      <path value="$PROJECT_DIR$/vendor/webmozart/assert" />
-      <path value="$PROJECT_DIR$/vendor/symfony/twig-bridge" />
-      <path value="$PROJECT_DIR$/vendor/symfony/property-info" />
-      <path value="$PROJECT_DIR$/vendor/symfony/polyfill-intl-grapheme" />
-      <path value="$PROJECT_DIR$/vendor/symfony/service-contracts" />
-      <path value="$PROJECT_DIR$/vendor/namshi/jose" />
-      <path value="$PROJECT_DIR$/vendor/symfony/framework-bundle" />
-      <path value="$PROJECT_DIR$/vendor/symfony/finder" />
-      <path value="$PROJECT_DIR$/vendor/symfony/http-foundation" />
-      <path value="$PROJECT_DIR$/vendor/symfony/security-http" />
-      <path value="$PROJECT_DIR$/vendor/symfony/polyfill-php80" />
-      <path value="$PROJECT_DIR$/vendor/fzaninotto/faker" />
-      <path value="$PROJECT_DIR$/vendor/symfony/event-dispatcher-contracts" />
-      <path value="$PROJECT_DIR$/vendor/symfony/asset" />
-      <path value="$PROJECT_DIR$/vendor/symfony/twig-bundle" />
-      <path value="$PROJECT_DIR$/vendor/symfony/cache-contracts" />
-      <path value="$PROJECT_DIR$/vendor/symfony/security-core" />
-      <path value="$PROJECT_DIR$/vendor/symfony/filesystem" />
-      <path value="$PROJECT_DIR$/vendor/symfony/routing" />
-      <path value="$PROJECT_DIR$/vendor/symfony/event-dispatcher" />
       <path value="$PROJECT_DIR$/vendor/symfony/polyfill-intl-idn" />
-      <path value="$PROJECT_DIR$/vendor/symfony/string" />
       <path value="$PROJECT_DIR$/vendor/ocramius/package-versions" />
-      <path value="$PROJECT_DIR$/vendor/ocramius/proxy-manager" />
-      <path value="$PROJECT_DIR$/vendor/psr/cache" />
-      <path value="$PROJECT_DIR$/vendor/psr/container" />
-      <path value="$PROJECT_DIR$/vendor/psr/event-dispatcher" />
-      <path value="$PROJECT_DIR$/vendor/psr/log" />
-      <path value="$PROJECT_DIR$/vendor/psr/link" />
-      <path value="$PROJECT_DIR$/vendor/symfony/web-server-bundle" />
-      <path value="$PROJECT_DIR$/vendor/symfony/process" />
       <path value="$PROJECT_DIR$/vendor/sensio/framework-extra-bundle" />
-<<<<<<< Updated upstream
-      <path value="$PROJECT_DIR$/vendor/phpoffice/phpspreadsheet" />
-      <path value="$PROJECT_DIR$/vendor/psr/simple-cache" />
-      <path value="$PROJECT_DIR$/vendor/psr/http-client" />
-      <path value="$PROJECT_DIR$/vendor/psr/http-message" />
-      <path value="$PROJECT_DIR$/vendor/psr/http-factory" />
-      <path value="$PROJECT_DIR$/vendor/markbaker/matrix" />
-      <path value="$PROJECT_DIR$/vendor/markbaker/complex" />
-      <path value="$PROJECT_DIR$/vendor/myclabs/php-enum" />
-      <path value="$PROJECT_DIR$/vendor/maennchen/zipstream-php" />
-      <path value="$PROJECT_DIR$/vendor/symfony/mailer" />
       <path value="$PROJECT_DIR$/vendor/egulias/email-validator" />
-=======
-      <path value="$PROJECT_DIR$/vendor/egulias/email-validator" />
-      <path value="$PROJECT_DIR$/vendor/symfony/mailer" />
->>>>>>> Stashed changes
+      <path value="$PROJECT_DIR$/vendor/symfony/swiftmailer-bundle" />
+      <path value="$PROJECT_DIR$/vendor/swiftmailer/swiftmailer" />
     </include_path>
   </component>
-  <component name="PhpProjectSharedConfiguration" php_language_level="7.2" />
 </project>
\ No newline at end of file
